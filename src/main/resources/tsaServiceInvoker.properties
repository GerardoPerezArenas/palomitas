# Copyright (C) 2012-13 MINHAP, Gobierno de Espa\u00f1a
# This program is licensed and may be used, modified and redistributed under the terms
# of the European Public License (EUPL), either version 1.1 or (at your
# option) any later version as soon as they are approved by the European Commission.
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and
# more details.
# You should have received a copy of the EUPL1.1 license
# along with this program; if not, you may find it at
# http://joinup.ec.europa.eu/software/page/eupl/licence-eupl


#PROPIEDADES COMUNES PARA INVOCAR LOS SERVICIOS DE TS@

#Ruta al almacen de confianza (JKS) para conexiones seguras.
com.trustedstorePath =

#Contrase\u00f1a del almac\u00e9n de confianza (JKS) para conexiones seguras.
com.trustedstorePassword =


#PROPIEDADES COMUNES PARA INVOCAR LOS SERVICIOS WEB DE TS@

#Ruta al fichero descriptor con los servicios web
com.serviceWSDLPath =


#PROPIEDADES ESPEC\u00cdFICAS DE CADA APLICACI\u00d3N PARA INVOCAR LOS SERVICIOS WEB DE TS@

#Tiempo de vida para las peticiones SOAP, en milisegundos.
appTSA.callTimeout =

#Tipo de autenticaci\u00f3n para la petici\u00f3n SOAP:
#UserNameToken: Autorizaci\u00f3n por usuario/contrase\u00f1a.
#X509CertificateToken: Autorizaci\u00f3n por certificado.
#SAMLToken: Autorizaci\u00f3n por SAML
appTSA.authorizationMethod =

# ---------- INICIO AUTENTICACI\u00d3N UserNameToken ----------
#Nombre de usuario para el caso de autenticaci\u00f3n por usuario/contrase\u00f1a para la petici\u00f3n SOAP.
appTSA.UserNameToken.userName =

#Contrase\u00f1a de usuario para el caso de autenticaci\u00f3n por usuario/contrase\u00f1a para la petici\u00f3n SOAP.
appTSA.UserNameToken.userPassword =
# ---------- FIN AUTENTICACI\u00d3N UserNameToken ----------

# ---------- INICIO AUTENTICACI\u00d3N X509CertificateToken ----------
#Mecanismo de inclusi\u00f3n del certificado para el caso de autorizaci\u00f3n por certificado para la petici\u00f3n SOAP:
#Direct: Binary Security Token
#Identifier: Key Identifier
#IssuerSerialNumber: Issuer and Serial Number
appTSA.X509CertificateToken.inclusionMethod =

#Ruta al almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por certificado.
appTSA.X509CertificateToken.keystorePath =

#Tipo de almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por certificado:
#PKCS12
#JKS
#JCEKS
appTSA.X509CertificateToken.keystoreType =

#Contrase\u00f1a del almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por certificado.
appTSA.X509CertificateToken.keystorePassword =

#Alias de la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por certificado.
appTSA.X509CertificateToken.privateKeyAlias =

#Contrase\u00f1a de la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por certificado.
appTSA.X509CertificateToken.privateKeyPassword =
# ---------- FIN AUTENTICACI\u00d3N X509CertificateToken ----------

# ---------- INICIO AUTENTICACI\u00d3N SAMLToken ----------
#M\u00e9todo de confirmaci\u00f3n del sujeto para el caso de autorizaci\u00f3n por SAML:
#HOK: Holder-of-Key
#SV: Sender-Vouches
appTSA.SAMLToken.method =

#Ruta al almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por SAML.
appTSA.SAMLToken.keystorePath =

#Tipo de almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por SAML:
#PKCS12
#JKS
#JCEKS
appTSA.SAMLToken.keystoreType =

#Contrase\u00f1a del almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por SAML.
appTSA.SAMLToken.keystorePassword =

#Alias de la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por SAML.
appTSA.SAMLToken.privateKeyAlias =

#Contrase\u00f1a de la clave privada a usar para firmar la petici\u00f3n SOAP en el caso de autenticaci\u00f3n por SAML.
appTSA.SAMLToken.privateKeyPassword =
# ---------- FIN AUTENTICACI\u00d3N SAMLToken ----------

# ---------- INICIO CIFRADO PETICI\u00d3N CON CLAVE SIM\u00c9TRICA ----------
#Indicador para cifrar las peticiones SOAP con clave sim\u00e9trica o no:
#true: Las peticiones SOAP ir\u00e1n cifradas.
#false: Las peticiones SOAP no ir\u00e1n cifradas.
appTSA.request.symmetricKey.use =

#Alias de la clave sim\u00e9trica a usar para cifrar las peticiones SOAP.
appTSA.request.symmetricKey.alias =

#Valor de la clave sim\u00e9trica, en hexadecimal, a usar para cifrar las peticiones SOAP.
appTSA.request.symmetricKey.value =

# ---------- FIN CIFRADO PETICI\u00d3N CON CLAVE SIM\u00c9TRICA ----------

# ---------- INICIO AUTENTICACI\u00d3N RESPUESTA FIRMADA ----------
#Ruta al almac\u00e9n de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP que se encuentren firmadas.
appTSA.response.keystorePath =

#Tipo de almac\u00e9n de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP que se encuentren firmadas.
#PKCS12
#JKS
#JCEKS
appTSA.response.keystoreType =

#Contrase\u00f1a del almac\u00e9n de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP que se encuentren firmadas.
appTSA.response.keystorePassword =

#Alias del certificado a usar para validar las respuestas SOAP que se encuentren firmadas.
appTSA.response.certificateAlias =

# ---------- FIN AUTENTICACI\u00d3N RESPUESTA FIRMADA ----------

# ---------- INICIO AUTENTICACI\u00d3N RESPUESTA SAML ----------
#Ruta al almac\u00e9n de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP aseguradas con SAML.
appTSA.response.SAML.keystorePath =

#Tipo de almac\u00e9n de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP aseguradas con SAML.
#PKCS12
#JKS
#JCEKS
appTSA.response.SAML.keystoreType =

#Contrase\u00f1a del almac\u00e9n de claves donde se encuentra almacenado el certificado a usar para validar las respuestas SOAP aseguradas con SAML.
appTSA.response.SAML.keystorePassword =

#Alias del certificado a usar para validar las respuestas SOAP aseguradas con SAML.
appTSA.response.SAML.certificateAlias =

# ---------- FIN AUTENTICACI\u00d3N RESPUESTA SAML ----------

# ---------- INICIO DESCIFRADO RESPUESTA CON CLAVE SIM\u00c9TRICA ----------
#Alias de la clave sim\u00e9trica a usar para descifrar las respuestas SOAP cifradas con clave sim\u00e9trica.
appTSA.response.symmetricKey.alias =

#Valor de la clave sim\u00e9trica a usar para descifrar las respuestas SOAP cifradas con clave sim\u00e9trica.
appTSA.response.symmetricKey.value =



#PROPIEDADES ESPEC\u00cdFICAS DE CADA APLICACI\u00d3N PARA INVOCAR LOS SERVICIOS RFC 3161 DE TS@

#Direcci\u00f3n host donde se encuentra desplegado el servicio RFC 3161.
appTSA.rfc3161.host =

#OID de la pol\u00edtica de sello de tiempo a indicar en la petici\u00f3n.
appTSA.rfc3161.timestampPolicyOID =

#OID de la aplicaci\u00f3n a indicar en la petici\u00f3n
appTSA.rfc3161.applicationOID = 1.3.4.6.1.3.4.6

#Tiempo de vida para las peticiones al servicio RFC 3161, en milisegundos.
appTSA.rfc3161.Timeout =

#Algoritmo de resumen que aplicar sobre los datos a sellar:
#SHA
#SHA-256
#SHA-512
#RIPEMD-160
appTSA.rfc3161.shaAlgorithm =


# ---------- INICIO SERVICIO RFC 3161 (TCP) ----------

#N\u00famero del puerto donde se encuentra desplegado el servicio RFC 3161.
appTSA.rfc3161.portNumber =

# ---------- INICIO SERVICIO RFC 3161 (TCP) ----------


# ---------- INICIO SERVICIO RFC 3161 (HTTPS) ----------

#N\u00famero del puerto donde se encuentra desplegado el servicio RFC 3161 - HTTPS.
appTSA.rfc3161HTTPS.portNumber =

#Contexto para la conexi\u00f3n con el servicio RFC 3161 por HTTPS.
appTSA.rfc3161HTTPS.context =

#Indicador para utilizar autenticaci\u00f3n HTTPS mediante certificado cliente o no:
#true: El cliente se autentica mediante certificado.
#false: El cliente no requiere de autenticaci\u00f3n mediante certificado.
appTSA.rfc3161HTTPS.useAuthClient =

#Ruta al almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para la autenticaci\u00f3n HTTPS del cliente por certificado.
appTSA.rfc3161HTTPS.keystorePath =

#Tipo de almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para la autenticaci\u00f3n HTTPS del cliente por certificado:
#PKCS12
#JKS
#JCEKS
appTSA.rfc3161HTTPS.keystoreType =

#Contrase\u00f1a del almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para la autenticaci\u00f3n HTTPS del cliente por certificado.
appTSA.rfc3161HTTPS.keystorePassword =

# ---------- INICIO SERVICIO RFC 3161 (HTTPS) ----------


# ---------- INICIO SERVICIO RFC 3161 (SSL) ----------

#N\u00famero del puerto donde se encuentre desplegado el servicio RFC 3161 que permite autenticaci\u00f3n por SSL.
appTSA.rfc3161SSL.portNumber =

#Ruta al almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para la autenticaci\u00f3n por SSL.
appTSA.rfc3161SSL.keystorePath =

#Tipo de almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para la autenticaci\u00f3n por SSL:
#PKCS12
#JKS
#JCEKS
appTSA.rfc3161SSL.keystoreType =

#Contrase\u00f1a del almac\u00e9n de claves donde se encuentra almacenada la clave privada a usar para la autenticaci\u00f3n por SSL.
appTSA.rfc3161SSL.keystorePassword =

# ---------- INICIO SERVICIO RFC 3161 (SSL) ----------
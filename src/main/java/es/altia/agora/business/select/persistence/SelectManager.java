/* Generated by Together */

package es.altia.agora.business.select.persistence;

import es.altia.common.service.config.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import es.altia.agora.business.select.SelectValueObject;
import es.altia.agora.business.select.SelectJoinValueObject;
import es.altia.agora.business.select.exception.SelectException;
import es.altia.agora.business.select.persistence.manual.SelectListaDAO;
import es.altia.agora.business.select.persistence.manual.SelectDescripcionDAO;
public class SelectManager {
    /**
     * Esto es un código que sigue el patrón de diseño <code>Singleton</code>
     * Los métodos de negocio gestionan que la persistencia sea manual o automática
     * Es protected, por lo que la única manera de instanciar esta clase es usando el factory method <code>getInstance</code>
     */
    protected SelectManager() {
        //Queremos usar el fichero de configuración technical
        m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");
        //Queremos tener acceso a los mensajes de error localizados
        m_ConfigError = ConfigServiceHelper.getConfig("error");
    }

    /**
     * Intenta cargar las listas de una Bolsa de Empleo.
     * @param SelectValueObject. Un Value Object conteniendo los parametros de la Select
     * @exception SelectException si hay algun problema con el contexto de la Select
     */
	// Esquema BD --> Añade parametro "String[] params".

    public SelectValueObject getSelectValue(SelectValueObject laSelect, String[] params)
        throws SelectException {
            //queremos estar informados de cuando este metodo es ejecutado
            m_Log.debug("getSelectValue");

            try {
                m_Log.debug("Usando persistencia manual");

                if(("").equals(laSelect.getCol_cod()))
                   laSelect.setValor_desc(SelectDescripcionDAO.getInstance().load(laSelect,params));

                else{
                   laSelect.setLista_resultado(SelectListaDAO.getInstance().load(laSelect,params));
                }
                m_Log.debug("Listas de la Select obtenidas");
                //We want to be informed when this method has finalized
                m_Log.debug("getSelectValue");
                return laSelect;
            } catch (Exception ce) {
                m_Log.error("JDBC Technical problem " + ce.getMessage());
                //throw new BolsaEmpleoException("Problema técnico de JDBC " + ce.getMessage());
                return laSelect;
            }
    }


    public SelectJoinValueObject getSelectJoinValue(SelectJoinValueObject laSelectJoin)
        throws SelectException {
            //queremos estar informados de cuando este metodo es ejecutado
            m_Log.debug("getSelectValue");

            try {
                m_Log.debug("Usando persistencia manual");

                laSelectJoin.setLista_resultado_join(SelectListaDAO.getInstance().loadJoin(laSelectJoin));

                m_Log.debug("Listas de la Select obtenidas");
                //We want to be informed when this method has finalized
                m_Log.debug("getSelectValue");
                return laSelectJoin;
            } catch (Exception ce) {
                m_Log.error("JDBC Technical problem " + ce.getMessage());
                //throw new BolsaEmpleoException("Problema técnico de JDBC " + ce.getMessage());
                return laSelectJoin;
            }
    }



    /**
     * Factory method para el <code>Singelton</code>.
     * @return La unica instancia de SelectManager
     */
    public static SelectManager getInstance() {
        //Si no hay una instancia de esta clase tenemos que crear una
        if (instance == null) {
            // Necesitamos sincronización aquí para serializar (no multithread)
            // las invocaciones a este metodo
            synchronized(SelectManager.class) {
                if (instance == null) {
                    instance = new SelectManager();
                }
            }
        }
        return instance;
    }

    private static SelectManager instance = null; // Mi propia instancia usada en el metodo getInstance

    /*
     * Declaracion de servicios
     */

    protected static Config m_ConfigTechnical; // Para el fichero de configuracion technical
    protected static Config m_ConfigError; // Para el fichero de mensajes de error localizados
    protected static Log m_Log =
            LogFactory.getLog(SelectManager.class.getName());

}

/* Generated by Together */

package es.altia.agora.business.select.persistence.manual;

import es.altia.agora.business.select.SelectValueObject;
import es.altia.agora.business.select.exception.SelectDescripcionException;
import es.altia.common.exception.*;
import es.altia.common.service.config.*;
import es.altia.common.service.jdbc.JDBCWrapper;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.Vector;


public class SelectDescripcionDAO {

    /**
     * Construye un nuevo SelectDescripcionDAO. Es protected, por lo que la unica manera de instanciar esta clase
     * es usando el factory method <code>getInstance</code>
     */
    protected SelectDescripcionDAO() {
	  super();
	  //Queremos usar el fichero de configuracion techserver
	  m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");
	  //Queremos tener acceso a los mensajes de error localizados
	  m_ConfigError = ConfigServiceHelper.getConfig("error");

    }


    /**
     * Recupera la descripcion de un codigo
     * @param laSelect que contiene los nombre de los campos y de la tabla
     * @exception SelectDescripcionException si existe algun problema tecnico.
     * @exception TechnicalException si hay algun problema tecnico usando los servicios del framework.
     */
    // Esquema BD: añade parametro "String[] params"
    public String load(SelectValueObject laSelect,String[] params) throws SelectDescripcionException, TechnicalException
    {

	  String laDescripcion = "---";
	  //Queremos estar informados de cuando este metod es ejecutado
	  m_Log.debug("load");

	  //Obtiene la sentencia sql a ser ejecutada del fichero de configuracion tecnico.
	  String sql = "";
	  //Usar el JDBCWrapper es mas sencillo que usar JDBC directamente
	  JDBCWrapper sqlExec = new JDBCWrapper();
		// ----> Esquema BD
		if (params != null) sqlExec.setJndi(params[6]);
		// ---- fin esquema BD

	  try
	  {
		String col_desc_c   = laSelect.getCol_desc_c();
		String nom_tabla    = laSelect.getNom_tabla();
		// Creamos la select con los parametros adecuados (campos y tablas)
		sql = "SELECT " + col_desc_c + " FROM " + nom_tabla ;

			if (laSelect.getColumn_valor_where() != null)
			{
					Vector c = laSelect.getColumn_valor_where();
					if ( (c.size()>1) ){
						 sql += " where " + c.elementAt(0) + "='"+c.elementAt(1)+"'";
						for (int j=2; j<c.size(); j+=2)
						{
							sql += " and " + c.elementAt(j) + "='"+ c.elementAt(j+1)+"'";
						}
					}
			 }

		if(m_Log.isDebugEnabled()) m_Log.debug("sentencia despues" + sql);

		//Ahora el JDBCWrapper tiene suficiente informacion para construir la sentencia sql.
		//De este modo, la podemos ejecutar.

		sqlExec.execute(sql);

		if(m_Log.isDebugEnabled()) m_Log.debug("Select Descripcion: " + sql);
		if( sqlExec.next() )
		{
			laDescripcion = sqlExec.getString(col_desc_c);
		    m_Log.debug(sqlExec.getString(col_desc_c));
		 }
		 m_Log.debug("Obtenida la descripcion del codigo.");

	  }
	  catch (Exception e)
	  {
	     //Si la eliminacion va mal tenemos que lanzar y loggear la excepcion
	     m_Log.error(e.getMessage());
	     sqlExec.close();
	     return(laDescripcion);
	     //throw new SelectDescripcionException(m_ConfigError.getString("Error.SelectDescripcoin.loadSelectDescripcion"), e);
	  }

	  //Queremos estar informados de cuando este metodo ha finalizado
	  m_Log.debug("load");

	  return(laDescripcion);
    }

    /**
     * Factory method para el<code>Singelton</code>.
     * @return La unica instancia de SelectDescripcionDAO.The only CustomerDAO instance.
     */
    public static SelectDescripcionDAO getInstance() {
	  //si no hay ninguna instancia de esta clase tenemos que crear una
	  if (instance == null) {
		// Necesitamos sincronizacion para serializar (no multithread)
		// Las invocaciones de este metodo
		synchronized(SelectDescripcionDAO.class) {
		    if (instance == null) {
			  instance = new SelectDescripcionDAO();
		    }
		}
	  }
	  return instance;
    }

     /*
     * Mi propia instancia. Usada en el metodo getInstance
     */

    private static SelectDescripcionDAO instance = null;

     /*
     * Declaracion de servicios
     */

    protected static Config m_ConfigTechnical; //Para el fichero de configuracion tecnico
    protected static Config m_ConfigError; //Para los mensajes de error localizados
    protected static Log m_Log =
            LogFactory.getLog(SelectDescripcionDAO.class.getName());            

    /*
    * Nombres de los campos de la Persona Fisica en la Base de datos
    */
}

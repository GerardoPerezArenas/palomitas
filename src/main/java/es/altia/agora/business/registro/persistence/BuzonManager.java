/* Generated by Together */

package es.altia.agora.business.registro.persistence;

import es.altia.common.service.config.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import es.altia.agora.business.registro.persistence.manual.BuzonDAO;
import java.util.Vector;

public class BuzonManager{

   //Instancia única
   private static BuzonManager instance = null;
   //Para el fichero de configuracion technical
   protected static Config m_ConfigTechnical;
   //Para el fichero de mensajes de error localizados
   protected static Config m_ConfigError;
   protected static Log m_Log =
           LogFactory.getLog(BuzonManager.class.getName());

   /**
    * Esto es un código que sigue el patrón de diseño <code>Singleton</code>.
    * Los métodos de negocio gestionan que la persistencia sea manual o
    * automática. Es protected, por lo que la única manera de instanciar esta
    * clase es usando el factory method <code>getInstance</code>
    */
   protected BuzonManager() {
	//Queremos usar el fichero de configuración technical
	m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");
	//Queremos tener acceso a los mensajes de error localizados
	m_ConfigError = ConfigServiceHelper.getConfig("error");

   }

   /**
    * Método encargado de rellenar el buzón con los datos de la BD.
    * @param bf El BuzonForm a rellenar
    */
    public Vector rellenarBuzon(int org, int ent, int dep, int uor, String[] parametros){
	 //queremos estar informados de cuando este metodo es ejecutado
	 m_Log.debug("rellenarBuzon");
	 Vector v = null;
	 try {
	    m_Log.debug("Usando persistencia manual");
	    v = BuzonDAO.getInstance().load(org,ent,dep,uor,parametros);//acceso a la BD
	    m_Log.debug("Buzon obtenido de la BD");
	    //Informo de que este método a terminado
	    m_Log.debug("rellenarBuzon");
	 }
	 catch (Exception e){//putada!!!!!!!!
	    m_Log.error("Problema técnico de JDBC " + e.getMessage());
	 }
	 return v;
    }

    /**
     * Factory method para el <code>Singelton</code>.
     * @return La unica instancia de BuzonManager
     */
    public static BuzonManager getInstance() {
	 //Si no hay una instancia de esta clase tenemos que crear una
	 if (instance == null) {
	    // Necesitamos sincronización aquí para serializar (no multithread)
	    // las invocaciones a este metodo
	    synchronized(BuzonManager.class) {
		 if (instance == null) {
		    instance = new BuzonManager();
		 }
	    }
	 }
	 return instance;
    }
}

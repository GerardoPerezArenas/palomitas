/* Generated by Together */

package es.altia.agora.business.registro.persistence.manual;


import es.altia.agora.business.registro.RegistroEntradaSalidaValueObject;
import es.altia.agora.business.registro.RegistroValueObject;
import es.altia.agora.business.registro.exception.AbrirCerrarRegistroException;
import es.altia.agora.business.util.jdbc.SigpGeneralOperations;
import es.altia.common.exception.*;
import es.altia.common.service.config.*;
import es.altia.common.service.jdbc.JDBCWrapper;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import es.altia.util.conexion.*;

import java.sql.*;
import java.sql.SQLException;

import java.util.Date;

public class RegistroAperturaCierreDAO {


    /**
     * Construye un nuevo SelectListaDAO. Es protected, por lo que la unica manera de instanciar esta clase
     * es usando el factory method <code>getInstance</code>
     */
    protected RegistroAperturaCierreDAO() {
        super();
        //Queremos usar el fichero de configuracion techserver
        m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");
        //Queremos tener acceso a los mensajes de error localizados
        m_ConfigError = ConfigServiceHelper.getConfig("error");


        // Conexion
        //url = m_ConfigTechnical.getString("url2");
        //usuario = m_ConfigTechnical.getString("usuario2");
        //password = m_ConfigTechnical.getString("password2");
        //driverClass = m_ConfigTechnical.getString("driverClass");

        dep_cod = m_ConfigTechnical.getString("SQL.R_REG.dep_cod");
        uor_cod = m_ConfigTechnical.getString("SQL.R_REG.uor_cod");
        reg_uae = m_ConfigTechnical.getString("SQL.R_REG.ultApertEntrada");
        reg_uas = m_ConfigTechnical.getString("SQL.R_REG.ultApertSalida");
        reg_uce = m_ConfigTechnical.getString("SQL.R_REG.ultCierrEntrada");
        reg_ucs = m_ConfigTechnical.getString("SQL.R_REG.ultCierrSalida");
        rer_eje = m_ConfigTechnical.getString("SQL.R_RER.ejercicio");
        rer_num = m_ConfigTechnical.getString("SQL.R_RER.numero");
        rer_fec = m_ConfigTechnical.getString("SQL.R_RER.fecha");
        rer_tipo = m_ConfigTechnical.getString("SQL.R_RER.tipo");
        rer_dep_cod = m_ConfigTechnical.getString("SQL.R_RER.dep_cod");
        rer_uor_cod = m_ConfigTechnical.getString("SQL.R_RER.uor_cod");

    }


    /**
     * Recuperar los codigos y descripciones de una determinada tabla
     * @param laSelect con los nombres de campos y de la tabla para crear la select
     * @exception SelectListaException si existe algun problema tecnico.
     * @exception TechnicalException si hay algun problema tecnico usando los servicios del framework.
     */
    public void load(RegistroEntradaSalidaValueObject regESVO_BD,String[] parametros)
            throws AbrirCerrarRegistroException, TechnicalException
    {

        //Queremos estar informados de cuando este metod es ejecutado
        m_Log.debug("load REGISTRO");

        //Obtiene la sentencia sql a ser ejecutada del fichero de configuracion tecnico.
        String sql = "";

        //Usar el JDBCWrapper es mas sencillo que usar JDBC directamente
        JDBCWrapper sqlExec = new JDBCWrapper();
        m_Log.debug("Voy a especificar un jndi en load RegistroAperturaCierreDAO");
        sqlExec.setJndi(parametros[6]);//le digo al wrapper el jndi que quiero
        m_Log.debug("jndi establecido: " + parametros[6]);

        try
        {

            // dep_cod y uni_cod se obtienen del valueObject.
            String cod_dep = regESVO_BD.getDep_cod();
            String cod_unidad= regESVO_BD.getUni_cod();

            // Creamos la select con los parametros adecuados (campos y tablas)
            sql = "SELECT "+ dep_cod+ ","+ uor_cod+","+ reg_uae+","+reg_uas+","+reg_uce;
            sql += ","+ reg_ucs +" FROM R_REG ";
            sql = sql + " WHERE " +dep_cod +" ='" + cod_dep + "' ";
            sql = sql + " AND "+ uor_cod + " = '" + cod_unidad + "'";
            sql = sql + " ORDER BY 1";

            if(m_Log.isDebugEnabled()) m_Log.debug("RegistroAperturaCierreDAO: Sentencia SQL:" + sql);

            //Ahora el JDBCWrapper tiene suficiente informacion para construir la sentencia sql.
            //De este modo, la podemos ejecutar.

            sqlExec.execute(sql);

            if ( sqlExec.next() ) // En teoría sólo obtendremos uno.
            {

                cod_dep = sqlExec.getString(dep_cod);
                regESVO_BD.setDep_cod(cod_dep);
                String cod_uni = sqlExec.getString(uor_cod);
                regESVO_BD.setUni_cod(cod_uni);

                Date fecha = sqlExec.getDate(reg_uae);
                if (fecha != null) regESVO_BD.setReg_UAE(fecha);

                fecha = sqlExec.getDate(reg_uas);
                if (fecha != null) regESVO_BD.setReg_UAS(fecha);

                fecha = sqlExec.getDate(reg_uce);
                if (fecha != null) regESVO_BD.setReg_UCE(fecha);

                fecha = sqlExec.getDate(reg_ucs);
                if (fecha != null) regESVO_BD.setReg_UCS(fecha);

                m_Log.debug("RegistroAperturaCierreDAO: Cargado el registro");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            //Si la lectura tiene problemas tenemos que lanzar y loggear la excepcion
            m_Log.error(e.getMessage());
            throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.load"), e);
        }
        finally {
            if (sqlExec!=null) sqlExec.close();
        }

        //Queremos estar informados de cuando este metodo ha finalizado
        m_Log.debug("load REGISTRO");

    }




    public void modify(RegistroEntradaSalidaValueObject regESVO_BD, String[] params)
            throws AbrirCerrarRegistroException, TechnicalException
    {

        //Queremos estar informados de cuando este metod es ejecutado
        m_Log.debug("modify REGISTRO (abrir o cerrar)");

        String qActualizar = regESVO_BD.getOpcion();

        if ("abrir_entrada".equals(qActualizar) || "abrir_salida".equals(qActualizar) )
        {
            modify_abrirRegistro(regESVO_BD, params);

        } else { // Cerrar registro, necesario comprobar inconsistencias.

            modify_cerrarRegistro(regESVO_BD, params);
        }

        //Queremos estar informados de cuando este metodo ha finalizado
        m_Log.debug("modify REGISTRO (abrir o cerrar");
    }


    private boolean registroEmpezado(Connection c, RegistroEntradaSalidaValueObject regESVO_BD)
            throws SQLException
    {
        boolean empezado = false;

        String sql = "SELECT "+ dep_cod ;
        sql +=" FROM R_REG ";
        sql +=" WHERE "+ dep_cod +"='" + regESVO_BD.getDep_cod() + "' ";
        sql +=" AND "+ uor_cod +"='" + regESVO_BD.getUni_cod() + "' ";

        PreparedStatement ps = c.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        if (rs.next())
            empezado = true;
        return empezado;
    }

    private void modify_abrirRegistro(RegistroEntradaSalidaValueObject regESVO_BD, String[] params)
            throws AbrirCerrarRegistroException, TechnicalException
    {

        String atributo="";
        String qActualizar = regESVO_BD.getOpcion();

        if ("abrir_entrada".equals(qActualizar) )
            atributo = reg_uce;
        else if ("abrir_salida".equals(qActualizar) )
            atributo = reg_ucs;
        else atributo ="";


        String sql = "";
        Connection con=null;
        AdaptadorSQLBD oad = null;

        try
        {
            m_Log.debug("voy a por conexion en modify_abrirRegistro en RegistroAperturaCierreDAO");
            oad = new AdaptadorSQLBD(params);
            con = oad.getConnection();
            m_Log.debug("Creada conexion" + con.toString());

            sql = "UPDATE R_REG SET ";
            sql += atributo + "= " + oad.convertir("'" + regESVO_BD.getFec_apertura_cierre() + "'",
                    AdaptadorSQL.CONVERTIR_COLUMNA_FECHA, "yyyy-mm-dd") + "-1 ";
            sql += " WHERE "+ dep_cod +" ='" + regESVO_BD.getDep_cod()+ "' ";
            sql += " AND "+ uor_cod + "= '" + regESVO_BD.getUni_cod()+ "'";


            if(m_Log.isDebugEnabled()) m_Log.debug("RegistroAperturaCierreDAO: Sentencia de actualizacion ABRIENDO:" + sql);

            PreparedStatement ps = con.prepareStatement(sql);
            int res = ps.executeUpdate();
            if (res > 0) {
                if ("abrir_entrada".equals(qActualizar) )
                    regESVO_BD.setReg_UAE(regESVO_BD.getFec_apertura_cierre());
                else if ("abrir_salida".equals(qActualizar) )
                    regESVO_BD.setReg_UAS(regESVO_BD.getFec_apertura_cierre());
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            if(m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
        }
        finally {
            try{
                oad.devolverConexion(con);
                m_Log.debug("en el try del finally de apertura");
            }catch (Exception e){
                e.printStackTrace();
                if(m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.RegistroAperturaCierreValueObject.conexion"), e);
            }
        }
    }


    private void modify_cerrarRegistro(RegistroEntradaSalidaValueObject regESVO_BD, String[] params)
            throws AbrirCerrarRegistroException, TechnicalException
    {

        String atributo="";
        String tipoRegistro="";
        String qActualizar = regESVO_BD.getOpcion();

        if ("cerrar_entrada".equals(qActualizar) )
        {
            atributo = reg_uce;
            tipoRegistro = "E";
        }
        else if ("cerrar_salida".equals(qActualizar) )
        {
            atributo = reg_ucs;
            tipoRegistro ="S";
        }

        Connection con=null;
        AdaptadorSQLBD oad = null;

        try {
            m_Log.debug("voy a por conexion en modify_abrirRegistro en RegistroAperturaCierreDAO");
            oad = new AdaptadorSQLBD(params);
            con = oad.getConnection();
            m_Log.debug("Creada conexion" + con.toString());


            RegistroValueObject r = new RegistroValueObject();
            r.setIdentDepart(Integer.parseInt(regESVO_BD.getDep_cod()));
            r.setUnidadOrgan(Integer.parseInt(regESVO_BD.getUni_cod()));
            r.setTipoReg(tipoRegistro);

            // Comprobar q REGISTRO esta abierto.

            //if (getFechaRegistroAbierto(con, r) != null) {

            // Comprobar si hay reservas de número antes de cerrar el registro.
            String sql = "SELECT " + rer_eje+ ", "+ rer_num +" FROM R_RER ";
            sql = sql + " WHERE "+ rer_dep_cod + "= '"+ regESVO_BD.getDep_cod()+"' ";
            sql = sql + " AND "+ rer_uor_cod +"= '"+regESVO_BD.getUni_cod()+"' ";
            sql = sql + " AND "+ rer_tipo +"='" + tipoRegistro + "' ";
            sql = sql + " AND " + oad.convertir(rer_fec, AdaptadorSQL.CONVERTIR_COLUMNA_TEXTO, "YYYY-MM-DD") + "<= '" +
                    regESVO_BD.getFec_apertura_cierre().toString() + "'";

            if(m_Log.isDebugEnabled()) m_Log.debug("RegistroAperturaCierreDAO (Numero Reservas): Sentencia SQL:" + sql);

            PreparedStatement ps = con.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();
            int numReservas=0;

            while (rs.next()) // Hay números de reserva para el registro.
            {
                numReservas++;
            }

            regESVO_BD.setTotalReservas(numReservas);

            if (numReservas == 0) {

                if ( registroEmpezado(con, regESVO_BD) ) { // Actualizar
                    sql = "UPDATE R_REG SET ";
                    sql += atributo + "= " + oad.convertir("'"+regESVO_BD.getFec_apertura_cierre().toString()+"'",
                            AdaptadorSQL.CONVERTIR_COLUMNA_FECHA, "yyyy-mm-dd");
                    sql = sql + " WHERE "+ dep_cod + "= '"+ regESVO_BD.getDep_cod()+"' ";
                    sql = sql + " AND "+ uor_cod +"= '"+regESVO_BD.getUni_cod()+"' ";
                } else { // Insertar
                    sql = "INSERT INTO R_REG (" + dep_cod +","+ uor_cod + ","+ atributo +")";
                    sql +=" VALUES ('"+ regESVO_BD.getDep_cod()+"' ";
                    sql +=",'"+ regESVO_BD.getUni_cod()+"' ";
                    sql +="," + oad.convertir("'"+regESVO_BD.getFec_apertura_cierre().toString()+"'",
                            AdaptadorSQL.CONVERTIR_COLUMNA_FECHA, "yyyy-mm-dd") + ") ";
                }

                ps = con.prepareStatement(sql);
                int res = ps.executeUpdate();
                if (res > 0) {
                    if ("cerrar_entrada".equals(qActualizar) )
                        regESVO_BD.setReg_UCE(regESVO_BD.getFec_apertura_cierre());
                    else if ("cerrar_salida".equals(qActualizar) )
                        regESVO_BD.setReg_UCS(regESVO_BD.getFec_apertura_cierre());
                }

          }

        } catch (Exception e) {
            e.printStackTrace();
            m_Log.error(e.getMessage()) ;
            throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.modify_cerrarRegistro.driver"), e);
        }
        finally {
            try{
                oad.devolverConexion(con);
                m_Log.debug("conexion cerrada");
            }catch (Exception e){
                e.printStackTrace();
                if(m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.modify_cerrarRegistro.conexion"), e);
            }
        }
    }




    /**
     * getFechaRegistroAbierto(String tipoApertura)
     * @parámetros: - tipoApertura: finalidad (entrada ó salida) para la que se pretende
     *							  obtener la fecha en que está abierto el registro.
     * @return: - Fecha en que está abierto el registro.
     *        - NULL si no está abierto
     *
     * NOTA: FALTA CONSIDERAR dep_cod y uor_cod.
     */

/*
    public Date getFechaRegistroAbierto(String tipoApertura)
  throws AbrirCerrarRegistroException, TechnicalException
    {

    //Queremos estar informados de cuando este metod es ejecutado
    m_Log.debug("getFechaRegistroAbierto");

   //Obtiene la sentencia sql a ser ejecutada del fichero de configuracion tecnico.
   String sql = "";

   //Usar el JDBCWrapper es mas sencillo que usar JDBC directamente
   JDBCWrapper sqlExec = new JDBCWrapper();

   String atribFA  = ""; // Atributo fecha abierta
   String atribFC = "";
   Date fechaA=null;
   Date fechaC=null;

   if ("E".equals(tipoApertura) ) {
       atribFA= reg_uae;
       atribFC= reg_uce;
    }
     else {
      atribFA = reg_uas;
      atribFC = reg_ucs;
     }


   try
   {

       // dep_cod y uni_cod se obtienen del valueObject.
       // String dep_cod = regESVO_BD.getDep_cod();
       // String uni_cod = regESVO_BD.getUni_cod();

       // Creamos la select con los parametros adecuados (campos y tablas)
       sql = "SELECT " + atribFA + ","+ atribFC + " FROM R_REG ";
       // sql = sql + " WHERE DEP_COD ='" + cod_dep + "' "
       // sql = sql + " AND UNI_COD = '" + cod_unidad + "'";
       sql = sql + " ORDER BY 1";

       if(m_Log.isDebugEnabled()) m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroAbierto: Sentencia SQL:" + sql);

       //Ahora el JDBCWrapper tiene suficiente informacion para construir la sentencia sql.
       //De este modo, la podemos ejecutar.

       sqlExec.execute(sql);

     if ( sqlExec.next() ) // En teoría sólo obtendremos uno.
     {

         //String cod_dep = sqlExec.getString(dep_cod);
         //regESVO_BD.setDep_cod(cod_dep);
         //String cod_uni = sqlExec.getString(uor_cod);
         //regESVO_BD.setUni_cod(cod_uni);

         fechaA = sqlExec.getDate(atribFA);
         fechaC = sqlExec.getDate(atribFC);

         if (fechaA.compareTo(fechaC) <= 0 )
          fechaA = null; // No está abierto

      m_Log.info("RegistroAperturaCierreDAO, getFechaRegistroAbierto: Cargadas las fechas del registro");
    }
    }
    catch (Exception e)
    {
        fechaA = null;
        e.printStackTrace();
        //Si la lectura tiene problemas tenemos que lanzar y loggear la excepcion
        m_Log.error(e.getMessage());
       throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.getFechaRegistroAbierto"), e);
    }
    finally {
        sqlExec.close();
    }


    //Queremos estar informados de cuando este metodo ha finalizado
    m_Log.exit("getFechaRegistroAbierto");
    return fechaA;

    }

*/
    public Date getFechaRegistroAbierto(RegistroValueObject registro, String[] params)
            throws AbrirCerrarRegistroException, TechnicalException
    {

        //Queremos estar informados de cuando este metod es ejecutado
        m_Log.debug("getFechaRegistroAbierto");

        //Obtiene la sentencia sql a ser ejecutada del fichero de configuracion tecnico.
        String sql = "";

        //Usar el JDBCWrapper es mas sencillo que usar JDBC directamente
        JDBCWrapper sqlExec = new JDBCWrapper();
        m_Log.debug("Voy a especificar un jndi en getFechaRegistroAbierto");
        sqlExec.setJndi(params[6]);
        m_Log.debug("jndi establecido: " + params[6]);


        String tipoApertura=registro.getTipoReg();
        String cod_dep=String.valueOf(registro.getIdentDepart());
        String cod_unidad=String.valueOf(registro.getUnidadOrgan());

        String atribFA  = ""; // Atributo fecha abierta
        String atribFC = "";
        Date fechaA=null;
        Date fechaC=null;

        if ("E".equals(tipoApertura) ) {
            atribFA= reg_uae;
            atribFC= reg_uce;
        }
        else {
            atribFA = reg_uas;
            atribFC = reg_ucs;
        }


        try
        {
            // Creamos la select con los parametros adecuados (campos y tablas)
            sql = "SELECT " + atribFA + ","+ atribFC + " FROM R_REG ";
            sql = sql + " WHERE " + dep_cod + "='" + cod_dep + "' ";
            sql = sql + " AND " + uor_cod + "= '" + cod_unidad + "'";
            sql = sql + " ORDER BY 1";

            if(m_Log.isDebugEnabled()) m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroAbierto: Sentencia SQL:" + sql);

            //Ahora el JDBCWrapper tiene suficiente informacion para construir la sentencia sql.
            //De este modo, la podemos ejecutar.

            sqlExec.execute(sql);

            if ( sqlExec.next() ) // En teoría sólo obtendremos uno.
            {
                fechaA = sqlExec.getDate(atribFA);
                fechaC = sqlExec.getDate(atribFC);

                if (fechaA != null) {
                    if (fechaC != null) {
                        if (fechaA.compareTo(fechaC) <= 0 )
                            fechaA = null; // No está abierto
                    }
                } else fechaA= null;

                m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroAbierto: Cargadas las fechas del registro");
            }
        }
        catch (Exception e)
        {
            fechaA = null;
            e.printStackTrace();
            //Si la lectura tiene problemas tenemos que lanzar y loggear la excepcion
            m_Log.error(e.getMessage());
            throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.getFechaRegistroAbierto"), e);
        }
        finally {
           if (sqlExec!=null) sqlExec.close();
        }


        //Queremos estar informados de cuando este metodo ha finalizado
        m_Log.debug("getFechaRegistroAbierto");
        return fechaA;

    }


    /**
     * getFechaRegistroAbierto(Connection c, String tipoApertura)
     * @parámetros: - tipoApertura: finalidad (entrada ó salida) para la que se pretende
     *							  obtener la fecha en que está abierto el registro.
     * @return: - Fecha en que está abierto el registro.
     *        - NULL si no está abierto
     *
     * NOTA: FALTA CONSIDERAR dep_cod y uor_cod.
     */


    public Date getFechaRegistroAbierto(Connection c, RegistroValueObject registro)
            throws AbrirCerrarRegistroException, TechnicalException
    {

        //Queremos estar informados de cuando este metod es ejecutado
        m_Log.debug("getFechaRegistroAbierto");

        //Obtiene la sentencia sql a ser ejecutada del fichero de configuracion tecnico.
        String sql = "";
        /*
        //Usar el JDBCWrapper es mas sencillo que usar JDBC directamente
        JDBCWrapper sqlExec = new JDBCWrapper();
        */
        String tipoApertura=registro.getTipoReg();
        String cod_dep=String.valueOf(registro.getIdentDepart());
        String cod_unidad=String.valueOf(registro.getUnidadOrgan());

        String atribFA  = ""; // Atributo fecha abierta
        String atribFC = "";
        Date fechaA=null;
        Date fechaC=null;

        if ("E".equals(tipoApertura) ) {
            atribFA= reg_uae;
            atribFC= reg_uce;
        }
        else {
            atribFA = reg_uas;
            atribFC = reg_ucs;
        }


        try
        {
            // Creamos la select con los parametros adecuados (campos y tablas)
            sql = "SELECT " + atribFA + ","+ atribFC + " FROM R_REG ";
            sql = sql + " WHERE " + dep_cod + "='" + cod_dep + "' ";
            sql = sql + " AND " + uor_cod + "= '" + cod_unidad + "'";
            sql = sql + " ORDER BY 1";

            if(m_Log.isDebugEnabled()) m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroAbierto: Sentencia SQL:" + sql);

            PreparedStatement ps = c.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();
            if (rs.next())
            {
                //String cod_dep = sqlExec.getString(dep_cod);
                //regESVO_BD.setDep_cod(cod_dep);
                //String cod_uni = sqlExec.getString(uor_cod);
                //regESVO_BD.setUni_cod(cod_uni);

                fechaA = rs.getDate(atribFA);
                fechaC = rs.getDate(atribFC);

                if (fechaA != null) {
                    if (fechaC != null) {
                        if (fechaA.compareTo(fechaC) <= 0 )
                            fechaA = null; // No está abierto
                    }
                } else fechaA= null;

                m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroAbierto: Cargadas las fechas del registro");
            }
        }
        catch (Exception e)
        {
            fechaA = null;
            e.printStackTrace();
            //Si la lectura tiene problemas tenemos que lanzar y loggear la excepcion
            m_Log.error(e.getMessage());
            throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.getFechaRegistroAbierto"), e);
        }

        //Queremos estar informados de cuando este metodo ha finalizado
        m_Log.debug("getFechaRegistroAbierto");
        return fechaA;
    }

    public Date getFechaRegistroCerrado(Connection c, RegistroValueObject registro)
            throws AbrirCerrarRegistroException, TechnicalException
    {

        //Queremos estar informados de cuando este metod es ejecutado
        m_Log.debug("getFechaRegistroCerrado");

        //Obtiene la sentencia sql a ser ejecutada del fichero de configuracion tecnico.
        String sql = "";
        /*
        //Usar el JDBCWrapper es mas sencillo que usar JDBC directamente
        JDBCWrapper sqlExec = new JDBCWrapper();
        */
        String tipoApertura=registro.getTipoReg();
        String cod_dep=String.valueOf(registro.getIdentDepart());
        String cod_unidad=String.valueOf(registro.getUnidadOrgan());
        PreparedStatement ps = null;
        ResultSet rs = null;

        String atribFC = "";
        Date fechaC=null;

        if ("E".equals(tipoApertura) ) {
            atribFC= reg_uce;
        }
        else {
            atribFC = reg_ucs;
        }

            // Creamos la select con los parametros adecuados (campos y tablas)
        try {
            sql = "SELECT " + atribFC + " FROM R_REG ";
            sql = sql + " WHERE " + dep_cod + "='" + cod_dep + "' ";
            sql = sql + " AND " + uor_cod + "= '" + cod_unidad + "'";
            sql = sql + " ORDER BY 1";

            if (m_Log.isDebugEnabled()) {
                m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroCerrado: Sentencia SQL:" + sql);


            }
            ps = c.prepareStatement(sql);

            rs = ps.executeQuery();
            if (rs.next()) {
                m_Log.debug("entra en el if del resultSet en el getFechaRegistroCerrado");

                fechaC = rs.getDate(atribFC);


                m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroCerrado: Cargadas las fechas del registro");
            }
            //Queremos estar informados de cuando este metodo ha finalizado
            m_Log.debug("getFechaRegistroAbierto");
            return fechaC;
        } catch (SQLException e) {
            e.printStackTrace();
            //Si la lectura tiene problemas tenemos que lanzar y loggear la excepcion
            m_Log.error(e.getMessage());
            throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.getFechaRegistroAbierto"), e);
        } finally {
            SigpGeneralOperations.closeResultSet(rs);
            SigpGeneralOperations.closeStatement(ps);
        }


    }

    public Date getFechaRegistroCerrado(RegistroValueObject registro, String[] params)
            throws AbrirCerrarRegistroException, TechnicalException
    {

        //Queremos estar informados de cuando este metod es ejecutado
        m_Log.debug("getFechaRegistroCerrado");

        //Obtiene la sentencia sql a ser ejecutada del fichero de configuracion tecnico.
        String sql = "";

        //Usar el JDBCWrapper es mas sencillo que usar JDBC directamente
        JDBCWrapper sqlExec = new JDBCWrapper();
        m_Log.debug("Voy a especificar un jndi en getFechaRegistroCerrado");
        sqlExec.setJndi(params[6]);
        m_Log.debug("jndi establecido: " + params[6]);


        String tipoApertura=registro.getTipoReg();
        String cod_dep=String.valueOf(registro.getIdentDepart());
        String cod_unidad=String.valueOf(registro.getUnidadOrgan());

        //String atribFA  = ""; // Atributo fecha abierta
        String atribFC = "";
        //Date fechaA=null;
        Date fechaC=null;

        if ("E".equals(tipoApertura) ) {
            atribFC= reg_uce;
        }
        else {
            atribFC = reg_ucs;
        }


        try
        {
            // Creamos la select con los parametros adecuados (campos y tablas)
            sql = "SELECT " + atribFC + " FROM R_REG ";
            sql = sql + " WHERE " + dep_cod + "='" + cod_dep + "' ";
            sql = sql + " AND " + uor_cod + "= '" + cod_unidad + "'";
            sql = sql + " ORDER BY 1";

            if(m_Log.isDebugEnabled()) m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroCerrado: Sentencia SQL:" + sql);

            //Ahora el JDBCWrapper tiene suficiente informacion para construir la sentencia sql.
            //De este modo, la podemos ejecutar.

            sqlExec.execute(sql);

            if ( sqlExec.next() ) // En teoría sólo obtendremos uno.
            {
                fechaC = sqlExec.getDate(atribFC);

                m_Log.debug("RegistroAperturaCierreDAO, getFechaRegistroCerrado: Cargadas las fechas del registro");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            //Si la lectura tiene problemas tenemos que lanzar y loggear la excepcion
            m_Log.error(e.getMessage());
            throw new AbrirCerrarRegistroException(m_ConfigError.getString("Error.RegistroAperturaCierreDAO.getFechaRegistroCerrado"), e);
        }
        finally {
           if (sqlExec!=null) sqlExec.close();
        }


        //Queremos estar informados de cuando este metodo ha finalizado
        m_Log.debug("getFechaRegistroAbierto");
        return fechaC;

    }

    /**
     * Factory method para el<code>Singelton</code>.
     * @return La unica instancia de SelectListaDAO.The only CustomerDAO instance.
     */
    public static RegistroAperturaCierreDAO getInstance() {
        //si no hay ninguna instancia de esta clase tenemos que crear una
        if (instance == null) {
            // Necesitamos sincronizacion para serializar (no multithread)
            // Las invocaciones de este metodo
            synchronized(RegistroAperturaCierreDAO.class) {
                if (instance == null) {
                    instance = new RegistroAperturaCierreDAO();
                }
            }
        }
        return instance;
    }

    /*
    * Mi propia instancia. Usada en el metodo getInstance
    */

    private static RegistroAperturaCierreDAO instance = null;

    /*
    * Declaracion de servicios
    */

    protected static Config m_ConfigTechnical; //Para el fichero de configuracion tecnico
    protected static Config m_ConfigError; //Para los mensajes de error localizados
    protected static Log m_Log =
            LogFactory.getLog(RegistroAperturaCierreDAO.class.getName());

    protected static String url;
    protected static String usuario;
    protected static String password;
    protected static String driverClass;

    protected static String dep_cod;
    protected static String uor_cod;
    protected static String reg_uae;
    protected static String reg_uas;
    protected static String reg_uce;
    protected static String reg_ucs;
    protected static String rer_eje;
    protected static String rer_num;
    protected static String rer_fec;
    protected static String rer_dep_cod;
    protected static String rer_uor_cod;
    protected static String rer_tipo;

}

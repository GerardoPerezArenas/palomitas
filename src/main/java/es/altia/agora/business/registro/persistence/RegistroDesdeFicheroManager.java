/* Generated by Together */

package es.altia.agora.business.registro.persistence;

import es.altia.common.service.config.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import es.altia.agora.business.registro.exception.AnotacionRegistroException;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.business.registro.persistence.manual.RegistroDesdeFicheroDAO;
import java.util.Vector;

public class RegistroDesdeFicheroManager{
    /**
     * Esto es un código que sigue el patrón de diseño <code>Singleton</code>
     * Los métodos de negocio gestionan que la persistencia sea manual o automática
     * Es protected, por lo que la única manera de instanciar esta clase es usando el factory method <code>getInstance</code>
     */
    protected RegistroDesdeFicheroManager() {

    }

    /**
     * Intenta cargar la información sobre el registro (librillo).
     * @param SelectValueObject. Un Value Object conteniendo los parametros de la Select
     * @exception SelectException si hay algun problema con el contexto de la Select
     */

    public Vector insertRegistrosDesdeFichero(GeneralValueObject fichero,String[] params)
    throws AnotacionRegistroException {
    	
    	//queremos estar informados de cuando este metodo es ejecutado
    	m_Log.debug("insertRegistrosDesdeFichero");
    	Vector resultado = null;


    	try {
        	m_Log.debug("Usando persistencia manual");
        	resultado= RegistroDesdeFicheroDAO.getInstance().insertRegistrosDesdeFichero(fichero,params);        
        	m_Log.debug("insertRegistrosDesdeFichero");

    	} catch (Exception ce) {
        	m_Log.error("JDBC Technical problem " + ce.getMessage());
        	throw new AnotacionRegistroException("Problema técnico de JDBC " + ce.getMessage());
    	} finally {
    		return resultado;
    	}
    }

	public boolean comprobarNumeroReservados (GeneralValueObject fichero)
	throws AnotacionRegistroException {
			  m_Log.debug("comprobarNumeroReservados");
			  boolean resultado = false;
			  try {
				  m_Log.debug("Usando persistencia manual");
				  resultado= RegistroDesdeFicheroDAO.getInstance().comprobarNumeroReservados(fichero);        
				  m_Log.debug("comprobarNumeroReservados");
			  } catch (Exception ce) {
				  m_Log.error("JDBC Technical problem " + ce.getMessage());
				  throw new AnotacionRegistroException("Problema técnico de JDBC " + ce.getMessage());
			  } finally {
				  return resultado;
			  }		
	}
	
	public Vector comprobarReservados(GeneralValueObject fichero, String[] params)
	throws AnotacionRegistroException {
			m_Log.debug("comprobarReservados");
			Vector resultado = new Vector();
			try {
				m_Log.debug("Usando persistencia manual");
				resultado= RegistroDesdeFicheroDAO.getInstance().comprobarReservados(fichero, params);        
				m_Log.debug("comprobarReservados");
			} catch (Exception ce) {
				m_Log.error("JDBC Technical problem " + ce.getMessage());
				throw new AnotacionRegistroException("Problema técnico de JDBC " + ce.getMessage());
			} finally {
				return resultado;
			}		
	}
	
   /**
     * Factory method para el <code>Singelton</code>.
     * @return La unica instancia de SelectManager
     */
    public static RegistroDesdeFicheroManager getInstance() {
    	//Si no hay una instancia de esta clase tenemos que crear una
    	if (instance == null) {
    		// Necesitamos sincronización aquí para serializar (no multithread)
    		// las invocaciones a este metodo
    		synchronized(AnotacionRegistroManager.class) {
        		if (instance == null) {
	        		instance = new RegistroDesdeFicheroManager();
        		}
    		}
    	}
    	return instance;
    }

    private static RegistroDesdeFicheroManager instance = null; // Mi propia instancia usada en el metodo getInstance

    /*
     * Declaracion de servicios
     */

    protected static Config m_ConfigTechnical; // Para el fichero de configuracion technical
    protected static Config m_ConfigError; // Para el fichero de mensajes de error localizados
    protected static Log m_Log =
            LogFactory.getLog(RegistroDesdeFicheroManager.class.getName());
}

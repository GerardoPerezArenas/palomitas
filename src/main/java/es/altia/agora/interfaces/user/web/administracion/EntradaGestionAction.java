/* Generated by Together */

package es.altia.agora.interfaces.user.web.administracion;

import es.altia.agora.technical.Fecha;
import java.io.IOException;
import java.util.Vector;
import java.util.Date;
import java.util.StringTokenizer;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import es.altia.common.service.config.*;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.business.administracion.GestionValueObject;
import es.altia.agora.business.administracion.AgendaValueObject;
import es.altia.agora.business.administracion.HorarioCentroValueObject;
import es.altia.agora.business.administracion.persistence.GestionManager;
import es.altia.agora.business.administracion.exception.GestionException;
import es.altia.agora.interfaces.user.web.util.Registro;
import es.altia.agora.business.escritorio.UsuarioValueObject;

public final class EntradaGestionAction extends Action {
  protected static Log m_Log = LogFactory.getLog(EntradaGestionAction.class.getName());

  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws IOException, ServletException {
    ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));
    HttpSession session = request.getSession();

    //Queremos tener acceso a los mensajes de error localizados
    Config m_ConfigError = ConfigServiceHelper.getConfig("error");

    String params[] = null;

    if ((session.getAttribute("usuario") != null)) {
      UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
      params = usuario.getParamsCon();
      int cod_dep;
      int cod_uni;
      cod_dep= usuario.getDepCod();
      cod_uni= usuario.getUnidadOrgCod();
    }

    GestionForm gestionform = (GestionForm)form;
    GestionValueObject laGestion = gestionform.getGestion();

    //Obtenemos informacion acerca de cual va a ser la accion que deberemos llevar a cabo.
    String accion = request.getParameter("accion");
    laGestion.setAccion(accion);

    //Actualizamos los siguientes parametros para que no aparezca el error
    //anterior almacenado en la sesion.
    laGestion.setListaMensajesError(new Vector());
    laGestion.setError("no");

    if("cargar".equals(accion)) {
      laGestion = gestionform.getGestion();
      laGestion.setListaMensajesError(new Vector());
      laGestion.setError("no");
      laGestion = GestionManager.getInstance().inicCalendarioGeneral(laGestion,params);
      gestionform.setGestion(laGestion);
      return (mapping.findForward("calendario_general"));

    }

    else if("CalendarioGeneral.Grabar".equals(accion)){
      try{
        StringTokenizer festivo = new StringTokenizer(request.getParameter("festivo"),"zxz",false);

        Vector festivos= new Vector();

        while(festivo.hasMoreTokens())
          festivos.addElement(festivo.nextToken());

        GestionManager.getInstance().grabarCalendarioGeneral(festivos,params);

        return (mapping.findForward("ocultoCalendario"));

      } catch(GestionException pfe){
        Vector listaError =new Vector();
        listaError.add(m_ConfigError.getString("Error.CalendarioGeneral.grabarCalendario"));
        gestionform.setListaMensajesError(listaError);
        laGestion.setError("si");
        return (mapping.findForward("calendario_general"));
      }
    }

    else if("CalendarioCentro.CambioCentro".equals(accion)){
      try{
        //Se obtiene la informacion necesaria para mostrar los calendarios
        //correspondientes al nuevo centro seleccionado.
        laGestion.setCentro(request.getParameter("centro").substring(0,5));
        laGestion.setUbicacion(request.getParameter("centro").substring(5));

        laGestion = GestionManager.getInstance().inicCalendarioCentro(laGestion);
        gestionform.setGestion(laGestion);

        return (mapping.findForward("ocultoCalendario"));

      } catch(GestionException pfe){
        Vector listaError =new Vector();
        listaError.add(m_ConfigError.getString("Error.CalendarioCentro.cambiarCentro"));
        gestionform.setListaMensajesError(listaError);
        laGestion.setError("si");
        return (mapping.findForward("calendario_centro"));
      }
    }

    else if("CalendarioCentro.Grabar".equals(accion)){
      try{
        String codCentro    = request.getParameter("centro").substring(0,5);
        String codUbicacion = request.getParameter("centro").substring(5);
        laGestion.setCentro(codCentro);
        laGestion.setUbicacion(codUbicacion);

        StringTokenizer festivoCentro  = new StringTokenizer(request.getParameter("festivosCentro"),"zxz",false);
        StringTokenizer vacacionCentro = new StringTokenizer(request.getParameter("vacacionesCentro"),"zxz",false);

        Vector festivosCentro= new Vector();
        Vector vacacionesCentro= new Vector();

        while(festivoCentro.hasMoreTokens())
          festivosCentro.addElement(festivoCentro.nextToken());

        while(vacacionCentro.hasMoreTokens())
          vacacionesCentro.addElement(vacacionCentro.nextToken());

        GestionManager.getInstance().grabarCalendarioCentro(festivosCentro, vacacionesCentro, laGestion);


        Vector fechas = new Vector();
        StringTokenizer dias = new StringTokenizer(request.getParameter("dias_cambiados"),"zxz",false);
        while (dias.hasMoreTokens())
        {
          fechas.addElement(dias.nextToken());
        }
        try
        {
          GestionManager.getInstance().generarAgendaPorDiasCentro(fechas, codCentro, codUbicacion);
        }
        catch(GestionException pfe)
        {
          Vector listaError =new Vector();
          listaError.add(m_ConfigError.getString("Error.CalendarioCentro.generarAgenda"));
          gestionform.setListaMensajesError(listaError);
          laGestion.setError("si");
          return (mapping.findForward("calendario_centro"));
        }


        return (mapping.findForward("ocultoCalendario"));

      } catch(GestionException pfe){
        Vector listaError =new Vector();
        listaError.add(m_ConfigError.getString("Error.CalendarioCentro.grabarCalendario"));
        gestionform.setListaMensajesError(listaError);
        laGestion.setError("si");
        return (mapping.findForward("calendario_centro"));
      }
    }

    else if("HorarioCentro.CambioCentro".equals(accion)){
      try{
        //Se obtiene la informacion necesaria para mostrar el horario
        //correspondiente al nuevo centro seleccionado.
        laGestion.setCentro(request.getParameter("centro").substring(0,5));
        laGestion.setUbicacion(request.getParameter("centro").substring(5));

        laGestion = GestionManager.getInstance().inicHorarioCentro(laGestion);
        gestionform.setGestion(laGestion);

        return (mapping.findForward("ocultoCalendario"));

      } catch(GestionException pfe){
        Vector listaError =new Vector();
        listaError.add(m_ConfigError.getString("Error.HorarioCentro.cambiarCentro"));
        gestionform.setListaMensajesError(listaError);
        laGestion.setError("si");
        return (mapping.findForward("horario_centro"));
      }
    }

    else if("HorarioCentro.Grabar".equals(accion)){
      try
      {
        String codCentro    = request.getParameter("centro").substring(0,5);
        String codUbicacion = request.getParameter("centro").substring(5);
        laGestion.setCentro(codCentro);
        laGestion.setUbicacion(codUbicacion);

        StringTokenizer col0 = new StringTokenizer(request.getParameter("horarioCentro0"),"zxz",false);
        StringTokenizer col1 = new StringTokenizer(request.getParameter("horarioCentro1"),"zxz",false);
        StringTokenizer col2 = new StringTokenizer(request.getParameter("horarioCentro2"),"zxz",false);
        StringTokenizer col3 = new StringTokenizer(request.getParameter("horarioCentro3"),"zxz",false);
        StringTokenizer col4 = new StringTokenizer(request.getParameter("horarioCentro4"),"zxz",false);
        StringTokenizer col5 = new StringTokenizer(request.getParameter("horarioCentro5"),"zxz",false);

        Vector losHorarioCentro= new Vector();
        HorarioCentroValueObject elHorarioCentro;

        while (col0.hasMoreTokens())
        {
          elHorarioCentro = new  HorarioCentroValueObject(col0.nextToken(), col1.nextToken(), col2.nextToken(),
              col3.nextToken(), cargarToken(col4.nextToken()), cargarToken(col5.nextToken()));

          losHorarioCentro.addElement(elHorarioCentro);
        }

        GestionManager.getInstance().grabarHorarioCentro(losHorarioCentro, laGestion);
        try
        {
          StringTokenizer borrados0 = new StringTokenizer(request.getParameter("horarios_borrados0"),"zxz",false);
          StringTokenizer borrados1 = new StringTokenizer(request.getParameter("horarios_borrados1"),"zxz",false);
          while (borrados0.hasMoreTokens())
          {
            elHorarioCentro = new  HorarioCentroValueObject(borrados0.nextToken(), borrados1.nextToken(), null, null, null, null);
            losHorarioCentro.addElement(elHorarioCentro);
          }

          GestionManager.getInstance().generarAgendasCentro(losHorarioCentro, laGestion);
        }
        catch(GestionException pfe)
        {
          Vector listaError =new Vector();
          listaError.add(m_ConfigError.getString("Error.CalendarioCentro.generarAgenda"));
          gestionform.setListaMensajesError(listaError);
          laGestion.setError("si");
          return (mapping.findForward("horario_centro"));
        }

        return (mapping.findForward("ocultoCalendario"));

      } catch(GestionException pfe){
        Vector listaError =new Vector();
        listaError.add(m_ConfigError.getString("Error.HorarioCentro.grabarHorario"));
        gestionform.setListaMensajesError(listaError);
        laGestion.setError("si");
        return (mapping.findForward("horario_centro"));
      }
    }

    else if("Salir".equals(accion)){
      return (mapping.findForward("inicio"));
    }

    else {
      // Eliminamos por si acaso el formulario para borrar los posibles
      // datos que pueda haber almacenados.
      if (session.getAttribute("GestionForm")!=null)
        session.removeAttribute("GestionForm");

      session.setAttribute("GestionForm", gestionform);

      return (mapping.findForward("agenda"));

    }
  }

  public String cargarToken(String auxiliar){
    if(auxiliar.equals("wyw"))
      auxiliar = "";
    return auxiliar;
  }

}

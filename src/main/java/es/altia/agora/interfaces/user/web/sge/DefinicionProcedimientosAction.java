/* Generated by Together */
package es.altia.agora.interfaces.user.web.sge;

import es.altia.agora.business.administracion.OrganizacionVO;
import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.registro.exception.AnotacionRegistroException;
import es.altia.agora.business.sge.DefinicionProcedimientosValueObject;
import es.altia.agora.business.sge.DefinicionCampoValueObject;
import es.altia.agora.business.sge.DefinicionTramitesValueObject;
import es.altia.agora.business.sge.exception.TramitacionException;
import es.altia.agora.business.sge.persistence.DefinicionProcedimientosManager;
import es.altia.agora.business.sge.persistence.DefinicionTramitesManager;
import es.altia.agora.business.sge.persistence.FirmasDocumentoProcedimientoManager;
import es.altia.agora.business.sge.FirmasDocumentoProcedimientoVO;
import es.altia.agora.business.sge.TablasIntercambiadorasValueObject;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.business.administracion.mantenimiento.persistence.UsuariosGruposManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.UORsManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.CamposDesplegablesManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.OrganizacionesManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.manual.UORDTO;
import es.altia.agora.business.geninformes.utils.Utilidades;
import es.altia.agora.business.registro.persistence.InformesManager;
import es.altia.agora.business.sge.persistence.FichaExpedienteManager;
import es.altia.agora.technical.ConstantesDatos;
import es.altia.common.service.config.*;
import es.altia.util.commons.StringOperations;
import es.altia.flexia.expedientes.anulacion.plugin.VerificacionFinNoConvencionalExpediente;
import es.altia.flexia.expedientes.anulacion.plugin.VerificacionFinNoConvencionalExpedienteFlexia;
import es.altia.flexia.expedientes.anulacion.plugin.factoria.VerificacionFinNoConvencionalExpedienteFactoria;
import es.altia.flexia.expedientes.relacionados.historico.factoria.PluginExpedientesRelacionadosHistoricoFactoria;
import es.altia.flexia.expedientes.relacionados.historico.plugin.PluginExpedientesRelacionadosHistorico;
import es.altia.flexia.expedientes.relacionados.historico.util.ConstantesExpedientesRelacionadosHistorico;
import es.altia.util.sqlxmlpdf.GeneralPDF;
import es.altia.util.conexion.AdaptadorSQLBD;
import es.altia.util.struts.StrutsUtilOperations;

import java.io.IOException;
import java.util.Iterator;

import java.util.StringTokenizer;
import java.util.Vector;
import java.sql.Connection;

import java.util.ArrayList;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import es.altia.flexia.integracion.moduloexterno.plugin.ModuloIntegracionExterno;
import es.altia.flexia.integracion.moduloexterno.plugin.ModuloIntegracionExternoFactoria;
import es.altia.flexia.integracion.moduloexterno.plugin.persistence.vo.DatosPantallaModuloVO;
import java.lang.reflect.Array;
import java.util.ResourceBundle;

public final class DefinicionProcedimientosAction extends ActionSession { 

    // Opciones
    private static final String OPCION_IMPORTAR = "importar";
    private static final String OPCION_IMPORTAR_PROCEDIMIENTO = "importarProcedimiento";
    private static final String OPCION_IMPORTAR_CON_ELECCION_ORGANIZACION = "importarConEleccionOrganizacion";
    private static final String OPCION_DESCARGAR_CON_ELECCION_ORGANIZACION = "descargarConEleccionOrganizacion";

    protected static Config m_Conf = ConfigServiceHelper.getConfig("common");

    public ActionForward performSession(ActionMapping mapping,
            ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response) throws IOException, ServletException {

        m_Log.debug("================= DefinicionProcedimientosAction ======================>");
        ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));

        Config m_Config = ConfigServiceHelper.getConfig("common");

        // Validaremos los parametros del request especificados
        HttpSession session = request.getSession();
        String opcion = "";
        AdaptadorSQLBD abd = null;
        Connection conexion = null;


        String elModoInicio = (String) session.getAttribute("modoInicio");
        m_Log.debug("DefinicionProcedimientosAction =========> El modo de inicio: " + elModoInicio);
        
        if ((session.getAttribute("usuario") != null)) {
            UsuarioValueObject usuario = (UsuarioValueObject) session.getAttribute("usuario");
            String[] params = usuario.getParamsCon();
            int cod_dep;
            int cod_uni;
            cod_dep = usuario.getDepCod();
            cod_uni = usuario.getUnidadOrgCod();

            ActionErrors errors = new ActionErrors();

            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            DefinicionProcedimientosForm defProcForm = null;

            if (form == null) {
                m_Log.debug("Rellenamos el form de Mantenimiento De Tipos de Documento");
                form = new DefinicionProcedimientosForm();
                if ("request".equals(mapping.getScope())) {
                    request.setAttribute(mapping.getAttribute(), form);
                } else {
                    session.setAttribute(mapping.getAttribute(), form);
                }
            }

            defProcForm = (DefinicionProcedimientosForm) form;

            opcion = request.getParameter("opcion");
            if (m_Log.isInfoEnabled()) {
                m_Log.info("La opcion en el action es " + opcion);
            }
            if (opcion.equals("inicio")){
                defProcForm.setTxtCodigo(null);
            }
            
            // #303601: recuperamos propiedad CONFIGURAR_PROCEDIMIENTO_ANOEXPANOTACION de common.properties.
            String propConfNum = usuario.getOrgCod() + "/CONFIGURAR_PROCEDIMIENTO_ANOEXPANOTACION";
            String valConfNum = "no";
            try {
                valConfNum = m_Conf.getString(propConfNum);
                m_Log.debug("La propiedad " + propConfNum + " recupera tiene el valor: " + valConfNum);
            } catch (Exception ex){
                m_Log.error("Se ha producido un error al acceder a la propiedad " + propConfNum + " de common.properties");
            }
            
            defProcVO.setPropNumExpedientesAnoAsientoBuzon(valConfNum.toLowerCase());
                
            
            /**** SE RECUPERAN LOS SERVICIOS DE VERIFICACION DE FINALIZACIÓN NO CONVENCIONAL DE EXPEDIENTES *****/            
            ArrayList<VerificacionFinNoConvencionalExpediente> servicios_fin = VerificacionFinNoConvencionalExpedienteFactoria.getServiciosDisponibles(usuario.getOrgCod());
            m_Log.debug(" *************** Número servicios disponibles: " + servicios_fin.size());
            defProcForm.setServiciosVerificacionFinExpediente(servicios_fin);
            /**** SE RECUPERAN LOS SERVICIOS DE VERIFICACION DE FINALIZACIÓN NO CONVENCIONAL DE EXPEDIENTES *****/            
            
             /*  nuevo */
                
                ResourceBundle config = ResourceBundle.getBundle("BuzonEntradaHistorico");
                String codOrg = Integer.toString(usuario.getOrgCod());
                String comprobacionHistoricoActiva = config.getString(codOrg + ConstantesExpedientesRelacionadosHistorico.BARRA + 
                            ConstantesExpedientesRelacionadosHistorico.GESTOR + ConstantesExpedientesRelacionadosHistorico.BARRA + 
                            ConstantesExpedientesRelacionadosHistorico.MOSTRAR_HIST);
                
                ArrayList <PluginExpedientesRelacionadosHistorico> Plugin = PluginExpedientesRelacionadosHistoricoFactoria.getPluginExpedientesRelacionadosHistorico(codOrg);
                String Listacodigo = new String();
                String Listadescrip = new String();
                String Listaclase = new String();
                                             
                if ("SI".equals(comprobacionHistoricoActiva)){                    
                    for(int i =0;i<Plugin.size();i++)
                    {
                        PluginExpedientesRelacionadosHistorico PERH = Plugin.get(i);
                        Listacodigo += PERH.getCodigo() +";";
                        Listadescrip += PERH.getDescripcion()+";";
                        Listaclase += PERH.getImplClass()+";";                                        
                    }              
                    
                    if(Listacodigo!=null && !"".equals(Listacodigo))
                        request.setAttribute("listaCodigo", Listacodigo.substring(0,Listacodigo.length()-1));
                    
                    if(Listadescrip!=null && !"".equals(Listadescrip))
                        request.setAttribute("listaDesc",Listadescrip.substring(0,Listadescrip.length()-1));
                    
                    if(Listaclase!=null && !"".equals(Listaclase))
                        request.setAttribute("Listaclase",Listaclase.substring(0,Listaclase.length()-1));
                    
                    request.setAttribute("comprobacionHistoricoActiva",comprobacionHistoricoActiva);                                        
                }
                else
                {
                    request.setAttribute("comprobacionHistoricoActiva","NO");
                }
                
                /* /nuevo */
            
            // Determinar si esta activada la funcionalidad de eleccion de entorno
            // desde el que importar
            if (OPCION_IMPORTAR_PROCEDIMIENTO.equals(opcion)) {
                if (ConstantesDatos.SI.equalsIgnoreCase(m_Config.getString(
                        String.format("%s%s", codOrg, ConstantesDatos.ELEGIR_ORGANIZACION_IMPORTAR_PROCEDIMIENTO)))) {
                    opcion = OPCION_IMPORTAR_CON_ELECCION_ORGANIZACION;
                } else { // Solo se pueden importar del entorno de pruebas
                    defProcForm.getDefinicionProcedimientos().setCodMunicipio("0");
                    opcion = OPCION_IMPORTAR;
                }
            }
            
            String[] paramsDiputacion = new String[7];                        
            if (opcion.equals("inicio")) {
                defProcVO.setListaTiposProcedimientos(DefinicionProcedimientosManager.getInstance().getListaTiposProcedimientos(params));
                defProcVO.setListaArea(DefinicionProcedimientosManager.getInstance().getListaArea(params));
                defProcForm.setListaModulosPantallasDefinicionProcedimientos(new ArrayList<ModuloIntegracionExterno>());
                defProcForm.setDefinicionProcedimientos(defProcVO);                               
                
                opcion = "inicio";
            } else if (opcion.equals("alta")) {
                int i = 0, j = 0;
                try {
                    abd = new AdaptadorSQLBD(params);
                    conexion = abd.getConnection();
                    abd.inicioTransaccion(conexion);
                    defProcVO = defProcForm.getDefinicionProcedimientos();

                    /** SE COMPRUEBA SI EL PROCEDIMIENTO ESTÁ RESTRINGIDO **/
                    String restringido = request.getParameter("restringido");
                    defProcVO.setRestringido(restringido);
                    
                    /*se comprueba si el procedimiento se ha marcado como biblioteca*/
                    String biblioteca  = request.getParameter("biblioteca");
                    defProcVO.setBiblioteca(biblioteca);
                    
                    // Recuperar listas de la pestaña de documentos
                    String listaNombresDoc = request.getParameter("listaNombresDoc");
                    String listaCondicionDoc = request.getParameter("listaCondicionDoc");
                    String listaCodigosDoc = request.getParameter("listaCodigosDoc");
                    defProcVO.setListaNombresDoc(listaTemasSeleccionados(listaNombresDoc));
                    defProcVO.setListaCondicionDoc(listaTemasSeleccionados(listaCondicionDoc));
                    defProcVO.setListaCodigosDoc(listaTemasSeleccionados(listaCodigosDoc));
                    // Recuperar listas de la pestaña de Campos
                    String listaCodCampos = request.getParameter("listaCodCampos");
                    String listaDescCampos = request.getParameter("listaDescCampos");
                    String listaCodPlantilla = request.getParameter("listaCodPlantilla");
                    String listaCodTipoDato = request.getParameter("listaCodTipoDato");
                    String listaTamano = request.getParameter("listaTamano");
                    String listaMascara = request.getParameter("listaMascara");
                    String listaObligatorio = request.getParameter("listaObligatorio");
                    String listaOrden = request.getParameter("listaOrden");
                    String listaRotulo = request.getParameter("listaRotulo");
                    String listaActivos = request.getParameter("listaActivos");
                    String listaOcultos = request.getParameter("listaOcultos");
                    String listaBloqueados = request.getParameter("listaBloqueados");
                    String listaPlazoFecha = request.getParameter("listaPlazoFecha");
                    String listaCheckPlazoFecha = request.getParameter("listaCheckPlazoFecha");
                    String listaValidacion = request.getParameter("listaValidacion");
                    String listaOperacion = request.getParameter("listaOperacion");
                    String listaAgrupacionesCampos = request.getParameter("listaAgrupacionesCampos");
                    String listaPosicionesX = request.getParameter("listaPosicionesX");
                    String listaPosicionesY = request.getParameter("listaPosicionesY");
            
                    defProcVO.setListaCodCampos(listaTemasSeleccionados(listaCodCampos));
                    defProcVO.setListaDescCampos(listaTemasSeleccionados(listaDescCampos));
                    defProcVO.setListaCodPlantilla(listaTemasSeleccionados(listaCodPlantilla));
                    defProcVO.setListaCodTipoDato(listaTemasSeleccionados(listaCodTipoDato));
                    defProcVO.setListaTamano(listaTemasSeleccionados(listaTamano));
                    defProcVO.setListaMascara(listaTemasSeleccionados(listaMascara));
                    defProcVO.setListaObligatorio(listaTemasSeleccionados(listaObligatorio));
                    defProcVO.setListaOrden(listaTemasSeleccionados(listaOrden));
                    defProcVO.setListaRotulo(listaTemasSeleccionados(listaRotulo));

                    defProcVO.setListaActivos(listaTemasSeleccionados(listaActivos));
                    defProcVO.setListaOcultos(listaTemasSeleccionados(listaOcultos));
                    defProcVO.setListaBloqueados(listaTemasSeleccionados(listaBloqueados));
                    defProcVO.setListaPlazoFecha(listaTemasSeleccionados(listaPlazoFecha));
                    defProcVO.setListaCheckPlazoFecha(listaTemasSeleccionados(listaCheckPlazoFecha));
                    defProcVO.setListaValidacion(listaTemasSeleccionados(listaValidacion));
                    defProcVO.setListaOperacion(listaTemasSeleccionados(listaOperacion));
                    defProcVO.setListaAgrupacionesCampo(listaTemasSeleccionados(listaAgrupacionesCampos));
                    defProcVO.setListaPosicionesX(listaTemasSeleccionados(listaPosicionesX));
                    defProcVO.setListaPosicionesY(listaTemasSeleccionados(listaPosicionesY));
                    
                    //Recuperamos las listas de las agrupaciones de campos
                    String listaCodAgrupaciones = request.getParameter("listaCodAgrupaciones");
                    String listaDescAgrupaciones = request.getParameter("listaDescAgrupaciones");
                    String listaOrdenAgrupaciones = request.getParameter("listaOrdenAgrupaciones");
                    String listaAgrupacionesActivas = request.getParameter("listaAgrupacionesActivas");
                    defProcVO.setListaCodAgrupaciones(listaTemasSeleccionados(listaCodAgrupaciones));
                    defProcVO.setListaDescAgrupaciones(listaTemasSeleccionados(listaDescAgrupaciones));
                    defProcVO.setListaOrdenAgrupaciones(listaTemasSeleccionados(listaOrdenAgrupaciones));
                    defProcVO.setListaAgrupacionesActivas(listaTemasSeleccionados(listaAgrupacionesActivas));
                    
                    // Recuperar listas de la pestaña de Enlaces
                    String listaCodEnlaces = request.getParameter("listaCodEnlaces");
                    String listaDescEnlaces = request.getParameter("listaDescEnlaces");
                    String listaUrlEnlaces = request.getParameter("listaUrlEnlaces");
                    String listaEstadoEnlaces = request.getParameter("listaEstadoEnlaces");
                    defProcVO.setListaCodEnlaces(listaTemasSeleccionados(listaCodEnlaces));
                    defProcVO.setListaDescEnlaces(listaTemasSeleccionados(listaDescEnlaces));
                    defProcVO.setListaUrlEnlaces(listaTemasSeleccionados(listaUrlEnlaces));
                    defProcVO.setListaEstadoEnlaces(listaTemasSeleccionados(listaEstadoEnlaces));
                    // Recuperar listas de la pestaña de Roles
                    String listaCodRoles = request.getParameter("listaCodRol");
                    String listaDescRoles = request.getParameter("listaDescRol");
                    String listaPorDefecto = request.getParameter("listaPorDefecto");
                    String listaConsultaWebRol = request.getParameter("listaConsultaWebRol");
                    defProcVO.setListaCodRoles(listaTemasSeleccionados(listaCodRoles));
                    defProcVO.setListaDescRoles(listaTemasSeleccionados(listaDescRoles));
                    defProcVO.setListaPorDefecto(listaTemasSeleccionados(listaPorDefecto));
                    defProcVO.setListaConsultaWebRol(listaTemasSeleccionados(listaConsultaWebRol));

                    // Recuperar listas de unidades de inicio.
                    String listaCodUnidadesInicio = request.getParameter("listaCodUnidadesInicio");
                    String listaDescUnidadesInicio = request.getParameter("listaDescUnidadesInicio");
                    defProcVO.setListaCodUnidadInicio(listaTemasSeleccionados(listaCodUnidadesInicio));
                    defProcVO.setListaDescUnidadInicio(listaTemasSeleccionados(listaDescUnidadesInicio));


                    String plazo = request.getParameter("plazo");
                    String tipoPlazo = request.getParameter("tipoPlazo");
                    String porcentaje = request.getParameter("porcentaje");

                    m_Log.debug("plazo: " + plazo);
                    m_Log.debug("Tipo plazo: " + tipoPlazo);
                    m_Log.debug("Porcentaje: " + porcentaje);
                    defProcVO.setPlazo(plazo);
                    defProcVO.setTipoPlazo(tipoPlazo);
                    if (porcentaje != null && Utilidades.isInteger(porcentaje)) {
                        defProcVO.setPorcentaje(porcentaje);
                    }

                    String disponible = request.getParameter("disponible");
                    if (disponible == null) {
                        defProcVO.setDisponible("0");
                    } else {
                        defProcVO.setDisponible("1");
                    }
                    String tramitacionInternet = request.getParameter("tramitacionInternet");
                    if (tramitacionInternet == null) {
                        defProcVO.setTramitacionInternet("0");
                    } else {
                        defProcVO.setTramitacionInternet("1");
                    }
                    String InteresadoOblig = request.getParameter("interesadoOblig");
                    m_Log.debug("DefincionProcedimientosAction.Alta.Procedimiento. Intereado Obligatorio: "+InteresadoOblig);
                    if (InteresadoOblig == null) {
                        defProcVO.setInteresadoOblig("0");
                    } else {
                        defProcVO.setInteresadoOblig("1");
                    }
                    String ClaseBuzonHistorico = request.getParameter("claseBuzonEntradaHistorico");
                    defProcVO.setClaseBuzonEntradaHistorico(ClaseBuzonHistorico);
                    
                    //Mai: Recollemos o valor do parametro soloWS, que indica se o procedemento solo se pode
                    //iniciar por WebService
                    String soloWS = request.getParameter("soloWS");
                    m_Log.debug("DefinicionProcedimientosAction. Alta Procedimiento: soloWS: "+ soloWS);
                    
                    
                    if (soloWS== null){
                        defProcVO.setSoloWS("0");
                    } else {
                        if(!"".equals(soloWS.trim())){
                            defProcVO.setSoloWS("1");
                        }else{ 
                            defProcVO.setSoloWS("0");
                        }
                    }
                    
                    

                    /*** PLUGIN DE FINALIZACIÓN NO CONVENCIONAL(ANULACIÓN)  DE EXPEDIENTE **/
                    String codServicioFinalizacion = request.getParameter("codServicioFinalizacion");
                    String descServicioFinalizacion = request.getParameter("descServicioFinalizacion");
                    String implClassServicioFinalizacion = request.getParameter("implClassServicioFinalizacion");

                    m_Log.debug(" ************** codServicioFinalizacion: " + codServicioFinalizacion);
                    m_Log.debug(" ************** descServicioFinalizacion: " + descServicioFinalizacion);
                    m_Log.debug(" ************** implClassServicioFinalizacion: " + implClassServicioFinalizacion);
                    defProcVO.setCodServicioFinalizacion(codServicioFinalizacion);
                    defProcVO.setDescServicioFinalizacion(descServicioFinalizacion);
                    defProcVO.setImplClassServicioFinalizacion(implClassServicioFinalizacion);

                    defProcVO.setTxtDescripcion(limpiarCadena(defProcVO.getTxtDescripcion()));
                    defProcVO.setDescripcionBreve(limpiarCadena(defProcVO.getDescripcionBreve()));
                    
                    i = DefinicionProcedimientosManager.getInstance().insert(conexion, defProcVO, params);

                } catch (Exception e) {
                    try {
                        abd.rollBack(conexion);
                        e.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + e.getMessage());
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + ex.getMessage());
                        }
                    }
                } finally {
                    if (i > 0) {
                        try {
                            opcion = "altaRealizada";
                            abd.finTransaccion(conexion);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    } else if (i < 0) {
                        try {
                            opcion = "yaExiste";
                            conexion.setAutoCommit(true);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    } else {
                        try {
                            opcion = "altaNoRealizada";
                            abd.rollBack(conexion);
                            conexion.setAutoCommit(true);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    }
                    try {
                        abd.devolverConexion(conexion);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + ex.getMessage());
                        }
                    }
                }
            } else if (opcion.equals("descargar")) {
                int j = 0;
                int i = 0;
                try {
                    abd = new AdaptadorSQLBD(params);
                    conexion = abd.getConnection();
                    abd.inicioTransaccion(conexion);
                    defProcVO = defProcForm.getDefinicionProcedimientos();
                    DefinicionTramitesValueObject defTramVO = new DefinicionTramitesValueObject();
                    DefinicionProcedimientosValueObject dPVO = new DefinicionProcedimientosValueObject();
                    // Recuperar listas de la pestaña de documentos
                    String listaNombresDoc = request.getParameter("listaNombresDoc");
                    String listaCondicionDoc = request.getParameter("listaCondicionDoc");
                    String listaCodigosDoc = request.getParameter("listaCodigosDoc");
                    defProcVO.setListaNombresDoc(listaTemasSeleccionados(listaNombresDoc));
                    defProcVO.setListaCondicionDoc(listaTemasSeleccionados(listaCondicionDoc));
                    defProcVO.setListaCodigosDoc(listaTemasSeleccionados(listaCodigosDoc));
                    // Recuperar listas de la pestaña de Campos
                    String listaCodCampos = request.getParameter("listaCodCampos");
                    String listaDescCampos = request.getParameter("listaDescCampos");
                    String listaCodPlantilla = request.getParameter("listaCodPlantilla");
                    String listaCodTipoDato = request.getParameter("listaCodTipoDato");
                    String listaTamano = request.getParameter("listaTamano");
                    String listaMascara = request.getParameter("listaMascara");
                    String listaObligatorio = request.getParameter("listaObligatorio");
                    String listaOrden = request.getParameter("listaOrden");
                    String listaRotulo = request.getParameter("listaRotulo");
                    String listaActivos = request.getParameter("listaActivos");
                    String listaOcultos = request.getParameter("listaOcultos");
                    String listaBloqueados = request.getParameter("listaBloqueados");
                    String listaValidacion = request.getParameter("listaValidacion");
                    String listaOperacion = request.getParameter("listaOperacion");
                    String listaAgrupacionesCampos = request.getParameter("listaAgrupacionesCampos");
                    String listaPosicionesX = request.getParameter("listaPosicionesX");
                    String listaPosicionesY = request.getParameter("listaPosicionesY");
                    defProcVO.setListaCodCampos(listaTemasSeleccionados(listaCodCampos));
                    defProcVO.setListaDescCampos(listaTemasSeleccionados(listaDescCampos));
                    defProcVO.setListaCodPlantilla(listaTemasSeleccionados(listaCodPlantilla));
                    defProcVO.setListaCodTipoDato(listaTemasSeleccionados(listaCodTipoDato));
                    defProcVO.setListaTamano(listaTemasSeleccionados(listaTamano));
                    defProcVO.setListaMascara(listaTemasSeleccionados(listaMascara));
                    defProcVO.setListaObligatorio(listaTemasSeleccionados(listaObligatorio));
                    defProcVO.setListaOrden(listaTemasSeleccionados(listaOrden));
                    defProcVO.setListaRotulo(listaTemasSeleccionados(listaRotulo));
                    defProcVO.setListaActivos(listaTemasSeleccionados(listaActivos));
                    defProcVO.setListaOcultos(listaTemasSeleccionados(listaOcultos));
                    defProcVO.setListaBloqueados(listaTemasSeleccionados(listaBloqueados));
                    defProcVO.setListaValidacion(listaTemasSeleccionados(listaValidacion));
                    defProcVO.setListaOperacion(listaTemasSeleccionados(listaOperacion));
                    defProcVO.setListaAgrupacionesCampo(listaTemasSeleccionados(listaAgrupacionesCampos));
                    defProcVO.setListaPosicionesX(listaTemasSeleccionados(listaPosicionesX));
                    defProcVO.setListaPosicionesY(listaTemasSeleccionados(listaPosicionesY));
                    //Recuperamos las listas de las agrupaciones de campos
                    String listaCodAgrupaciones = request.getParameter("listaCodAgrupaciones");
                    String listaDescAgrupaciones = request.getParameter("listaDescAgrupaciones");
                    String listaOrdenAgrupaciones = request.getParameter("listaOrdenAgrupaciones");
                    String listaAgrupacionesActivas = request.getParameter("listaAgrupacionesActivas");
                    defProcVO.setListaCodAgrupaciones(listaTemasSeleccionados(listaCodAgrupaciones));
                    defProcVO.setListaDescAgrupaciones(listaTemasSeleccionados(listaDescAgrupaciones));
                    defProcVO.setListaOrdenAgrupaciones(listaTemasSeleccionados(listaOrdenAgrupaciones));
                    defProcVO.setListaAgrupacionesActivas(listaTemasSeleccionados(listaAgrupacionesActivas));
                    // Recuperar listas de la pestaña de Enlaces
                    String listaCodEnlaces = request.getParameter("listaCodEnlaces");
                    String listaDescEnlaces = request.getParameter("listaDescEnlaces");
                    String listaUrlEnlaces = request.getParameter("listaUrlEnlaces");
                    String listaEstadoEnlaces = request.getParameter("listaEstadoEnlaces");
                    defProcVO.setListaCodEnlaces(listaTemasSeleccionados(listaCodEnlaces));
                    defProcVO.setListaDescEnlaces(listaTemasSeleccionados(listaDescEnlaces));
                    defProcVO.setListaUrlEnlaces(listaTemasSeleccionados(listaUrlEnlaces));
                    defProcVO.setListaEstadoEnlaces(listaTemasSeleccionados(listaEstadoEnlaces));
                    // Recuperar listas de la pestaña de Roles
                    String listaCodRoles = request.getParameter("listaCodRol");
                    String listaDescRoles = request.getParameter("listaDescRol");
                    String listaPorDefecto = request.getParameter("listaPorDefecto");
                    String listaConsultaWebRol = request.getParameter("listaConsultaWebRol");
                    defProcVO.setListaCodRoles(listaTemasSeleccionados(listaCodRoles));
                    defProcVO.setListaDescRoles(listaTemasSeleccionados(listaDescRoles));
                    defProcVO.setListaPorDefecto(listaTemasSeleccionados(listaPorDefecto));
                    defProcVO.setListaConsultaWebRol(listaTemasSeleccionados(listaConsultaWebRol));

                    // Recuperar listas de unidades de inicio.
                    String listaCodUnidadesInicio = request.getParameter("listaCodUnidadesInicio");
                    String listaDescUnidadesInicio = request.getParameter("listaDescUnidadesInicio");
                    defProcVO.setListaCodUnidadInicio(listaTemasSeleccionados(listaCodUnidadesInicio));
                    defProcVO.setListaDescUnidadInicio(listaTemasSeleccionados(listaDescUnidadesInicio));

                    ArrayList<FirmasDocumentoProcedimientoVO> listaFirmasVO = new ArrayList<FirmasDocumentoProcedimientoVO>();
                    String codMunicipio = "0";
                    dPVO.setCodMunicipio(codMunicipio);
                    dPVO.setCodAplicacion(defProcVO.getCodAplicacion());
                    String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(dPVO, params);
                    paramsDiputacion[0] = params[0];
                    paramsDiputacion[6] = jndi;

                    listaFirmasVO = FirmasDocumentoProcedimientoManager.getInstance().getTodasFirmasDocumentoPorProcedimiento("0", defProcVO.getTxtCodigo(), paramsDiputacion); //
                    defProcVO.setFirmasDocumentosProcedimiento(listaFirmasVO);

                    String disponible = request.getParameter("disponible");
                    if (disponible == null) {
                        defProcVO.setDisponible("0");
                    } else {
                        defProcVO.setDisponible("1");
                    }
                    String tramitacionInternet = request.getParameter("tramitacionInternet");
                    if (tramitacionInternet == null) {
                        defProcVO.setTramitacionInternet("0");
                    } else {
                        defProcVO.setTramitacionInternet("1");
                    }
                    String InteresadoOblig = request.getParameter("interesadoOblig");
                    if (InteresadoOblig == null) {
                        defProcVO.setInteresadoOblig("0");
                    } else {
                        defProcVO.setInteresadoOblig("1");
                    }
                    String ClaseBuzonHistorico = request.getParameter("claseBuzonEntradaHistorico");
                    defProcVO.setClaseBuzonEntradaHistorico(ClaseBuzonHistorico);

                    /**** PLUGIN DE FINALIZACIÓN NO CONVENCIONAL DE UN EXPEDIENTE ****/
                    m_Log.debug("=============== INICIO: RECUPERANDO EL PLUGIN DE FINALIZACIÓN DE EXPEDIENTE PARA IMPORTAR EN EL NUEVO PROCEDIMIENTO ======================");

                    // SE ESTÁ IMPORTANDO DESDE EL ENTORNO DE PRUEBAS
                    DefinicionProcedimientosValueObject aux = new DefinicionProcedimientosValueObject();
                    
                    // Se recupera los datos de conexión a la base de datos para el entorno de pruebas y recuperar
                    // la info de plugin de finalización de procedimiento del procedimiento en pruebas
                    String[] paramsAux = new String[7];
                    aux.setCodMunicipio("0");
                    aux.setCodAplicacion("4");
                    String jndiAux = DefinicionProcedimientosManager.getInstance().obtenerJndi(aux, params);
                    paramsAux[0] = params[0];
                    paramsAux[6] = jndiAux;
                    
                    
                    VerificacionFinNoConvencionalExpediente plugin = DefinicionProcedimientosManager.getInstance().getPluginFinalizacionNoConvencional(0,defProcVO.getTxtCodigo(), paramsAux);                    
                    if(plugin!=null && !(plugin instanceof VerificacionFinNoConvencionalExpedienteFlexia)){
                        m_Log.debug(" ============ El plugin tienees 1=null  y no es el por defecto de flexia ");
                        if(StringOperations.stringNoNuloNoVacio(plugin.getImplClass()) && StringOperations.stringNoNuloNoVacio(plugin.getNombre())){
                            m_Log.debug(" ============ El procedimiento a importar tiene plugin de fin no convencional " + plugin.getNombre() + " y clase: " + plugin.getImplClass());
                            defProcVO.setImplClassServicioFinalizacion(plugin.getImplClass());                            
                            defProcVO.setCodServicioFinalizacion(plugin.getNombre());                            
                        }
                    }
                    m_Log.debug("=============== FIN: RECUPERANDO EL PLUGIN DE FINALIZACIÓN DE EXPEDIENTE PARA IMPORTAR EN EL NUEVO PROCEDIMIENTO ======================");
                    /**** PLUGIN DE FINALIZACIÓN NO CONVENCIONAL DE UN EXPEDIENTE ****/

                    i = DefinicionProcedimientosManager.getInstance().insert(conexion, defProcVO, params);

                    if (i > 0) {

                        codMunicipio = "0";
                        dPVO.setCodMunicipio(codMunicipio);
                        dPVO.setCodAplicacion(defProcVO.getCodAplicacion());
                        jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(dPVO, params);
                        paramsDiputacion[0] = params[0];
                        paramsDiputacion[6] = jndi;
                        defTramVO.setCodMunicipio(codMunicipio);
                        defTramVO.setTxtCodigo(defProcVO.getTxtCodigo());
                        defTramVO = DefinicionTramitesManager.getInstance().getTramiteImportar(defTramVO, paramsDiputacion);
                        defTramVO.setCodMunicipio(defProcVO.getCodMunicipio());
                        j = DefinicionTramitesManager.getInstance().insertImportar(conexion, defTramVO, params);
                    }

                    // Obtener los campos de tipo desplegable, así como sus posibles valores
                    // para recrearlos en el entorno real.
                    String[] paramsImportar = new String[7];
                    jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(dPVO, params);
                    paramsImportar[0] = params[0];
                    paramsImportar[6] = jndi;
                    Vector camposDesplegables =
                            DefinicionProcedimientosManager.getInstance().obtenerCamposDesplegables(
                            defProcVO.getTxtCodigo(), paramsImportar);

                    if (camposDesplegables.size() > 0) {
                        CamposDesplegablesManager.getInstance().anhadirConjuntoDesplegables(camposDesplegables, params);
                    }


                } catch (Exception e) {
                    try {
                        abd.rollBack(conexion);
                        conexion.setAutoCommit(true);
                        e.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + e.getMessage());
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + ex.getMessage());
                        }
                    }
                } finally {
                    if (i > 0 && j > 0) {
                        try {
                            opcion = "altaRealizada";
                            abd.finTransaccion(conexion);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    } else if (i < 0 || j < 0) {
                        try {
                            opcion = "yaExiste";
                            abd.rollBack(conexion);
                            conexion.setAutoCommit(true);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    } else {
                        try {
                            opcion = "altaNoRealizadaDescargar";
                            abd.rollBack(conexion);
                            conexion.setAutoCommit(true);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    }
                    try {
                        abd.devolverConexion(conexion);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + ex.getMessage());
                        }
                    }
                }
            } else if (opcion.equals("consultar")) {
                Vector consulta;
                String codigo = request.getParameter("txtCodigo");
                String tipoConsulta;
                tipoConsulta = request.getParameter("tipoConsulta");
                defProcVO.setTxtCodigo(codigo);
                defProcVO = defProcForm.getDefinicionProcedimientos();

                /** Se recarga el código de municipio con el que viene de definicionProcedimiento.jsp que es el del usuario  **/
                String codMunicipio = request.getParameter("codMunicipio");
                defProcVO.setCodMunicipio(codMunicipio);
                defProcForm.setDefinicionProcedimientos(defProcVO);

                m_Log.debug("antes de consultar -> defProcVO.getCodUnidadInicio() " + defProcVO.getCodUnidadInicio());
                m_Log.debug("antes de consultar -> defProcVO.getCodUnidadInicio().size() " + defProcVO.getListaCodUnidadInicio().size());
                for (int i = 0; i < defProcVO.getListaCodUnidadInicio().size(); i++) {
                    m_Log.debug("antes de consultar -> Cod Unidad Inicio en lista " + defProcVO.getListaCodUnidadInicio().elementAt(i));
                }
                String listaCodUnidadesInicio = request.getParameter("listaCodUnidadesInicio");
                m_Log.debug("antes de consultar -> listaCodUnidadesInicio que viene en la request " + listaCodUnidadesInicio);
                //Actualizar la lista con los codigos que vienen en la request
                defProcVO.setListaCodUnidadInicio(listaTemasSeleccionados(listaCodUnidadesInicio));
                consulta = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
                m_Log.debug("DefinicionProcedimientosAction. LO que devuelve el dao (consultar): " + consulta);
                session.setAttribute("RelacionProcedimientos", consulta);
                
                                
                if ("listado".equals(tipoConsulta)) {
                    defProcForm.setDefinicionProcedimientos(defProcVO);
                    opcion = "consultarListado";
                } else {
                    opcion = "consultar";
                }
                
            } else if (opcion.equals(OPCION_IMPORTAR)) {
                Vector importa;
                String tipoConsulta;
                tipoConsulta = request.getParameter("tipoConsulta");
                defProcVO = defProcForm.getDefinicionProcedimientos();
                String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(defProcVO, params);
                paramsDiputacion[0] = params[0];
                paramsDiputacion[6] = jndi;
                importa = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, paramsDiputacion);
                session.setAttribute("RelacionProcedimientos", importa);
                defProcForm.setDefinicionProcedimientos(defProcVO);
                if ("listado".equals(tipoConsulta)) {
                    defProcForm.setDefinicionProcedimientos(defProcVO);
                    opcion = "consultarListado";
                } else {
                    opcion = "consultar";
                }
            } else if ("cargar_pagina".equals(opcion)) {
                defProcVO = defProcForm.getDefinicionProcedimientos();
                defProcForm.setDefinicionProcedimientos(defProcVO);
                opcion = "cargar_pagina";
            } else if ("recargaConsulta".equals(opcion)) {
                defProcVO.setTxtCodigo(request.getParameter("codProcedimiento"));
                defProcVO.setCodMunicipio(request.getParameter("codMunicipio"));
                defProcVO.setImportar(request.getParameter("importar"));
                
                
                // Cargar listas.
                defProcVO.setListaTiposProcedimientos(DefinicionProcedimientosManager.getInstance().getListaTiposProcedimientos(params));
                defProcVO.setListaArea(DefinicionProcedimientosManager.getInstance().getListaArea(params));

                defProcVO = DefinicionProcedimientosManager.getInstance().getPlazosFinalizacion(defProcVO, params);
                defProcForm.setDefinicionProcedimientos(defProcVO);
                
                ArrayList<ModuloIntegracionExterno> modulos = ModuloIntegracionExternoFactoria.getInstance().getImplClassModuloConPantallaDefinicionProcedimiento(0, (String)defProcForm.getTxtCodigo(),params);                                       
		defProcForm.setListaModulosPantallasDefinicionProcedimientos(modulos);
                
                
                
                session.setAttribute("modoInicio", "recargar_buscada");
                opcion = "inicio";
            } else if ("ver_consulta_listado".equals(opcion)) {
                Vector consulta;
                defProcVO.setTxtCodigo(request.getParameter("codProcedimiento"));
                consulta = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
                session.setAttribute("RelacionProcedimientos", consulta);
                defProcForm.setDefinicionProcedimientos(defProcVO);
                opcion = "consultarListado";
            } else if ("determinar_procedimiento".equals(opcion)) {
                defProcVO = defProcForm.getDefinicionProcedimientos();
                String posicion = defProcVO.getPosicionProcedimiento();

                m_Log.debug(" ******************* posicion procedimiento: " + posicion);
                defProcForm.setDefinicionProcedimientos(defProcVO);
                if (session.getAttribute("RelacionProcedimientos") == null) {
                    Vector procedimientos = new Vector();
                    procedimientos.add(defProcVO);
                    session.setAttribute("RelacionProcedimientos", procedimientos);
                }
                opcion = "determinar_procedimiento";
            } else if ("procedimiento_eliminado".equals(opcion)) {
                Vector consulta = (Vector) session.getAttribute("RelacionProcedimientos");
                defProcVO = defProcForm.getDefinicionProcedimientos();
                String posicionEliminado = defProcVO.getPosicionProcedimiento();
                String ultimo = request.getParameter("ultimo");
                if (ultimo.equals("si")) {
                    consulta.removeElementAt(Integer.parseInt(posicionEliminado));
                } else {
                    int posElim = Integer.parseInt(posicionEliminado) - 1;
                    consulta.removeElementAt(posElim);
                }
                session.setAttribute("RelacionProcedimientos", consulta);
                defProcForm.setDefinicionProcedimientos(defProcVO);
                opcion = "determinar_procedimiento";
            } else if (opcion.equals("buscar")) {
                String codMunicipio = request.getParameter("codMunicipio");
                String codigo = request.getParameter("txtCodigo");
                defProcVO.setCodMunicipio(codMunicipio);
                defProcVO.setTxtCodigo(codigo);
                defProcVO = defProcForm.getDefinicionProcedimientos();
                if ("0".equals(codMunicipio)) {
                    String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(defProcVO, params);
                    paramsDiputacion[0] = params[0]; // "oracle";
                    paramsDiputacion[6] = jndi;
                    defProcVO = DefinicionProcedimientosManager.getInstance().buscar(defProcVO, paramsDiputacion);
                } else {
                    defProcVO = DefinicionProcedimientosManager.getInstance().buscar(defProcVO, params);
                }
                if (defProcVO.getNoEncontrado() != 0) {
                    defProcForm.setDefinicionProcedimientos(defProcVO);
                    opcion = "buscar";
                } else {
                    opcion = "noEncontrado";
                }
            } else if (opcion.equals("modificar")) {
                defProcVO = defProcForm.getDefinicionProcedimientos();

                /** SE COMPRUEBA SI EL PROCEDIMIENTO ESTÁ RESTRINGIDO **/
                String restringido = request.getParameter("restringido");
                defProcVO.setRestringido(restringido);
                String libreria = request.getParameter("biblioteca");
                defProcVO.setBiblioteca(libreria);
                // #303601
                if(request.getParameter("numeracionExpedientesAnoAsiento") != null)
                    defProcVO.setNumeracionExpedientesAnoAsiento(Integer.parseInt(request.getParameter("numeracionExpedientesAnoAsiento")));
                else
                    defProcVO.setNumeracionExpedientesAnoAsiento(0);                    
                
                // Recuperar listas de la pestaña de documentos
                String listaNombresDoc = request.getParameter("listaNombresDoc");
                String listaCondicionDoc = request.getParameter("listaCondicionDoc");
                String listaCodigosDoc = request.getParameter("listaCodigosDoc");
                defProcVO.setListaNombresDoc(listaTemasSeleccionados(listaNombresDoc));
                defProcVO.setListaCondicionDoc(listaTemasSeleccionados(listaCondicionDoc));
                defProcVO.setListaCodigosDoc(listaTemasSeleccionados(listaCodigosDoc));
                // Recuperar listas de la pestaña de Campos
                String listaCodCampos = request.getParameter("listaCodCampos");
                String listaDescCampos = request.getParameter("listaDescCampos");
                String listaCodPlantilla = request.getParameter("listaCodPlantilla");
                String listaCodTipoDato = request.getParameter("listaCodTipoDato");
                String listaTamano = request.getParameter("listaTamano");
                String listaMascara = request.getParameter("listaMascara");
                String listaObligatorio = request.getParameter("listaObligatorio");
                String listaOrden = request.getParameter("listaOrden");
                String listaRotulo = request.getParameter("listaRotulo");
                String listaActivos = request.getParameter("listaActivos");
                String listaOcultos = request.getParameter("listaOcultos");
                String listaBloqueados = request.getParameter("listaBloqueados");
                String listaPlazoFecha = request.getParameter("listaPlazoFecha");
                String listaCheckPlazoFecha = request.getParameter("listaCheckPlazoFecha");
                String listaValidacion = request.getParameter("listaValidacion");
                String listaOperacion = request.getParameter("listaOperacion");
                String listaAgrupacionesCampos = request.getParameter("listaAgrupacionesCampos");
                String listaPosicionesX = request.getParameter("listaPosicionesX");
                String listaPosicionesY = request.getParameter("listaPosicionesY");
                
                defProcVO.setListaCodCampos(listaTemasSeleccionados(listaCodCampos));
                defProcVO.setListaDescCampos(listaTemasSeleccionados(listaDescCampos));
                defProcVO.setListaCodPlantilla(listaTemasSeleccionados(listaCodPlantilla));
                defProcVO.setListaCodTipoDato(listaTemasSeleccionados(listaCodTipoDato));
                defProcVO.setListaTamano(listaTemasSeleccionados(listaTamano));
                defProcVO.setListaMascara(listaTemasSeleccionados(listaMascara));
                defProcVO.setListaObligatorio(listaTemasSeleccionados(listaObligatorio));
                defProcVO.setListaOrden(listaTemasSeleccionados(listaOrden));
                defProcVO.setListaRotulo(listaTemasSeleccionados(listaRotulo));
                defProcVO.setListaActivos(listaTemasSeleccionados(listaActivos));
                defProcVO.setListaOcultos(listaTemasSeleccionados(listaOcultos));
                defProcVO.setListaBloqueados(listaTemasSeleccionados(listaBloqueados));
                defProcVO.setListaPlazoFecha(listaTemasSeleccionados(listaPlazoFecha));
                defProcVO.setListaCheckPlazoFecha(listaTemasSeleccionados(listaCheckPlazoFecha));
                defProcVO.setListaValidacion(listaTemasSeleccionados(listaValidacion));
                defProcVO.setListaOperacion(listaTemasSeleccionados(listaOperacion));
                defProcVO.setListaAgrupacionesCampo(listaTemasSeleccionados(listaAgrupacionesCampos));
                defProcVO.setListaPosicionesX(listaTemasSeleccionados(listaPosicionesX));
                defProcVO.setListaPosicionesY(listaTemasSeleccionados(listaPosicionesY));
                
                //Recuperamos las listas de las agrupaciones de campos
                String listaCodAgrupaciones = request.getParameter("listaCodAgrupaciones");
                String listaDescAgrupaciones = request.getParameter("listaDescAgrupaciones");
                String listaOrdenAgrupaciones = request.getParameter("listaOrdenAgrupaciones");
                String listaAgrupacionesActivas = request.getParameter("listaAgrupacionesActivas");
                defProcVO.setListaCodAgrupaciones(listaTemasSeleccionados(listaCodAgrupaciones));
                defProcVO.setListaDescAgrupaciones(listaTemasSeleccionados(listaDescAgrupaciones));
                defProcVO.setListaOrdenAgrupaciones(listaTemasSeleccionados(listaOrdenAgrupaciones));
                defProcVO.setListaAgrupacionesActivas(listaTemasSeleccionados(listaAgrupacionesActivas));

                // Recuperar listas de la pestaña de Enlaces
                String listaCodEnlaces = request.getParameter("listaCodEnlaces");
                String listaDescEnlaces = request.getParameter("listaDescEnlaces");
                String listaUrlEnlaces = request.getParameter("listaUrlEnlaces");
                String listaEstadoEnlaces = request.getParameter("listaEstadoEnlaces");
                defProcVO.setListaCodEnlaces(listaTemasSeleccionados(listaCodEnlaces));
                defProcVO.setListaDescEnlaces(listaTemasSeleccionados(listaDescEnlaces));
                defProcVO.setListaUrlEnlaces(listaTemasSeleccionados(listaUrlEnlaces));
                defProcVO.setListaEstadoEnlaces(listaTemasSeleccionados(listaEstadoEnlaces));
                // Recuperar listas de la pestaña de Roles
                String listaCodRoles = request.getParameter("listaCodRol");
                String listaDescRoles = request.getParameter("listaDescRol");
                String listaPorDefecto = request.getParameter("listaPorDefecto");
                String listaConsultaWebRol = request.getParameter("listaConsultaWebRol");
                defProcVO.setListaCodRoles(listaTemasSeleccionados(listaCodRoles));
                defProcVO.setListaDescRoles(listaTemasSeleccionados(listaDescRoles));
                defProcVO.setListaPorDefecto(listaTemasSeleccionados(listaPorDefecto));
                defProcVO.setListaConsultaWebRol(listaTemasSeleccionados(listaConsultaWebRol));
                // Recuperar listas de unidades de inicio.
                String listaCodUnidadesInicio = request.getParameter("listaCodUnidadesInicio");
                String listaDescUnidadesInicio = request.getParameter("listaDescUnidadesInicio");
                defProcVO.setListaCodUnidadInicio(listaTemasSeleccionados(listaCodUnidadesInicio));
                defProcVO.setListaDescUnidadInicio(listaTemasSeleccionados(listaDescUnidadesInicio));
                m_Log.debug("LISTA_COD_UI " + listaCodUnidadesInicio);
                m_Log.debug("LISTA_DESC_UI " + listaDescUnidadesInicio);

                String listaCodigosCamposPendientes = request.getParameter("listaCodigosCamposPendientes");
                String listaNombresCamposPendientes = request.getParameter("listaNombresCamposPendientes");
                String listaTamanhoCamposPendientes = request.getParameter("listaTamanhoCamposPendientes");
                String listaOrdenCamposPendientes = request.getParameter("listaOrdenCamposPendientes");
                String listaCampoSupCamposPendientes = request.getParameter("listaCampoSupCamposPendientes");

                m_Log.debug("LISTA_CODIGOS_CAMPOS_PENDIENTES: " + listaCodigosCamposPendientes);
                m_Log.debug("LISTA_NOMBRES_CAMPOS_PENDIENTES: " + listaNombresCamposPendientes);
                m_Log.debug("LISTA_TAMAÑO_CAMPOS_PENDIENTES: " + listaTamanhoCamposPendientes);
                m_Log.debug("LISTA_ORDEN_CAMPOS_PENDIENTES: " + listaOrdenCamposPendientes);
                m_Log.debug("LISTA_CAMPOS_SUP_CAMPOS_PENDIENTES: " + listaCampoSupCamposPendientes);

                Vector codigosCamposPendientes = listaTemasSeleccionados(listaCodigosCamposPendientes);
                Vector nombresCamposPendientes = listaTemasSeleccionados(listaNombresCamposPendientes);
                Vector tamanhoCamposPendientes = listaTemasSeleccionados(listaTamanhoCamposPendientes);
                Vector ordenCamposPendientes = listaTemasSeleccionados(listaOrdenCamposPendientes);
                Vector campoSupCamposPendientes = listaTemasSeleccionados(listaCampoSupCamposPendientes);

                defProcVO.setColeccionCodigosCamposPendientes(codigosCamposPendientes);
                defProcVO.setColeccionNombresCamposPendientes(nombresCamposPendientes);
                defProcVO.setColeccionTamanhoCamposPendientes(tamanhoCamposPendientes);
                defProcVO.setColeccionOrdenCamposPendientes(ordenCamposPendientes);
                defProcVO.setColeccionCampoSupCamposPendientes(campoSupCamposPendientes);

                String plazo = request.getParameter("plazo");
                String tipoPlazo = request.getParameter("tipoPlazo");
                String porcentaje = request.getParameter("porcentaje");

                defProcVO.setPlazo(plazo);
                defProcVO.setTipoPlazo(tipoPlazo);
                if (porcentaje != null && Utilidades.isInteger(porcentaje)) {
                    defProcVO.setPorcentaje(porcentaje);
                } else {
                    defProcVO.setPorcentaje(null);
                }


                String disponible = request.getParameter("disponible");
                if (disponible == null) {
                    defProcVO.setDisponible("0");
                } else {
                    defProcVO.setDisponible("1");
                }
                String tramitacionInternet = request.getParameter("tramitacionInternet");
                if (tramitacionInternet == null) {
                    defProcVO.setTramitacionInternet("0");
                } else {
                    defProcVO.setTramitacionInternet("1");
                }
                
                String InteresadoOblig = request.getParameter("interesadoOblig");
                if (InteresadoOblig == null) {
                    defProcVO.setInteresadoOblig("0");
                } else {
                    defProcVO.setInteresadoOblig("1");
                }
                String ClaseBuzonHistorico = request.getParameter("claseBuzonEntradaHistorico");
                defProcVO.setClaseBuzonEntradaHistorico(ClaseBuzonHistorico);
                
                //Mai: Recollemos o valor do parametro soloWS, que indica se o procedemento solo se pode
                //iniciar por WebService
                  String soloWS = request.getParameter("soloWS");
                  m_Log.debug("DefinicionProcedimientosAction. Modificar. Procedimiento: soloWS: "+ soloWS);

                  if (soloWS== null){
                        defProcVO.setSoloWS("0");
                    } else {
                        if(!"".equals(soloWS.trim())){
                            defProcVO.setSoloWS("1");
                        }else{ 
                            defProcVO.setSoloWS("0");
                        }
                    }
                
                String codServicioFinalizacion = request.getParameter("codServicioFinalizacion");
                String descServicioFinalizacion = request.getParameter("descServicioFinalizacion");
                String implClassServicioFinalizacion = request.getParameter("implClassServicioFinalizacion");
                
                if(StringOperations.stringNoNuloNoVacio(codServicioFinalizacion) && StringOperations.stringNoNuloNoVacio(descServicioFinalizacion)
                        && StringOperations.stringNoNuloNoVacio(implClassServicioFinalizacion)){
                    
                    defProcVO.setCodServicioFinalizacion(codServicioFinalizacion);
                    defProcVO.setDescServicioFinalizacion(descServicioFinalizacion);
                    defProcVO.setImplClassServicioFinalizacion(implClassServicioFinalizacion);
                }
                                
                m_Log.debug(" ******* codigo servicio finalizacion: " + codServicioFinalizacion);
                m_Log.debug(" ******* desc servicio finalizacion: " + descServicioFinalizacion);
                m_Log.debug(" ******* implClassServicioFinalizacion finalizacion: " + implClassServicioFinalizacion);
                
                defProcVO.setTxtDescripcion(limpiarCadena(defProcVO.getTxtDescripcion()));
                defProcVO.setDescripcionBreve(limpiarCadena(defProcVO.getDescripcionBreve()));
                int i = DefinicionProcedimientosManager.getInstance().modificar(defProcVO, params);

                if (i > 0) {
                    opcion = "modificacionRealizada";
                } else {
                    opcion = "modificacionNoRealizada";
                }
            } else if (opcion.equals("eliminar")) {
                defProcVO = defProcForm.getDefinicionProcedimientos();
                String codMunicipio = defProcVO.getCodMunicipio();
                String codigo = defProcVO.getTxtCodigo();
                int i = 0;
                i = DefinicionProcedimientosManager.getInstance().eliminar(defProcVO, params);
                if (i > 0) {
                    opcion = "eliminado";
                } else if (i == -2) {
                    opcion = "noPuedeEliminar";
                } else {
                    opcion = "noEliminado";
                }
            } else if (opcion.equals("envioDeTramite")) {
                String codMunicipio = request.getParameter("codMunicipio");
                String txtCodigo = request.getParameter("txtCodigo");
                String importar = request.getParameter("importar");
                String codAplicacion = request.getParameter("codAplicacion");
                String deCatalogo = request.getParameter("deCatalogo");
                defProcVO.setCodMunicipio(codMunicipio);
                defProcVO.setTxtCodigo(txtCodigo);
                defProcVO.setImportar(importar);
                defProcVO.setCodAplicacion(codAplicacion);
                defProcVO.setDeCatalogo(deCatalogo);
                // Cargar listas.
                defProcVO.setListaTiposProcedimientos(DefinicionProcedimientosManager.getInstance().getListaTiposProcedimientos(params));
                defProcVO.setListaArea(DefinicionProcedimientosManager.getInstance().getListaArea(params));

                if ("si".equalsIgnoreCase(defProcVO.getImportar())) {
                    defProcVO.setCodMunicipio(codMunicipio);
                    String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(defProcVO, params);
                    paramsDiputacion[0] = params[0]; // "oracle";
                    paramsDiputacion[6] = jndi;
                    defProcVO = DefinicionProcedimientosManager.getInstance().buscar(defProcVO, paramsDiputacion);
                } else {
                    defProcVO = DefinicionProcedimientosManager.getInstance().buscar(defProcVO, params);
                }
                defProcForm.setDefinicionProcedimientos(defProcVO);

                String deTramite = "deTramite";
                session.setAttribute("deTramite", deTramite);

                                
                if (!"0".equals(codMunicipio) && ("SI".equalsIgnoreCase(importar))) {
                    // Se está importando un procedimiento de un entorno de real/producción a un entorno de pruebas
                    request.setAttribute("codMunicipioProcImportar", codMunicipio);
                    request.setAttribute("codAplicacionProcImportar", Integer.toString(ConstantesDatos.APP_GESTION_EXPEDIENTES));
                    request.setAttribute("importarProcConEleccion", "SI");
                }
                opcion = "inicio";
            } else if (opcion.equals("deCatalogo")) {
                String codMunicipio = request.getParameter("codMun");
                String txtCodigo = request.getParameter("codProc");
                defProcVO.setCodMunicipio(codMunicipio);
                defProcVO.setTxtCodigo(txtCodigo);
                defProcVO.setDeCatalogo("si");
                // Cargar listas.
                defProcVO.setListaTiposProcedimientos(DefinicionProcedimientosManager.getInstance().getListaTiposProcedimientos(params));
                defProcVO.setListaArea(DefinicionProcedimientosManager.getInstance().getListaArea(params));

                defProcVO = DefinicionProcedimientosManager.getInstance().buscar(defProcVO, params);
                defProcForm.setDefinicionProcedimientos(defProcVO);

                String deTramite = "deTramite";
                session.setAttribute("deTramite", deTramite);

                opcion = "inicio";
            } else if (opcion.equals("catalogoProcedimientos")) {

                Vector catalogo = new Vector();
                defProcVO = new DefinicionProcedimientosValueObject();
                try {
                    catalogo = DefinicionProcedimientosManager.getInstance().catalogoProcedimientos(defProcVO, params);
                } catch (TramitacionException te) {
                    catalogo = new Vector();
                }
                session.setAttribute("CatalogoProcedimientos", catalogo);
                session.setAttribute("CatalogoValueObject", defProcVO);
                opcion = "catalogoProcedimientos";

            } else if (opcion.equals("catalogoProcedimientosTramites")) {

                Vector tramites = new Vector();

                defProcVO = (DefinicionProcedimientosValueObject) session.getAttribute("CatalogoValueObject");
                defProcVO.setCodMunicipio((String) request.getParameter("codMunicipio"));
                defProcVO.setTxtCodigo((String) request.getParameter("txtCodigo"));
                try {
                    tramites = DefinicionProcedimientosManager.getInstance().catalogoProcedimientosTramites(defProcVO, params);
                } catch (TramitacionException te) {
                    tramites = new Vector();
                    te.printStackTrace();
                }
                defProcVO.setTramites(tramites);
                session.setAttribute("CatalogoValueObject", defProcVO);
                opcion = "catalogoProcedimientosTramites";
            } else if (opcion.equals("listaUnidadesInicio")) {
                String codMunicipio = request.getParameter("codMun");
                String codProcedimiento = request.getParameter("codProc");
                String soloConsulta = request.getParameter("nCS");
                // #265897: no se acepta una url de tanta longitud, las listas se tratan en la jsp	
                /* ORIGINAL
                String listaCodUnidadesInicio = request.getParameter("eje");
                String listaDescUnidadesInicio = request.getParameter("num");
                String listaCodVisibleUnidadesInicio = request.getParameter("codTram");
  
                Vector listaCodUI = listaTemasSeleccionados(listaCodUnidadesInicio);
                Vector listaCodVisibleUI = listaTemasSeleccionados(listaCodVisibleUnidadesInicio);
                Vector listaDescUI = listaTemasSeleccionados(listaDescUnidadesInicio);
                */
                defProcVO.setCodMunicipio(codMunicipio);
                defProcVO.setTxtCodigo(codProcedimiento);

                //}
                session.setAttribute("soloConsulta", soloConsulta);

                // seleccionar el jndi para el esquema apropiado
                String jndi = UsuariosGruposManager.getInstance().obtenerJNDI(String.valueOf(usuario.getEntCod()), String.valueOf(usuario.getOrgCod()), String.valueOf(usuario.getAppCod()), params);
                String[] paramsNuevos = new String[7];
                paramsNuevos[0] = params[0];
                paramsNuevos[6] = jndi;

                Vector nuevasUOR = UORsManager.getInstance().getListaUORs(false,paramsNuevos);
                m_Log.debug("Cargadas " + nuevasUOR.size() + " UORs");
                defProcVO.setListaUnidadInicio(nuevasUOR);
                
                 // #256196: para no perder el valor de la fecha vencimiento desde en el formulario	
                DefinicionProcedimientosValueObject defProcVOAnt = defProcForm.getDefinicionProcedimientos();
                defProcVO.setFechaLimiteDesde(defProcVOAnt.getFechaLimiteDesde());
                defProcVO.setFechaLimiteHasta(defProcVOAnt.getFechaLimiteHasta());

                defProcForm.setDefinicionProcedimientos(defProcVO);
                opcion = "listaUnidadesInicio";
            } else if (opcion.equals("imprimirProcedimiento")) {
                String codMunicipio = request.getParameter("codMunicipio");
                String codProcedimiento = request.getParameter("txtCodigo");
                String idioma=Integer.toString(usuario.getIdioma());
                String claveIdioma=InformesManager.getInstance().getClaveIdioma(params,idioma);	
                m_Log.debug("********* Idioma "+idioma+" *********************************");
                m_Log.debug("********* claveIdioma "+claveIdioma+" *********************************");
                defProcVO.setCodMunicipio(codMunicipio);
                defProcVO.setTxtCodigo(codProcedimiento);
                defProcVO = DefinicionProcedimientosManager.getInstance().buscar(defProcVO, params);
                // Si es una baja multiple aparecen todos en la misma hoja.
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("baseDir", m_Conf.getString("PDF.base_dir"));
                // PDFS NUEVA SITUACION
                gVO.setAtributo("aplPathReal", this.getServlet().getServletContext().getRealPath(""));
                // FIN PDFS NUEVA SITUACION
                gVO.setAtributo("usuDir", usuario.getDtr());
                gVO.setAtributo("pdfFile", "SGE");
                String protocolo = StrutsUtilOperations.getProtocol(request);
                m_Log.debug("PROTOCOLO en uso :" + protocolo);
                gVO.setAtributo("estilo", "css/verProcedimiento.css");
                Vector ficheros = new Vector();
                GeneralPDF pdf = new GeneralPDF(params, gVO);
                String plantilla = "verProcedimiento_"+claveIdioma;
                String textoXML = crearXML(defProcVO, params);
                pdf = new GeneralPDF(params, gVO);
                ficheros.add(pdf.transformaXML(textoXML, plantilla));
                request.setAttribute("nombre", pdf.getPdf(ficheros));

            } else if (opcion.equals("duplicar")) {
                int j = 0;
                int i = 0;
                try {
                    abd = new AdaptadorSQLBD(params);
                    conexion = abd.getConnection();
                    abd.inicioTransaccion(conexion);
                    defProcVO = defProcForm.getDefinicionProcedimientos();
                    String nuevoCodProcedimiento = request.getParameter("nuevoCodProcedimiento");
                    String codProcedimiento = defProcVO.getTxtCodigo();
                    // Recuperar listas de la pestaña de documentos
                    ArrayList<FirmasDocumentoProcedimientoVO> listaFirmasVO = new ArrayList<FirmasDocumentoProcedimientoVO>();
                    listaFirmasVO = FirmasDocumentoProcedimientoManager.getInstance().getTodasFirmasDocumentoPorProcedimiento(defProcVO.getCodMunicipio(), codProcedimiento, params);
                    defProcVO.setFirmasDocumentosProcedimiento(listaFirmasVO);
                    defProcVO.setTxtCodigo(nuevoCodProcedimiento);
                    String listaNombresDoc = request.getParameter("listaNombresDoc");
                    String listaCondicionDoc = request.getParameter("listaCondicionDoc");
                    String listaCodigosDoc = request.getParameter("listaCodigosDoc");
                    defProcVO.setListaNombresDoc(listaTemasSeleccionados(listaNombresDoc));
                    defProcVO.setListaCondicionDoc(listaTemasSeleccionados(listaCondicionDoc));
                    defProcVO.setListaCodigosDoc(listaTemasSeleccionados(listaCodigosDoc));
                    // Recuperar listas de la pestaña de Campos
                    String listaCodCampos = request.getParameter("listaCodCampos");
                    String listaDescCampos = request.getParameter("listaDescCampos");
                    String listaCodPlantilla = request.getParameter("listaCodPlantilla");
                    String listaCodTipoDato = request.getParameter("listaCodTipoDato");
                    String listaTamano = request.getParameter("listaTamano");
                    String listaMascara = request.getParameter("listaMascara");
                    String listaObligatorio = request.getParameter("listaObligatorio");
                    String listaOrden = request.getParameter("listaOrden");
                    String listaRotulo = request.getParameter("listaRotulo");
                    String listaActivos = request.getParameter("listaActivos");
                    String listaOcultos = request.getParameter("listaOcultos");
                    String listaBloqueados = request.getParameter("listaBloqueados");
                    String listaPlazoFecha = request.getParameter("listaPlazoFecha");
                    String listaCheckPlazoFecha = request.getParameter("listaCheckPlazoFecha");
                    String listaValidacion = request.getParameter("listaValidacion");
                    String listaOperacion = request.getParameter("listaOperacion");
                    String listaAgrupacionesCampos = request.getParameter("listaAgrupacionesCampos");
                    String listaPosicionesX = request.getParameter("listaPosicionesX");
                    String listaPosicionesY = request.getParameter("listaPosicionesY");
                    defProcVO.setListaCodCampos(listaTemasSeleccionados(listaCodCampos));
                    defProcVO.setListaDescCampos(listaTemasSeleccionados(listaDescCampos));
                    defProcVO.setListaCodPlantilla(listaTemasSeleccionados(listaCodPlantilla));
                    defProcVO.setListaCodTipoDato(listaTemasSeleccionados(listaCodTipoDato));
                    defProcVO.setListaTamano(listaTemasSeleccionados(listaTamano));
                    defProcVO.setListaMascara(listaTemasSeleccionados(listaMascara));
                    defProcVO.setListaObligatorio(listaTemasSeleccionados(listaObligatorio));
                    defProcVO.setListaOrden(listaTemasSeleccionados(listaOrden));
                    defProcVO.setListaRotulo(listaTemasSeleccionados(listaRotulo));
                    defProcVO.setListaActivos(listaTemasSeleccionados(listaActivos));
                    defProcVO.setListaOcultos(listaTemasSeleccionados(listaOcultos));
                    defProcVO.setListaBloqueados(listaTemasSeleccionados(listaBloqueados));
                    defProcVO.setListaPlazoFecha(listaTemasSeleccionados(listaPlazoFecha));
                    defProcVO.setListaCheckPlazoFecha(listaTemasSeleccionados(listaCheckPlazoFecha));
                    defProcVO.setListaValidacion(listaTemasSeleccionados(listaValidacion));
                    defProcVO.setListaOperacion(listaTemasSeleccionados(listaOperacion));
                    defProcVO.setListaAgrupacionesCampo(listaTemasSeleccionados(listaAgrupacionesCampos));
                    defProcVO.setListaPosicionesX(listaTemasSeleccionados(listaPosicionesX));
                    defProcVO.setListaPosicionesY(listaTemasSeleccionados(listaPosicionesY));
                    
                    //Recuperamos las listas de las agrupaciones de campos
                    String listaCodAgrupaciones = request.getParameter("listaCodAgrupaciones");
                    String listaDescAgrupaciones = request.getParameter("listaDescAgrupaciones");
                    String listaOrdenAgrupaciones = request.getParameter("listaOrdenAgrupaciones");
                    String listaAgrupacionesActivas = request.getParameter("listaAgrupacionesActivas");
                    defProcVO.setListaCodAgrupaciones(listaTemasSeleccionados(listaCodAgrupaciones));
                    defProcVO.setListaDescAgrupaciones(listaTemasSeleccionados(listaDescAgrupaciones));
                    defProcVO.setListaOrdenAgrupaciones(listaTemasSeleccionados(listaOrdenAgrupaciones));
                    defProcVO.setListaAgrupacionesActivas(listaTemasSeleccionados(listaAgrupacionesActivas));
                    // Recuperar listas de la pestaña de Enlaces
                    String listaCodEnlaces = request.getParameter("listaCodEnlaces");
                    String listaDescEnlaces = request.getParameter("listaDescEnlaces");
                    String listaUrlEnlaces = request.getParameter("listaUrlEnlaces");
                    String listaEstadoEnlaces = request.getParameter("listaEstadoEnlaces");
                    defProcVO.setListaCodEnlaces(listaTemasSeleccionados(listaCodEnlaces));
                    defProcVO.setListaDescEnlaces(listaTemasSeleccionados(listaDescEnlaces));
                    defProcVO.setListaUrlEnlaces(listaTemasSeleccionados(listaUrlEnlaces));
                    defProcVO.setListaEstadoEnlaces(listaTemasSeleccionados(listaEstadoEnlaces));
                    // Recuperar listas de la pestaña de Roles
                    String listaCodRoles = request.getParameter("listaCodRol");
                    String listaDescRoles = request.getParameter("listaDescRol");
                    String listaPorDefecto = request.getParameter("listaPorDefecto");
                    String listaConsultaWebRol = request.getParameter("listaConsultaWebRol");
                    defProcVO.setListaCodRoles(listaTemasSeleccionados(listaCodRoles));
                    defProcVO.setListaDescRoles(listaTemasSeleccionados(listaDescRoles));
                    defProcVO.setListaPorDefecto(listaTemasSeleccionados(listaPorDefecto));
                    defProcVO.setListaConsultaWebRol(listaTemasSeleccionados(listaConsultaWebRol));
                    // Recuperar listas de unidades de inicio.
                    String listaCodUnidadesInicio = request.getParameter("listaCodUnidadesInicio");
                    String listaDescUnidadesInicio = request.getParameter("listaDescUnidadesInicio");
                    defProcVO.setListaCodUnidadInicio(listaTemasSeleccionados(listaCodUnidadesInicio));
                    defProcVO.setListaDescUnidadInicio(listaTemasSeleccionados(listaDescUnidadesInicio));

                    String disponible = request.getParameter("disponible");
                    if (disponible == null) {
                        defProcVO.setDisponible("0");
                    } else {
                        defProcVO.setDisponible("1");
                    }
                    String tramitacionInternet = request.getParameter("tramitacionInternet");
                    if (tramitacionInternet == null) {
                        defProcVO.setTramitacionInternet("0");
                    } else {
                        defProcVO.setTramitacionInternet("1");
                    }
                    String InteresadoOblig = request.getParameter("interesadoOblig");
                    if (InteresadoOblig == null) {
                        defProcVO.setInteresadoOblig("0");
                    } else {
                        defProcVO.setInteresadoOblig("1");
                    }
                    String ClaseBuzonHistorico = request.getParameter("claseBuzonEntradaHistorico");
                    defProcVO.setClaseBuzonEntradaHistorico(ClaseBuzonHistorico);

                    //Mai: Recollemos o valor do parametro soloWS, que indica se o procedemento solo se pode
                    //iniciar por WebService
                    String soloWS = request.getParameter("soloWS");
                    m_Log.debug("DefinicionProcedimientosAction. Duplicar. Procedimiento: soloWS: "+ soloWS);
                    
                   if (soloWS== null){
                        defProcVO.setSoloWS("0");
                    } else {
                        if(!"".equals(soloWS.trim())){
                            defProcVO.setSoloWS("1");
                        }else{ 
                            defProcVO.setSoloWS("0");
                        }
                    }
                    
                    i = DefinicionProcedimientosManager.getInstance().insert(conexion, defProcVO, params);
                    if (i > 0) {

                        DefinicionTramitesValueObject defTramVO = new DefinicionTramitesValueObject();
                        defTramVO.setCodMunicipio(defProcVO.getCodMunicipio());
                        defTramVO.setTxtCodigo(codProcedimiento);
                        defTramVO = DefinicionTramitesManager.getInstance().getTramiteImportar(defTramVO, params);
                        defTramVO.setTxtCodigo(nuevoCodProcedimiento);
                        j = DefinicionTramitesManager.getInstance().insertImportar(conexion, defTramVO, params);
                    }
                } catch (Exception e) {
                    try {
                        abd.rollBack(conexion);
                        conexion.setAutoCommit(true);
                        e.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + e.getMessage());
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + ex.getMessage());
                        }
                    }
                } finally {
                    if (i > 0 && j > 0) {
                        try {
                            opcion = "duplicacionRealizada";
                            abd.finTransaccion(conexion);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    } else if (i < 0 || j < 0) {
                        try {
                            opcion = "yaExiste";
                            abd.rollBack(conexion);
                            conexion.setAutoCommit(true);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    } else {
                        try {
                            opcion = "altaNoRealizadaDuplicar";
                            abd.rollBack(conexion);
                            conexion.setAutoCommit(true);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    }
                    try {
                        abd.devolverConexion(conexion);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + ex.getMessage());
                        }
                    }
                }
            } else if (opcion.equals("comprobarEliminarDoc")) {
                try {
                    String strCodOrganizacion = request.getParameter("codOrganizacion");
                    int codOrganizacion = Integer.parseInt(strCodOrganizacion);
                    String codProcedimiento = request.getParameter("procedimiento");
                    String strNumDocumento = request.getParameter("numDocumento");
                    int numDocumento = Integer.parseInt(strNumDocumento);
                    boolean existe = FichaExpedienteManager.getInstance().existeExpedienteConDocumento(params, codOrganizacion, codProcedimiento, numDocumento);
                    request.setAttribute("existeDocumento", existe);
                } catch (Exception e) {
                    request.setAttribute("error", e.getMessage());
                }
            } else if (opcion.equals(OPCION_IMPORTAR_CON_ELECCION_ORGANIZACION)) {

                // SE IMPORTA UN PROCEDIMIENTO DE UN ENTORNO REAL/PRODUCCIÓN AL ENTORNO DE PRUEBAS. SE DEBE TENER EN CUENTA QUE
                // PUEDE EXISTIR MÁS DE UN ENTORNO U ORGANIZACIÓN PARA PRODUCCIÓN.
                Vector importa;

                String sCodMunicipioPruebas = request.getParameter("codMunicipio");
                int codMunicipioPruebas = 0;
                if (sCodMunicipioPruebas != null && Utilidades.isInteger(sCodMunicipioPruebas)) {
                    codMunicipioPruebas = Integer.parseInt(sCodMunicipioPruebas);
                }

                ArrayList<OrganizacionVO> orgs = new ArrayList<OrganizacionVO>();
                int codOrganizacionImportar = 0;
                orgs = OrganizacionesManager.getInstance().getOrganizacionDistintasDe(codMunicipioPruebas, params);
                if (orgs != null && orgs.size() == 1) {
                    codOrganizacionImportar = orgs.get(0).getCodOrganizacion();
                } else {
                    // DESDE EL ENTORNO DE PRUEBAS: Hay varias organizaciones, entonces se pasa al control a una jsp en la que el usuario decide de que organización se va a importar un procedimiento
                    request.setAttribute("organizacionesImportacion", orgs);
                    // Se redirige el control a la jsp para que el usuario seleccione el entorno de producción del que importar un procedimiento
                    return mapping.findForward("listado_organizaciones_importacion");
                }

                DefinicionProcedimientosValueObject defProc = new DefinicionProcedimientosValueObject();
                defProc.setCodMunicipio(Integer.toString(codOrganizacionImportar));
                defProc.setCodAplicacion("4");
                // Se recupera el nombre del recurso JNDI, para recuperar los datos de conexión al esquema de base de datos de la organización de la que se importará
                // alguno de sus procedimientos al entorno de pruebas.
                String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(defProc, params);
                paramsDiputacion[0] = params[0];
                paramsDiputacion[6] = jndi;
                importa = DefinicionProcedimientosManager.getInstance().consultar(defProc, paramsDiputacion);
                m_Log.debug(" =========> Número de procedimientos recuperados " + importa.size());
                session.setAttribute("RelacionProcedimientos", importa);
                defProcForm.setDefinicionProcedimientos(defProc);
                opcion = "consultarListadoProcRealImportacion";

            }
            if (opcion.equals("importarDesdeOrganizacion")) {
                // SE IMPORTA AL ENTORNO DE PRUEBAS UN PROCEDIMIENTO DE UN DETERMINADO ENTORNO REAL/PRODUCCIÓN

                // Se recupera el código de la organización seleccionada por el usuario para mostrar los procedimientos de dicha organizacion/entorno
                String sCodOrganizacionImportar = request.getParameter("codMunicipio");
                int codOrganizacionImportar = Integer.parseInt(sCodOrganizacionImportar);

                DefinicionProcedimientosValueObject defProc = new DefinicionProcedimientosValueObject();
                defProc.setCodMunicipio(Integer.toString(codOrganizacionImportar));
                defProc.setCodAplicacion("4");

                // Se recupera el nombre del recurso JNDI, para recuperar los datos de conexión al esquema de base de datos de la organización de la que se importará
                // alguno de sus procedimientos al entorno de pruebas.
                String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(defProc, params);
                paramsDiputacion[0] = params[0];
                paramsDiputacion[6] = jndi;
                Vector importa = DefinicionProcedimientosManager.getInstance().consultar(defProc, paramsDiputacion);
                m_Log.debug(" =========> Número de procedimientos recuperados " + importa.size());
                session.setAttribute("RelacionProcedimientos", importa);
                defProcForm.setDefinicionProcedimientos(defProc);
                defProcForm.setImportar(request.getParameter("importar"));
                opcion = "consultarListadoProcRealImportacion";
            } else if ("recargaConsultaProcReal".equals(opcion)) {
                // Se carga la pantalla de definición de un procedimiento de un entorno de producción => Por tanto habrá que recuperar su JNDI correspondiente
                defProcVO.setTxtCodigo(request.getParameter("codProcedimiento"));
                defProcVO.setCodMunicipio(request.getParameter("codMunicipio"));
                defProcVO.setImportar("si");
                defProcVO.setCodAplicacion(Integer.toString(ConstantesDatos.APP_GESTION_EXPEDIENTES)); // Se indica el código de la aplicacion

                // Se recupera el nombre del recurso JNDI, para recuperar los datos de conexión al esquema de base de datos de la organización de la que se importará
                // alguno de sus procedimientos al entorno de pruebas.

                String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(defProcVO, params);
                paramsDiputacion[0] = params[0];
                paramsDiputacion[6] = jndi;

                defProcVO.setListaTiposProcedimientos(DefinicionProcedimientosManager.getInstance().getListaTiposProcedimientos(paramsDiputacion));
                defProcVO.setListaArea(DefinicionProcedimientosManager.getInstance().getListaArea(paramsDiputacion));

                defProcVO = DefinicionProcedimientosManager.getInstance().getPlazosFinalizacion(defProcVO, paramsDiputacion);

                defProcForm.setDefinicionProcedimientos(defProcVO);
                session.setAttribute("modoInicio", "recargar_buscada");

                request.setAttribute("codMunicipioProcImportar", request.getParameter("codMunicipio"));
                request.setAttribute("codAplicacionProcImportar", Integer.toString(ConstantesDatos.APP_GESTION_EXPEDIENTES));
                request.setAttribute("importarProcConEleccion", "SI");
                opcion = "inicio";
            } else if ("determinar_procedimiento_real_importacion".equals(opcion)) {
                // SE IMPORTA UN PROCEDIMIENTO DE REAL A PRUEBAS

                // Código del municipio del entorno de real del que se importa un procedimiento
                String codMunicipio = request.getParameter("codMunicipio");
                defProcVO = defProcForm.getDefinicionProcedimientos();
                defProcVO.setCodMunicipio(codMunicipio);
                defProcForm.setDefinicionProcedimientos(defProcVO);
                if (session.getAttribute("RelacionProcedimientos") == null) {
                    Vector procedimientos = new Vector();
                    procedimientos.add(defProcVO);
                    session.setAttribute("RelacionProcedimientos", procedimientos);
                }
                opcion = "determinar_procedimiento_real_importacion";
            } else if (opcion.equals("buscar_procedimiento_real_importar")) {
                String codMunicipio = request.getParameter("codMunicipio");
                String codigo = request.getParameter("txtCodigo");

                defProcVO.setCodMunicipio(codMunicipio);
                defProcVO.setTxtCodigo(codigo);
                defProcVO.setCodAplicacion(Integer.toString(ConstantesDatos.APP_GESTION_EXPEDIENTES));
                defProcVO = defProcForm.getDefinicionProcedimientos();
                String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(defProcVO, params);
                paramsDiputacion[0] = params[0];
                paramsDiputacion[6] = jndi;
                defProcVO = DefinicionProcedimientosManager.getInstance().buscar(defProcVO, paramsDiputacion);

                if (defProcVO.getNoEncontrado() != 0) {
                    defProcForm.setDefinicionProcedimientos(defProcVO);
                    opcion = "buscar";
                } else {
                    opcion = "noEncontrado";
                }
            } else if (opcion.equals(OPCION_DESCARGAR_CON_ELECCION_ORGANIZACION)) {
                int j = 0;
                int i = 0;
                try {
                    abd = new AdaptadorSQLBD(params);
                    conexion = abd.getConnection();
                    abd.inicioTransaccion(conexion);
                    defProcVO = defProcForm.getDefinicionProcedimientos();
                    String codMunicipioImportacion = defProcVO.getCodMunicipio();
                    /***  El código del municipio es el del usuario ***/
                    m_Log.debug(" ***************** DESCARGAR CÓDIGO MUNICIPIO DE LA DEFINICIÓN DEL PROCEDIMIENTO: " + defProcVO.getCodMunicipio());
                    m_Log.debug(" ***************** DESCARGAR CÓDIGO MUNICIPIO DEL USUARIO: " + usuario.getOrgCod());
                    String codMunicipioUsuario = Integer.toString(usuario.getOrgCod());
                    defProcVO.setCodMunicipio(codMunicipioUsuario);
                    defProcForm.setDefinicionProcedimientos(defProcVO);

                    DefinicionTramitesValueObject defTramVO = new DefinicionTramitesValueObject();
                    DefinicionProcedimientosValueObject dPVO = new DefinicionProcedimientosValueObject();
                    // Recuperar listas de la pestaña de documentos
                    String listaNombresDoc = request.getParameter("listaNombresDoc");
                    String listaCondicionDoc = request.getParameter("listaCondicionDoc");
                    String listaCodigosDoc = request.getParameter("listaCodigosDoc");
                    defProcVO.setListaNombresDoc(listaTemasSeleccionados(listaNombresDoc));
                    defProcVO.setListaCondicionDoc(listaTemasSeleccionados(listaCondicionDoc));
                    defProcVO.setListaCodigosDoc(listaTemasSeleccionados(listaCodigosDoc));
                    // Recuperar listas de la pestaña de Campos
                    String listaCodCampos = request.getParameter("listaCodCampos");
                    String listaDescCampos = request.getParameter("listaDescCampos");
                    String listaCodPlantilla = request.getParameter("listaCodPlantilla");
                    String listaCodTipoDato = request.getParameter("listaCodTipoDato");
                    String listaTamano = request.getParameter("listaTamano");
                    String listaMascara = request.getParameter("listaMascara");
                    String listaObligatorio = request.getParameter("listaObligatorio");
                    String listaOrden = request.getParameter("listaOrden");
                    String listaRotulo = request.getParameter("listaRotulo");
                    String listaActivos = request.getParameter("listaActivos");
                    String listaOcultos = request.getParameter("listaOcultos");
                    String listaBloqueados = request.getParameter("listaBloqueados");
                    String listaValidacion = request.getParameter("listaValidacion");
                    String listaOperacion = request.getParameter("listaOperacion");
                    defProcVO.setListaCodCampos(listaTemasSeleccionados(listaCodCampos));
                    defProcVO.setListaDescCampos(listaTemasSeleccionados(listaDescCampos));
                    defProcVO.setListaCodPlantilla(listaTemasSeleccionados(listaCodPlantilla));
                    defProcVO.setListaCodTipoDato(listaTemasSeleccionados(listaCodTipoDato));
                    defProcVO.setListaTamano(listaTemasSeleccionados(listaTamano));
                    defProcVO.setListaMascara(listaTemasSeleccionados(listaMascara));
                    defProcVO.setListaObligatorio(listaTemasSeleccionados(listaObligatorio));
                    defProcVO.setListaOrden(listaTemasSeleccionados(listaOrden));
                    defProcVO.setListaRotulo(listaTemasSeleccionados(listaRotulo));
                    defProcVO.setListaActivos(listaTemasSeleccionados(listaActivos));
                    defProcVO.setListaOcultos(listaTemasSeleccionados(listaOcultos));
                    defProcVO.setListaBloqueados(listaTemasSeleccionados(listaBloqueados));
                    defProcVO.setListaValidacion(listaTemasSeleccionados(listaValidacion));
                    defProcVO.setListaOperacion(listaTemasSeleccionados(listaOperacion));
                    // Recuperar listas de la pestaña de Enlaces
                    String listaCodEnlaces = request.getParameter("listaCodEnlaces");
                    String listaDescEnlaces = request.getParameter("listaDescEnlaces");
                    String listaUrlEnlaces = request.getParameter("listaUrlEnlaces");
                    String listaEstadoEnlaces = request.getParameter("listaEstadoEnlaces");
                    defProcVO.setListaCodEnlaces(listaTemasSeleccionados(listaCodEnlaces));
                    defProcVO.setListaDescEnlaces(listaTemasSeleccionados(listaDescEnlaces));
                    defProcVO.setListaUrlEnlaces(listaTemasSeleccionados(listaUrlEnlaces));
                    defProcVO.setListaEstadoEnlaces(listaTemasSeleccionados(listaEstadoEnlaces));
                    // Recuperar listas de la pestaña de Roles
                    String listaCodRoles = request.getParameter("listaCodRol");
                    String listaDescRoles = request.getParameter("listaDescRol");
                    String listaPorDefecto = request.getParameter("listaPorDefecto");
                    String listaConsultaWebRol = request.getParameter("listaConsultaWebRol");
                    defProcVO.setListaCodRoles(listaTemasSeleccionados(listaCodRoles));
                    defProcVO.setListaDescRoles(listaTemasSeleccionados(listaDescRoles));
                    defProcVO.setListaPorDefecto(listaTemasSeleccionados(listaPorDefecto));
                    defProcVO.setListaConsultaWebRol(listaTemasSeleccionados(listaConsultaWebRol));

                    ArrayList<FirmasDocumentoProcedimientoVO> listaFirmasVO = new ArrayList<FirmasDocumentoProcedimientoVO>();
                    listaFirmasVO = FirmasDocumentoProcedimientoManager.getInstance().getTodasFirmasDocumentoPorProcedimiento(codMunicipioImportacion, defProcVO.getTxtCodigo(), params);
                    defProcVO.setFirmasDocumentosProcedimiento(listaFirmasVO);

                    // Recuperar listas de unidades de inicio.
                    String listaCodUnidadesInicio = request.getParameter("listaCodUnidadesInicio");
                    String listaDescUnidadesInicio = request.getParameter("listaDescUnidadesInicio");
                    defProcVO.setListaCodUnidadInicio(listaTemasSeleccionados(listaCodUnidadesInicio));
                    defProcVO.setListaDescUnidadInicio(listaTemasSeleccionados(listaDescUnidadesInicio));

                    String disponible = request.getParameter("disponible");
                    if (disponible == null) {
                        defProcVO.setDisponible("0");
                    } else {
                        defProcVO.setDisponible("1");
                    }
                    String tramitacionInternet = request.getParameter("tramitacionInternet");
                    if (tramitacionInternet == null) {
                        defProcVO.setTramitacionInternet("0");
                    } else {
                        defProcVO.setTramitacionInternet("1");
                    }
                    String InteresadoOblig = request.getParameter("interesadoOblig");
                    if (InteresadoOblig == null) {
                        defProcVO.setInteresadoOblig("0");
                    } else {
                        defProcVO.setInteresadoOblig("1");
                    }
                    String ClaseBuzonHistorico = request.getParameter("claseBuzonEntradaHistorico");                    
                    defProcVO.setClaseBuzonEntradaHistorico(ClaseBuzonHistorico);
                    
                    /**** PLUGIN DE FINALIZACIÓN NO CONVENCIONAL DE UN EXPEDIENTE ****/
                    m_Log.debug("=============== INICIO: RECUPERANDO EL PLUGIN DE FINALIZACIÓN DE EXPEDIENTE PARA IMPORTAR EN EL NUEVO PROCEDIMIENTO ======================");

                    // SE ESTÁ IMPORTANDO DESDE UNO DE LOS ENTORNOS DE REAL
                    DefinicionProcedimientosValueObject aux = new DefinicionProcedimientosValueObject();
                    
                    // Se recupera los datos de conexión a la base de datos para el entorno de pruebas y recuperar
                    // la info de plugin de finalización de procedimiento del procedimiento en pruebas
                    m_Log.debug(" ========== codMunicipioImportacion: " + codMunicipioImportacion);
                    m_Log.debug(" ========== getCodMunicipio: " + defProcVO.getCodMunicipio());
                    String[] paramsAux = new String[7];
                    aux.setCodMunicipio(codMunicipioImportacion);
                    aux.setCodAplicacion("4");
                    String jndiAux = DefinicionProcedimientosManager.getInstance().obtenerJndi(aux, params);
                    paramsAux[0] = params[0];
                    paramsAux[6] = jndiAux;
                    
                    
                    VerificacionFinNoConvencionalExpediente plugin = DefinicionProcedimientosManager.getInstance().getPluginFinalizacionNoConvencional(0,defProcVO.getTxtCodigo(), paramsAux);                    
                    if(plugin!=null && !(plugin instanceof VerificacionFinNoConvencionalExpedienteFlexia)){
                        m_Log.debug(" ============ El plugin tienees 1=null  y no es el por defecto de flexia ");
                        if(StringOperations.stringNoNuloNoVacio(plugin.getImplClass()) && StringOperations.stringNoNuloNoVacio(plugin.getNombre())){
                            m_Log.debug(" ============ El procedimiento a importar tiene plugin de fin no convencional " + plugin.getNombre() + " y clase: " + plugin.getImplClass());
                            defProcVO.setImplClassServicioFinalizacion(plugin.getImplClass());                            
                            defProcVO.setCodServicioFinalizacion(plugin.getNombre());                            
                        }
                    }
                    m_Log.debug("=============== FIN: RECUPERANDO EL PLUGIN DE FINALIZACIÓN DE EXPEDIENTE PARA IMPORTAR EN EL NUEVO PROCEDIMIENTO ======================");
                    /**** PLUGIN DE FINALIZACIÓN NO CONVENCIONAL DE UN EXPEDIENTE ****/
                    

                    i = DefinicionProcedimientosManager.getInstance().insert(conexion, defProcVO, params);


                    if (i > 0) {
                        // EL CÓDIGO DE MUNICIPIO A UTILIZAR ES EL DEL ENTORNO DESDE EL QUE SE IMPORTA EL PROCEDIMIENTO
                        String codMunicipio = codMunicipioImportacion;
                        dPVO.setCodMunicipio(codMunicipio);
                        dPVO.setCodAplicacion(defProcVO.getCodAplicacion());
                        String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(dPVO, params);
                        paramsDiputacion[0] = params[0]; // "oracle";
                        paramsDiputacion[6] = jndi;
                        defTramVO.setCodMunicipio(codMunicipioImportacion);
                        defTramVO.setTxtCodigo(defProcVO.getTxtCodigo());
                        // SE LEEN LOS TRÁMITES DEL PROCEDIMIENTO A IMPORTAR, DIRECTAMENTE DESDE EL ESQUEMA DE DICHA ORGANIZACION
                        defTramVO = DefinicionTramitesManager.getInstance().getTramiteImportar(defTramVO, paramsDiputacion);
                        // EL CÓDIGO DE MUNICIPIO ES AHORA EL MISMO QUE EL DEL USUARIO PORQUE SE VAN A DAR DE ALTA
                        // LOS TRÁMITES DEL PROCEDIMIENTO EN EL ENTORNO DE PRUEBAS
                        //defTramVO.setCodMunicipio(defProcVO.getCodMunicipio());
                        defTramVO.setCodMunicipio(codMunicipioUsuario);
                        j = DefinicionTramitesManager.getInstance().insertImportar(conexion, defTramVO, params);
                    }

                    // Obtener los campos de tipo desplegable, así como sus posibles valores
                    // para recrearlos en el entorno real.
                    String[] paramsImportar = new String[7];
                    String jndi = DefinicionProcedimientosManager.getInstance().obtenerJndi(dPVO, params);
                    paramsImportar[0] = params[0];
                    paramsImportar[6] = jndi;
                    Vector camposDesplegables =
                            DefinicionProcedimientosManager.getInstance().obtenerCamposDesplegables(
                            defProcVO.getTxtCodigo(), paramsImportar);

                    if (camposDesplegables.size() > 0) {
                        CamposDesplegablesManager.getInstance().anhadirConjuntoDesplegables(camposDesplegables, params);
                    }


                } catch (Exception e) {
                    try {
                        abd.rollBack(conexion);
                        conexion.setAutoCommit(true);
                        e.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + e.getMessage());
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + ex.getMessage());
                        }
                    }
                } finally {
                    if (i > 0 && j > 0) {
                        try {
                            opcion = "altaRealizada";
                            abd.finTransaccion(conexion);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    } else if (i < 0 || j < 0) {
                        try {
                            opcion = "yaExiste";
                            abd.rollBack(conexion);
                            conexion.setAutoCommit(true);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    } else {
                        try {
                            opcion = "altaNoRealizadaDescargar";
                            abd.rollBack(conexion);
                            conexion.setAutoCommit(true);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            if (m_Log.isErrorEnabled()) {
                                m_Log.error("Exception: " + ex.getMessage());
                            }
                        }
                    }
                    try {
                        abd.devolverConexion(conexion);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        if (m_Log.isErrorEnabled()) {
                            m_Log.error("Exception: " + ex.getMessage());
                        }
                    }
                }
            }
            
        } else { // No hay usuario.
            m_Log.debug("MantAnotacionRegistroAction --> no hay usuario");
            opcion = "no_usuario";
        }

        /* Redirigimos al JSP de salida*/
        m_Log.debug("<================= DefinicionProcedimientosAction ======================");
        return (mapping.findForward(opcion));

    }

    private String crearXML(DefinicionProcedimientosValueObject dFVO, String[] params) {

        StringBuffer textoXml = new StringBuffer("");
        textoXml.append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>");
        textoXml.append("<procedimiento>");
        textoXml.append("<nombre>").append(dFVO.getTxtDescripcion()).append("</nombre>");
        textoXml.append("<codigo>").append(dFVO.getTxtCodigo()).append("</codigo>");
        textoXml.append("<fechaDesde>").append(dFVO.getFechaLimiteDesde()).append("</fechaDesde>");
        if (dFVO.getFechaLimiteHasta() == null || dFVO.getFechaLimiteHasta().equals("")) {
            textoXml.append("<fechaHasta>").append("").append("</fechaHasta>");
        } else {
            textoXml.append("<fechaHasta>").append(dFVO.getFechaLimiteHasta()).append("</fechaHasta>");
        }
        textoXml.append("<nombreArea>").append(dFVO.getDescArea()).append("</nombreArea>");
        textoXml.append("<nombreTipoProcedimiento>").append(dFVO.getDescTipoProcedimiento()).append("</nombreTipoProcedimiento>");
        Vector listaUnidadesInicio = new Vector();
        listaUnidadesInicio = dFVO.getTablaUnidadInicio();
        if (listaUnidadesInicio.size() == 0) {
            textoXml.append("<unidadInicio>");
            textoXml.append("<nombreUnidadInicio>CUALQUIERA</nombreUnidadInicio>");
            textoXml.append("</unidadInicio>");
        } else {
        for (int i = 0; i < listaUnidadesInicio.size(); i++) {
            textoXml.append("<unidadInicio>");
            DefinicionProcedimientosValueObject d = new DefinicionProcedimientosValueObject();
            d = (DefinicionProcedimientosValueObject) listaUnidadesInicio.elementAt(i);
            textoXml.append("<nombreUnidadInicio>").append(d.getDescUnidadInicio()).append("</nombreUnidadInicio>");
            textoXml.append("</unidadInicio>");
        }
        }
        
        String tipoInicio = dFVO.getCodTipoInicio();
        if ("0".equals(tipoInicio)) {
            tipoInicio = "OFICIO";
        } else if ("1".equals(tipoInicio)) {
            tipoInicio = "INSTANCIA DE PARTE";
        } else {
            tipoInicio = "OFICIO/INSTANCIA DE PARTE";
        }
        textoXml.append("<tipoInicio>").append(tipoInicio).append("</tipoInicio>");
        Vector listaEnlaces = dFVO.getListaEnlaces();
        for (int i = 0; i < listaEnlaces.size(); i++) {
            textoXml.append("<enlaces>");
            DefinicionProcedimientosValueObject d = new DefinicionProcedimientosValueObject();
            d = (DefinicionProcedimientosValueObject) listaEnlaces.elementAt(i);
            String enl = d.getDescEnlace() + " (" + d.getUrlEnlace() + ")";
            textoXml.append("<nombreEnlace>").append(enl).append("</nombreEnlace>");
            textoXml.append("</enlaces>");
        }
        Vector listaDocumentos = dFVO.getListasDoc();
        for (int i = 0; i < listaDocumentos.size(); i++) {
            textoXml.append("<documento>");
            DefinicionProcedimientosValueObject d = new DefinicionProcedimientosValueObject();
            d = (DefinicionProcedimientosValueObject) listaDocumentos.elementAt(i);
            textoXml.append("<nombreDoc>").append(d.getNombreDocumento()).append("</nombreDoc>");
            textoXml.append("</documento>");
        }
        Vector listaCampos = dFVO.getListaCampos();

        for (int i = 0; i < listaCampos.size(); i++) {

            DefinicionCampoValueObject d = new DefinicionCampoValueObject();
            d = (DefinicionCampoValueObject) listaCampos.elementAt(i);
            String activoProc = d.getActivo();
            if (activoProc.equals("SI")) {
                textoXml.append("<campo>");


                String nomCampo = d.getDescCampo() + " (" + d.getDescTipoDato() + "," + d.getTamano() + "," + d.getDescPlantilla();
                if (d.getDescMascara() != null && !d.getDescMascara().equals("")) {
                    nomCampo += " ," + d.getDescMascara();
                }
                nomCampo += ")";
                textoXml.append("<nombreCampo>").append(nomCampo).append("</nombreCampo>");
                textoXml.append("</campo>");
            }
        }

        Vector listaTramites = dFVO.getTramites();
        for (int i = 0; i < listaTramites.size(); i++) {
            textoXml.append("<tramite>");
            DefinicionProcedimientosValueObject d = new DefinicionProcedimientosValueObject();
            d = (DefinicionProcedimientosValueObject) listaTramites.elementAt(i);
            textoXml.append("<nombreTramite>").append(d.getNombreTramite()).append("</nombreTramite>");
            String codigoTramite = d.getCodigoTramite();
            String codMunicipio = dFVO.getCodMunicipio();
            String codProcedimiento = dFVO.getTxtCodigo();
            DefinicionTramitesValueObject dT = new DefinicionTramitesValueObject();
            dT.setCodMunicipio(codMunicipio);
            dT.setTxtCodigo(codProcedimiento);
            dT.setCodigoTramite(codigoTramite);
            try {
                dT = DefinicionTramitesManager.getInstance().getTramite(dT, codMunicipio, params);
            } catch (AnotacionRegistroException te) {
                dT = null;
            }
            textoXml.append("<nombreClasifTram>").append(dT.getDescClasifTramite()).append("</nombreClasifTram>");
            String plazo = dT.getPlazo();
            String tipoPlazo = dT.getUnidadesPlazo();
            if ("N".equals(tipoPlazo)) {
                tipoPlazo = "DÍAS NATURALES";
            } else if ("H".equals(tipoPlazo)) {
                tipoPlazo = "DÍAS HÁBILES";
            } else if ("M".equals(tipoPlazo)) {
                tipoPlazo = "MESES";
            } else {
                tipoPlazo = "";
            }
            if (plazo == null) {
                plazo = "";
            }
            textoXml.append("<plazo>").append(plazo + " " + tipoPlazo).append("</plazo>");
            String nombreUnidadInicio = dT.getDescUnidadInicio();
            String nombreUnidadTramite = "";
            String codUnidadInicio = dT.getCodUnidadInicio();
            String codUnidadTramite = dT.getCodUnidadTramite();
                       
            if ("".equals(codUnidadInicio)) {
                nombreUnidadInicio = "--";
            } else if ("-99999".equals(codUnidadInicio)) {
                nombreUnidadInicio = "LA DEL EXPEDIENTE";
            } else if ("-99998".equals(codUnidadInicio)) {
                nombreUnidadInicio = "CUALQUIERA";
            }
            textoXml.append("<nombreUnidadInicio>").append(nombreUnidadInicio).append("</nombreUnidadInicio>");
            
            if ("4".equals(codUnidadTramite)) {
                nombreUnidadTramite = "LA DEL EXPEDIENTE";
                textoXml.append("<unidadInicioTramite>");
                    textoXml.append("<nombreUnidadTramite>").append(nombreUnidadTramite).
                            append("</nombreUnidadTramite>");
                    textoXml.append("</unidadInicioTramite>");
            } else if ("3".equals(codUnidadTramite)) {
                nombreUnidadTramite = "LA QUE LO INICIA";
                textoXml.append("<unidadInicioTramite>");
                    textoXml.append("<nombreUnidadTramite>").append(nombreUnidadTramite).
                            append("</nombreUnidadTramite>");
                    textoXml.append("</unidadInicioTramite>");
            } else if ("2".equals(codUnidadTramite)) {
                nombreUnidadTramite = "LA DEL TRÁMITE ANTERIOR";
                textoXml.append("<unidadInicioTramite>");
                    textoXml.append("<nombreUnidadTramite>").append(nombreUnidadTramite).
                            append("</nombreUnidadTramite>");
                    textoXml.append("</unidadInicioTramite>");
            } else if ("1".equals(codUnidadTramite)) {
                nombreUnidadTramite = "CUALQUIERA";
                textoXml.append("<unidadInicioTramite>");
                    textoXml.append("<nombreUnidadTramite>").append(nombreUnidadTramite).
                            append("</nombreUnidadTramite>");
                    textoXml.append("</unidadInicioTramite>");
            } else if ("0".equals(codUnidadTramite)) {
                Vector<UORDTO> unidadesTramite = dT.getUnidadesTramitadoras();
                for (int t = 0; t < unidadesTramite.size(); t++) {
                    textoXml.append("<unidadInicioTramite>");
                    textoXml.append("<nombreUnidadTramite>").append(unidadesTramite.elementAt(t).getUor_nom()).
                            append("</nombreUnidadTramite>");
                    textoXml.append("</unidadInicioTramite>");
                }
            }

            
            Vector listaEnlacesT = new Vector();
            try {
                listaEnlacesT = DefinicionTramitesManager.getInstance().getListaEnlaces(dT, params);
            } catch (AnotacionRegistroException te) {
                listaEnlacesT = null;
            }
            for (int j = 0; j < listaEnlacesT.size(); j++) {
                textoXml.append("<enlacesT>");
                GeneralValueObject g = new GeneralValueObject();
                g = (GeneralValueObject) listaEnlacesT.elementAt(j);
                String enl = g.getAtributo("descripcion") + " (" + g.getAtributo("url") + ")";
                textoXml.append("<nombreEnlaceT>").append(enl).append("</nombreEnlaceT>");
                textoXml.append("</enlacesT>");
            }
            Vector listaDocumentosT = dT.getListaDocumentos();
            for (int j = 0; j < listaDocumentosT.size(); j++) {
                textoXml.append("<documentoT>");
                DefinicionTramitesValueObject dt = new DefinicionTramitesValueObject();
                dt = (DefinicionTramitesValueObject) listaDocumentosT.elementAt(j);
                textoXml.append("<nombreDocT>").append(dt.getNombreDoc()).append("</nombreDocT>");
                textoXml.append("</documentoT>");
            }
            Vector listaCamposT = dT.getListaCampos();
            for (int j = 0; j < listaCamposT.size(); j++) {

                DefinicionCampoValueObject dc = new DefinicionCampoValueObject();
                dc = (DefinicionCampoValueObject) listaCamposT.elementAt(j);

                String activo = dc.getActivo();
                m_Log.debug("************************************ VALOR ACTIVO: " + activo);
                if (activo.equals("SI")) {
                    textoXml.append("<campoT>");
                    String nomCampo = dc.getDescCampo() + " (" + dc.getDescTipoDato() + "," + dc.getTamano() + "," + dc.getDescPlantilla();
                    if (dc.getDescMascara() != null && !dc.getDescMascara().equals("")) {
                        nomCampo += " ," + dc.getDescMascara();
                    }
                    nomCampo += ")";
                    textoXml.append("<nombreCampoT>").append(nomCampo).append("</nombreCampoT>");
                    textoXml.append("</campoT>");
                }
            }
            Vector listaCondicionesEnt = dT.getListasCondEntrada();
            for (int j = 0; j < listaCondicionesEnt.size(); j++) {
                textoXml.append("<condEntrada>");
                DefinicionTramitesValueObject dt = new DefinicionTramitesValueObject();
                dt = (DefinicionTramitesValueObject) listaCondicionesEnt.elementAt(j);
                textoXml.append("<descTramite>").append(dt.getDescTramiteCondEntrada()).append("</descTramite>");
                textoXml.append("<estTramite>").append(dt.getEstadoTramiteCondEntrada()).append("</estTramite>");
                String condicionEscapada = dt.getExpresionCondEntrada();
                if (condicionEscapada != null && !condicionEscapada.equals("")) {
                    condicionEscapada = condicionEscapada.replaceAll("<>", "!=");
                    condicionEscapada = condicionEscapada.replaceAll("<", "menor");
                    condicionEscapada = condicionEscapada.replaceAll(">", "mayor");
                }

                textoXml.append("<condicion>").append(condicionEscapada).append("</condicion>");
                textoXml.append("<tipoCondicion>").append(dt.getTipoCondEntrada()).append("</tipoCondicion>");
                textoXml.append("</condEntrada>");
            }
            String condicion = dT.getTipoCondicion();
            condicion = condicion.replaceAll("<>", "!=");
            condicion = condicion.replaceAll("<", "menor");
            condicion = condicion.replaceAll(">", "mayor");
            String condFav = dT.getTipoFavorableSI();
            condFav = condFav.replaceAll("<>", "!=");
            condFav = condFav.replaceAll("<", "menor");
            condFav = condFav.replaceAll(">", "mayor");
            String condDesfav = dT.getTipoFavorableNO();
             condDesfav = condDesfav.replaceAll("<>", "!=");
            condDesfav = condDesfav.replaceAll("<", "menor");
            condDesfav = condDesfav.replaceAll(">", "mayor");
            String condicion1 = condicion;
            textoXml.append("<tipoCondicion>").append(condicion).append("</tipoCondicion>");
            if ("Finalizacion".equals(condicion)) {
                condicion = "Fin Expediente";
            } else if ("Tramite".equals(condicion)) {
                condicion = "Lista de Trámites";
            } else if ("Pregunta".equals(condicion)) {
                condicion = condicion + ":¿" + dT.getTexto().replaceAll("<>", "!=").replaceAll("<", "menor").replaceAll(">", "mayor") + "?";
            }
            if ("".equals(condicion)) {
                textoXml.append("<tipoCond>").append("(Sin Condición)").append("</tipoCond>");
            } else {
                textoXml.append("<tipoCond>").append("(" + condicion + ")").append("</tipoCond>");
            }
            if ("TramiteSI".equals(condFav)) {
                textoXml.append("<tipoCond>").append("(" + condicion + ")").append("</tipoCond>");
                textoXml.append("<tipoCondF>").append("(" + condicion + " Favorable con Trámites)").append("</tipoCondF>");
                textoXml.append("<tipoCondFav>").append(condFav).append("</tipoCondFav>");
            }
            if ("FinalizacionSI".equals(condFav)) {
                textoXml.append("<tipoCond>").append("(" + condicion + ")").append("</tipoCond>");
                textoXml.append("<tipoCondF>").append("(" + condicion + " Favorable Finalización)").append("</tipoCondF>");
                textoXml.append("<tipoCondFav>").append(condFav).append("</tipoCondFav>");
            }
            if ("TramiteNO".equals(condDesfav)) {
                textoXml.append("<tipoCond>").append("(" + condicion + ")").append("</tipoCond>");
                textoXml.append("<tipoCondDF>").append("(" + condicion + " Desfavorable con Trámites)").append("</tipoCondDF>");
                textoXml.append("<tipoCondDFav>").append(condDesfav).append("</tipoCondDFav>");
            }
            if ("FinalizacionNO".equals(condDesfav)) {
                textoXml.append("<tipoCond>").append("(" + condicion + ")").append("</tipoCond>");
                textoXml.append("<tipoCondDF>").append("(" + condicion + " Desfavorable Finalización)").append("</tipoCondDF>");
                textoXml.append("<tipoCondDFav>").append(condDesfav).append("</tipoCondDFav>");
            }
            TablasIntercambiadorasValueObject t = new TablasIntercambiadorasValueObject();
            t.setCodMunicipio(codMunicipio);
            t.setCodTramite(codigoTramite);
            t.setCodProcedimiento(codProcedimiento);
            if ("Tramite".equals(condicion1)) {
                t.setNumeroCondicionSalida("0");
                try {
                    t = DefinicionTramitesManager.getInstance().getListaTramitesFlujoSalidaSeleccionada(t, params);
                } catch (AnotacionRegistroException te) {
                    t = null;
                }
                String obligatoriedad = t.getObligatorio();
                if ("0".equals(obligatoriedad)) {
                    textoXml.append("<obligatorio>").append("(Opcional)").append("</obligatorio>");
                } else if ("1".equals(obligatoriedad)) {
                    textoXml.append("<obligatorio>").append("(Obligatorios)").append("</obligatorio>");
                } else if ("2".equals(obligatoriedad)) {
                    textoXml.append("<obligatorio>").append("(Excluyente)").append("</obligatorio>");
                }
                Vector listaFlujoSalida = t.getListaTramitesSeleccion();
                for (int j = 0; j < listaFlujoSalida.size(); j++) {
                    textoXml.append("<condSalidaT>");
                    DefinicionTramitesValueObject dt = new DefinicionTramitesValueObject();
                    dt = (DefinicionTramitesValueObject) listaFlujoSalida.elementAt(j);
                    textoXml.append("<descTramiteT>").append(dt.getNombreTramiteFlujoSalida()).append("</descTramiteT>");
                    textoXml.append("</condSalidaT>");
                }
            }
            if ("TramiteSI".equals(condFav) && ("Pregunta".equals(condicion1) || "Resolucion".equals(condicion1))) {
                t.setNumeroCondicionSalida("1");
                try {
                    t = DefinicionTramitesManager.getInstance().getListaTramitesFlujoSalidaSeleccionada(t, params);
                } catch (AnotacionRegistroException te) {
                    t = null;
                }
                String obligatoriedad = t.getObligatorio();
                if ("0".equals(obligatoriedad)) {
                    textoXml.append("<obligatorioF>").append("(Opcional)").append("</obligatorioF>");
                } else if ("1".equals(obligatoriedad)) {
                    textoXml.append("<obligatorioF>").append("(Obligatorios)").append("</obligatorioF>");
                } else if ("2".equals(obligatoriedad)) {
                    textoXml.append("<obligatorioF>").append("(Excluyente)").append("</obligatorioF>");
                }
                Vector listaFlujoSalida = t.getListaTramitesSeleccion();
                for (int j = 0; j < listaFlujoSalida.size(); j++) {
                    textoXml.append("<condSalidaF>");
                    DefinicionTramitesValueObject dt = new DefinicionTramitesValueObject();
                    dt = (DefinicionTramitesValueObject) listaFlujoSalida.elementAt(j);
                    textoXml.append("<descTramiteF>").append(dt.getNombreTramiteFlujoSalida()).append("</descTramiteF>");
                    textoXml.append("</condSalidaF>");
                }
            }
            if ("TramiteNO".equals(condDesfav) && ("Pregunta".equals(condicion1) || "Resolucion".equals(condicion1))) {
                t.setNumeroCondicionSalida("2");
                try {
                    t = DefinicionTramitesManager.getInstance().getListaTramitesFlujoSalidaSeleccionada(t, params);
                } catch (AnotacionRegistroException te) {
                    t = null;
                }
                String obligatoriedad = t.getObligatorio();
                if ("0".equals(obligatoriedad)) {
                    textoXml.append("<obligatorioDF>").append("(Opcional)").append("</obligatorioDF>");
                } else if ("1".equals(obligatoriedad)) {
                    textoXml.append("<obligatorioDF>").append("(Obligatorios)").append("</obligatorioDF>");
                } else if ("2".equals(obligatoriedad)) {
                    textoXml.append("<obligatorioDF>").append("(Excluyente)").append("</obligatorioDF>");
                }
                Vector listaFlujoSalida = t.getListaTramitesSeleccion();
                for (int j = 0; j < listaFlujoSalida.size(); j++) {
                    textoXml.append("<condSalidaDF>");
                    DefinicionTramitesValueObject dt = new DefinicionTramitesValueObject();
                    dt = (DefinicionTramitesValueObject) listaFlujoSalida.elementAt(j);
                    textoXml.append("<descTramiteDF>").append(dt.getNombreTramiteFlujoSalida()).append("</descTramiteDF>");
                    textoXml.append("</condSalidaDF>");
                }
            }
            textoXml.append("</tramite>");
        }
        textoXml.append("</procedimiento>");
        return textoXml.toString();
    }

    private Vector listaTemasSeleccionados(String listTemasSelecc) {
        Vector lista = new Vector();
        StringTokenizer valores = null;
        if (listTemasSelecc != null) {
            valores = new StringTokenizer(listTemasSelecc, "§¥", false);
            while (valores.hasMoreTokens()) {
                String valor = valores.nextToken();
                lista.addElement(valor);
            }
        }
        return lista;
    }

      // #265897: no se acepta una url de tanta longitud, las listas se tratan en la jsp	
    /* ORIGINAL
    private Vector crearTablaUnidadInicio(Vector listaCodUI, Vector listaDescUI, Vector listaCodVisibleUI) {
        Vector listaUnidadesInicio = new Vector();
        for (int i = 0; i < listaCodUI.size(); i++) {
            DefinicionProcedimientosValueObject dfVO = new DefinicionProcedimientosValueObject();
            dfVO.setCodUnidadInicio((String) listaCodUI.elementAt(i));
            dfVO.setDescUnidadInicio((String) listaDescUI.elementAt(i));
            dfVO.setCodVisibleUnidadInicio((String) listaCodVisibleUI.elementAt(i));
            listaUnidadesInicio.addElement(dfVO);
        }
        return listaUnidadesInicio;
    }
     */
    
    
     private String limpiarCadena(String dato){
               
        if(dato!=null && !"".equals(dato)){
            dato = dato.replaceAll("'", "");
            dato = dato.replaceAll("\"","");
        }       
        return dato;
    }
}
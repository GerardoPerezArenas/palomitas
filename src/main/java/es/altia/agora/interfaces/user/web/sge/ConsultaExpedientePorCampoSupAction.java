/* Generated by Together */
package es.altia.agora.interfaces.user.web.sge;

import es.altia.agora.business.administracion.mantenimiento.CamposListadosParametrizablesVO;
import es.altia.agora.business.administracion.mantenimiento.persistence.UsuariosGruposManager;
import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.sge.ConsultaExpedientesValueObject;
import es.altia.agora.business.sge.exception.TramitacionException;
import es.altia.agora.business.registro.persistence.AnotacionRegistroManager;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import java.util.Vector;
import java.util.HashMap;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import es.altia.agora.business.util.GeneralValueObject;
import es.altia.common.service.config.*;
import es.altia.agora.business.sge.persistence.*;
import es.altia.agora.technical.ConstantesDatos;
import es.altia.agora.technical.EstructuraCampo;
import es.altia.flexia.integracion.moduloexterno.plugin.ModuloIntegracionExterno;
import es.altia.flexia.integracion.moduloexterno.plugin.ModuloIntegracionExternoFactoria;
import es.altia.flexia.integracion.moduloexterno.plugin.persistence.vo.EstructuraCampoModuloIntegracionVO;
import java.util.ArrayList;
import java.util.StringTokenizer;

public final class ConsultaExpedientePorCampoSupAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(ConsultaExpedientePorCampoSupAction.class.getName());
    protected static Config m_Conf = ConfigServiceHelper.getConfig("common");

    public ActionForward performSession(ActionMapping mapping,
                                        ActionForm form,
                                        HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.debug("================= ConsultaExpedientePorCampoSupAction ======================>");
        ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));

        // Validaremos los parametros del request especificados
        HttpSession session = request.getSession();
        String opcion = "";

        if ((session.getAttribute("usuario") != null)) {
            UsuarioValueObject usuario = (UsuarioValueObject) session.getAttribute("usuario");
            String[] params = usuario.getParamsCon();
            int cod_dep;
            int cod_uni;
            cod_dep = usuario.getDepCod();
            cod_uni = usuario.getUnidadOrgCod();
            int codOrganizacion=usuario.getOrgCod();
            if (m_Log.isDebugEnabled()) m_Log.debug("Codigo organizacion:"+codOrganizacion);  

            // Si usuario en sesion es nulo --> error.

            ActionErrors errors = new ActionErrors();

            ConsultaExpedientesValueObject consExpVO = new ConsultaExpedientesValueObject();
            ConsultaExpedientePorCampoSupForm consExpForm = null;

            if (form == null) {
                m_Log.debug("Rellenamos el form de Consulta de Expedientes");
                form = new ConsultaExpedientePorCampoSupForm();
                if ("request".equals(mapping.getScope()))
                    request.setAttribute(mapping.getAttribute(), form);
                else
                    session.setAttribute(mapping.getAttribute(), form);
            }

            consExpForm = (ConsultaExpedientePorCampoSupForm) form;

            opcion = request.getParameter("opcion");
            if (m_Log.isInfoEnabled()) m_Log.info("la opcion en el action es " + opcion);

            if (opcion.equals("inicio")) {
              
                consExpVO = consExpForm.getConsultaExpedientes();
                Vector listaProcedimientos = new Vector();
                try {
                    listaProcedimientos = TramitacionManager.getInstance().getListaProcedimientos(usuario, params);
                } catch (TramitacionException te) {
                    listaProcedimientos = new Vector();
                }
                consExpVO.setListaClasifTramite(DefinicionTramitesManager.getInstance().getListaClasifTramites(params));
                String expRelacionado = request.getParameter("expRelacionado");
                if (expRelacionado == null) {
                    expRelacionado = "no";
                }
                consExpVO.setExpRelacionado(expRelacionado);
                consExpVO.setListaProcedimientos(listaProcedimientos);
                consExpVO.setCriterios(null);
                consExpForm.setConsultaExpedientes(consExpVO);
                opcion = "inicio";
            } else if (opcion.equalsIgnoreCase("consultarCampos")) {
                // Se realiza la consulta de los campos suplementarios relativos a un procedimiento en concreto
                // Se obtienen todos los campos suplementarios pertenecientes al expediente
                // Se deben obtener todos los campos suplementarios pertenecientes a los trámites que sean visibles a nivel expediente
                // Además  ahora es necesario recuperar los campos de consulta e módulos externos relacionados
                // con un procedimiento en concreto
                if (m_Log.isDebugEnabled()) m_Log.debug("La opcion en el action es consultarCampos");
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio", request.getParameter("codMunicipio"));
                gVO.setAtributo("codProcedimiento", request.getParameter("codigoProcedimiento"));
                gVO.setAtributo("ejercicio", request.getParameter("ejercicio"));
                gVO.setAtributo("desdeJsp", "si");
                gVO.setAtributo("consultaCampos", "si"); 
                Vector estructuraDatosSuplementarios = new Vector();
                Vector estructuraDatosSuplementariosTramites = new Vector();
                estructuraDatosSuplementarios = FichaExpedienteManager.getInstance().cargaEstructuraDatosSuplementarios(gVO, params);
                //Mai, quiero ver lo que hay en la plantilla
                for (int i = 0; i < estructuraDatosSuplementarios.size(); i++) {
                    EstructuraCampo campo= (EstructuraCampo) estructuraDatosSuplementarios.get(i);   
                    if (m_Log.isDebugEnabled()) m_Log.debug("UrlPlantilla:  "+campo.getURLPlantilla());  
                }   
                  
                
                
                estructuraDatosSuplementariosTramites = TramitacionExpedientesManager.getInstance().cargaConsultaCamposSuplemetarios(gVO, params);
               
                //Recuperamos los campos de los modulos externos por los que se puede filtrar
               ArrayList<ModuloIntegracionExterno> modulos= new ArrayList<ModuloIntegracionExterno>();
               ArrayList<EstructuraCampoModuloIntegracionVO> camposConsulta=new ArrayList<EstructuraCampoModuloIntegracionVO>();
               modulos=ModuloIntegracionExternoFactoria.getInstance().getImplClassModuloConCamposConsulta(codOrganizacion, request.getParameter("codigoProcedimiento"), params);
                for (int i = 0; i < modulos.size(); i++) {
                     ModuloIntegracionExterno modulo=modulos.get(i);   
                     camposConsulta.addAll(modulo.getCamposConsulta());
                }
                consExpForm.setEstructuraModulosExtensionCamposConsulta(modulos);
                //Imprimimos para debug los modulos..
                 for (int i = 0; i < modulos.size(); i++) {
                     ModuloIntegracionExterno modulo=modulos.get(i);   
                    if (m_Log.isDebugEnabled()) m_Log.debug("Nombre Modulo:"+modulo.getNombreModulo());  
                    if (m_Log.isDebugEnabled()) m_Log.debug("Descripcion Modulo:"+modulo.getDescripcionModulo());
                  
                 }
                 consExpForm.setCamposConsulta(camposConsulta);
                 if (m_Log.isDebugEnabled()) m_Log.debug("Lista de los campos de consulta:"+camposConsulta.toString());
                
                
                consExpForm.setEstructuraDatosSuplementarios(estructuraDatosSuplementarios);
                consExpForm.setEstructuraDatosSuplementariosTramites(estructuraDatosSuplementariosTramites);
                session.setAttribute("consulta", "campo");
                opcion = "consultarCampos";
            } else if (opcion.equalsIgnoreCase("consultarListado")) {

              //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMAÑ0
            //SABEMOS QUE EN ESTE CASO SE TRATA DEL LISTADO TIPO 2 QUE ES expedientes
            CamposListadosParametrizablesVO gVO1 = new CamposListadosParametrizablesVO();
            Vector listaCamposListados = AnotacionRegistroManager.getInstance().getCamposListado(1, params);
            consExpForm.setCamposListados(listaCamposListados);
                consExpVO = consExpForm.getConsultaExpedientes();
                String expRelacionado = request.getParameter("expRelacionado");
                if (expRelacionado == null) {
                    expRelacionado = "no";
                }
                consExpVO.setExpRelacionado(expRelacionado);
                String deAdjuntar = request.getParameter("deAdjuntar");
                if (deAdjuntar == null) {
                    deAdjuntar = "no";
                }
                
                consExpVO.setDeAdjuntar(deAdjuntar);
                String codMunExpIni = request.getParameter("codMunExpIni");
                String ejercicioExpIni = request.getParameter("ejercicioExpIni");
                String numeroExpIni = request.getParameter("numeroExpIni");
                consExpVO.setCodMunicipioIni(codMunExpIni);
                consExpVO.setEjercicioIni(ejercicioExpIni);
                consExpVO.setNumeroExpedienteIni(numeroExpIni);
                String codArea = request.getParameter("codArea");
                consExpVO.setCodArea(codArea);
                String codTramite = request.getParameter("codTramite");
                consExpVO.setCodTramite(codTramite);
                String codUnidadTram = request.getParameter("codUnidadTram");
                consExpVO.setCodUnidadTram(codUnidadTram);
                String codTipoProced = request.getParameter("codTipoProced");
                consExpVO.setCodTipoProced(codTipoProced);
                String refCatastral = request.getParameter("refCatastral");
                consExpVO.setRefCatastral(refCatastral);
                String estado = "";
                estado = request.getParameter("estado");
                consExpVO.setEstado(estado);
                String T_Inicio = request.getParameter("TipoInicio");
                consExpVO.setTipoInicio(T_Inicio);
                                                
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio", request.getParameter("codMunicipio"));
                gVO.setAtributo("codProcedimiento", request.getParameter("codProcedimiento"));
                gVO.setAtributo("ejercicio", request.getParameter("ejercicio"));
                Vector estructuraDatosSuplementarios = consExpForm.getEstructuraDatosSuplementarios();
                
                String campo;
                String valor;
                HashMap camposConsulta = new HashMap();
                EstructuraCampo estructura;
                int tamaño = 0;
                for (int i = 0; i < estructuraDatosSuplementarios.size(); i++) {
                    estructura = (EstructuraCampo) estructuraDatosSuplementarios.get(i);
                    campo = estructura.getCodCampo();
                    if (estructura.getCodTipoDato().equals(m_Conf.getString("E_PLT.CodigoCampoDesplegable"))) {
                        valor = request.getParameter("cod" + campo);
                        valor = eliminarEspacios (estructura, valor);
                    } else {
                        valor = request.getParameter(campo);
                        valor = eliminarEspacios (estructura, valor);                        
                    }
                    if ((valor != null) && (!valor.equalsIgnoreCase(""))) { // Existe un valor para la consulta, hay que introducirlo
                        estructura.setValorConsulta(valor);
                        camposConsulta.put(String.valueOf(tamaño), estructura);
                        tamaño = tamaño + 1;
                    }
                }
                // Introducimos ahora los campos suplementarios de tramites visibles a nivel de expediente
                Vector estructuraDatosSuplementariosTramite = consExpForm.getEstructuraDatosSuplementariosTramites();
                String tramite = "";
                for (int i = 0; i < estructuraDatosSuplementariosTramite.size(); i++) {
                    estructura = (EstructuraCampo) estructuraDatosSuplementariosTramite.get(i);
                    campo = "T_" + estructura.getCodTramite() + "_" + estructura.getCodCampo();
                    if (estructura.getCodTipoDato().equals(m_Conf.getString("E_PLT.CodigoCampoDesplegable"))) {
                        valor = request.getParameter("cod" + campo);
                        valor = eliminarEspacios (estructura, valor);
                        
                    } else {
                        valor = request.getParameter(campo);
                        valor = eliminarEspacios (estructura, valor);
                    }
                    if ((valor != null) && (!valor.equalsIgnoreCase(""))) { // Existe un valor para la consulta, hay que introducirlo
                        estructura.setValorConsulta(valor);
                        camposConsulta.put(String.valueOf(tamaño), estructura);
                        tamaño = tamaño + 1;
                    }
                }

                camposConsulta.put("TAMAÑO", new Integer(tamaño));
                session.setAttribute("tamanho", tamaño+"");
                consExpVO.setCamposSuplementarios(camposConsulta);

                //AHORA TB TENEMOS Que METER LOS CAMPOS DE CONSULTA DE LOS MODULOS EXTERNOS
               
                ArrayList<EstructuraCampoModuloIntegracionVO> campoModulosExternos = consExpForm.getCamposConsulta();
                for (int i = 0; i < campoModulosExternos.size(); i++) {
                  EstructuraCampoModuloIntegracionVO  estructuraME = campoModulosExternos.get(i);
                    campo =estructuraME.getCodCampo();
                    if (estructuraME.getTipoCampo()==6) {
                        
                        valor = request.getParameter("cod" + campo);
                        
                        
                    }else if(estructuraME.getTipoCampo()==1){
                      //Aqui hay que hacer una transformacion por el tema del formato
                        valor = transformarValor(request.getParameter(campo));
                       if (m_Log.isDebugEnabled()) m_Log.debug("Valor del campo numerico transformado:"+valor);     
                       
                    } else {
                        
                         valor=request.getParameter(campo);
                       
                    }
                    if ((valor != null) && (!valor.equalsIgnoreCase(""))) { // Existe un valor para la consulta, hay que introducirlo
                        estructuraME.setValorConsulta(valor);
                     
                    }
                 if (m_Log.isDebugEnabled()) m_Log.debug("Valor del campo de consulta:"+valor);        
                }
                
                consExpVO.setCamposConsultaModuloExterno(campoModulosExternos);
                // Ahora podemos ir a consultar los expedientes.
                int numRelacionExpedientes = 0;

                boolean tieneDirectiva = UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.CONSULTA_SOLO_EXPEDIENTES_TRAMITADOR,usuario.getIdUsuario(), params);

                if(!tieneDirectiva){
                    numRelacionExpedientes = ConsultaExpedientesManager.getInstance().contarPorCamposSuplementarios(usuario, consExpVO, params,null,null);
                }else{
                    numRelacionExpedientes = ConsultaExpedientesManager.getInstance().contarPorCamposSuplementariosUsuarioTramitador(usuario, consExpVO, params,null,null,tamaño);
                }

              
                ConsultaExpedientesValueObject criteriosConsulta = new ConsultaExpedientesValueObject();
                criteriosConsulta.setCodMunicipioIni(consExpVO.getCodMunicipioIni());
                criteriosConsulta.setEjercicioIni(consExpVO.getEjercicioIni());
                criteriosConsulta.setNumeroExpedienteIni(consExpVO.getNumeroExpedienteIni());
                criteriosConsulta.setCodArea(consExpVO.getCodArea());
                criteriosConsulta.setCodTramite(consExpVO.getCodTramite());
                criteriosConsulta.setCodUnidadTram(consExpVO.getCodUnidadTram());
                criteriosConsulta.setCodProcedimiento(consExpVO.getCodProcedimiento());
                criteriosConsulta.setNumeroExpediente(consExpVO.getNumeroExpediente());
                criteriosConsulta.setFechaFin(consExpVO.getFechaFin());
                criteriosConsulta.setFechaInicio(consExpVO.getFechaInicio());
                criteriosConsulta.setEstado(consExpVO.getEstado());
                criteriosConsulta.setExpRelacionado(consExpVO.getExpRelacionado());
                criteriosConsulta.setDeAdjuntar(consExpVO.getDeAdjuntar());
                criteriosConsulta.setCamposSuplementarios(camposConsulta);
                criteriosConsulta.setDesdeInformesGestion(consExpVO.isDesdeInformesGestion());
                criteriosConsulta.setTercero(consExpVO.getTercero());
                criteriosConsulta.setVersionTercero(consExpVO.getVersionTercero());
                criteriosConsulta.setTitular(consExpVO.getTitular());
                criteriosConsulta.setTipoDocumentoTercero(consExpVO.getTipoDocumentoTercero());
                criteriosConsulta.setDocumentoTercero(consExpVO.getDocumentoTercero());
                criteriosConsulta.setTipoInicio(consExpVO.getTipoInicio());
                ConsultaExpedientesForm formulario = new ConsultaExpedientesForm();
                formulario.setConsultaExpedientes(criteriosConsulta);
                formulario.setNumRelacionExpedientes(numRelacionExpedientes);
                formulario.setCamposSuplementarios(camposConsulta);
                formulario.setCamposListados(listaCamposListados);
                //Mai
                formulario.setCamposConsulta(campoModulosExternos);
                
                session.setAttribute("ConsultaExpedientesForm", formulario);
                
            }else if(opcion.equalsIgnoreCase("volverDesdeFichaExpediente")){
                opcion = "consultarListado";
            }
            /* Redirigimos al JSP de salida*/
            m_Log.debug("<================= ConsultaExpedientePorCampoSupAction ======================");
            return (mapping.findForward(opcion));

        }
        m_Log.debug("<================= ConsultaExpedientePorCampoSupAction ======================");
        return (mapping.findForward(opcion));
    }

    public String eliminarEspacios(EstructuraCampo estructura, String valor){
        String result= "";
        if (estructura.getCodTipoDato().equals("1")  ) {
           
           StringTokenizer token = new StringTokenizer(valor, " ");

            while(token.hasMoreElements()){
              
                result= result + token.nextElement();
            }
         } else {
            
            result = valor;}
        
         return(result);
    }

    public String transformarValor(String valor){
        
       m_Log.debug("<================= Valor que entra:"+valor);
       if(valor!=null){
          valor = valor.replace(".","");
          m_Log.debug("<================= Valor que sale:"+valor);
       }
       return valor;
    }
    
    
}

/* Generated by Together */
package es.altia.agora.interfaces.user.web.registro;

import es.altia.agora.business.escritorio.RegistroUsuarioValueObject;
import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.registro.RegistroEntradaSalidaValueObject;
import es.altia.agora.business.registro.ReservaOrdenValueObject;
import es.altia.agora.business.registro.persistence.RegistroAperturaCierreManager;
import es.altia.agora.business.registro.persistence.ReservaOrdenManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.technical.Fecha;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import java.util.Date;

import java.util.Vector;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class AperturaCierreRegistroAction extends ActionSession {

protected static Log m_Log =
        LogFactory.getLog(AperturaCierreRegistroAction.class.getName());

public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
        throws IOException, ServletException {

    m_Log.debug("================== AperturaCierreRegistroAction =================>");
    HttpSession session = request.getSession();

    // Validaremos los parametros del request especificados
    String opcion = "";
    UsuarioValueObject usuarioVO = null;
    RegistroUsuarioValueObject regUsuarioVO = null;

    if ((session.getAttribute("usuario") != null) && (session.getAttribute("registroUsuario") != null)) {

        int cod_dep;
        int cod_uni;

        usuarioVO = (UsuarioValueObject) session.getAttribute("usuario");
        regUsuarioVO = (RegistroUsuarioValueObject) session.getAttribute("registroUsuario");
        String[] params = usuarioVO.getParamsCon();
        cod_dep = regUsuarioVO.getDepCod();
        cod_uni = regUsuarioVO.getUnidadOrgCod();

        opcion = request.getParameter("opcion");
        if (m_Log.isInfoEnabled()) {
            m_Log.info("AperturaCierreRegistroAction --> perform con opcion: " + opcion);
        }
        AperturaCierreRegistroForm registroForm = null;
        RegistroEntradaSalidaValueObject elRegistroESVO = null;


        if (form == null) {
            m_Log.debug("Rellenamos el form de RegistroEntradaSalida");
            form = new AperturaCierreRegistroForm();
            if ("request".equals(mapping.getScope())) {
                request.setAttribute(mapping.getAttribute(), form);
            } else {
                session.setAttribute(mapping.getAttribute(), form);
            }
        }

        registroForm = (AperturaCierreRegistroForm) form;


        if (("init_apertura_entrada".equals(opcion)) ||
                ("init_apertura_salida".equals(opcion)) ||
                ("init_cierre_entrada".equals(opcion)) ||
                ("init_cierre_salida".equals(opcion))) {

            // Rellenamos el form AperturaCierreRegistroForm)

            elRegistroESVO = new RegistroEntradaSalidaValueObject(new Integer(cod_dep).toString(), new Integer(cod_uni).toString());
            elRegistroESVO.setOpcion(opcion);
            Fecha f = new Fecha();
            Date fSistema = new Date();
            String fechaActualServ = f.obtenerString(fSistema);
            RegistroAperturaCierreManager.getInstance().getRegistroValue(elRegistroESVO, params);
            if ("init_cierre_entrada".equals(opcion)) {
                // elRegistroESVO.setFec_apertura_cierre(elRegistroESVO.getDia_reg_UAE()+"/"+elRegistroESVO.getMes_reg_UAE()+"/"+elRegistroESVO.getAno_reg_UAE());
                elRegistroESVO.setFec_apertura_cierre(fechaActualServ);
            } else if ("init_cierre_salida".equals(opcion)) {
                //elRegistroESVO.setFec_apertura_cierre(elRegistroESVO.getDia_reg_UAS()+"/"+elRegistroESVO.getMes_reg_UAS()+"/"+elRegistroESVO.getAno_reg_UAS());
                elRegistroESVO.setFec_apertura_cierre(fechaActualServ);
            }

        // Suponemos que el formulario que hace la petición tiene bien cargado el VO.
        } else if ("abrir_entrada".equals(opcion)) {
            elRegistroESVO = registroForm.getRegistroEntradaSalida();
            elRegistroESVO.setOpcion(opcion);
            try {
                RegistroAperturaCierreManager.getInstance().updateRegistroValue(elRegistroESVO, params);
            } catch (Exception ce) {
                m_Log.error("AperturCierreRegistroAction problem" + ce.getMessage());
                opcion = "error_cerrar";
                elRegistroESVO.setOpcion("error_abrir_entrada");
            }

        } else if ("cerrar_entrada".equals(opcion)) {
            elRegistroESVO = registroForm.getRegistroEntradaSalida();
            elRegistroESVO.setOpcion(opcion);
            try {
                RegistroAperturaCierreManager.getInstance().updateRegistroValue(elRegistroESVO, params);
                if ("registro_cerrado".equals(elRegistroESVO.getOpcion())) {
                    opcion = "cerrar_entrada_denegado";
                    elRegistroESVO.setOpcion(opcion);
                }
                if (elRegistroESVO.getTotalReservas() > 0) {
                    opcion = "cerrar_entrada_denegado";
                    elRegistroESVO.setOpcion(opcion);
                }
            } catch (Exception ce) {
                m_Log.error("AperturCierreRegistroAction problem" + ce.getMessage());
                opcion = "error_cerrar";
                elRegistroESVO.setOpcion("error_cerrar_entrada");
            }

        // Anular reservas de salida y cerrar
        } else if ("anular_salida".equals(opcion)) {
            
            elRegistroESVO = registroForm.getRegistroEntradaSalida();
            opcion = "cerrar_salida";
            elRegistroESVO.setOpcion(opcion);
            
            try {
                // Recuperar reservas
                ReservaOrdenValueObject reservaVO = new ReservaOrdenValueObject();
                reservaVO.setCodDepto(Integer.parseInt(elRegistroESVO.getDep_cod()));
                reservaVO.setCodUnidad(Integer.parseInt(elRegistroESVO.getUni_cod()));
                reservaVO.setTipoReg("S");
                reservaVO.setFecha(elRegistroESVO.getFec_apertura_cierre());
                Vector<ReservaOrdenValueObject> reservas = 
                        ReservaOrdenManager.getInstance().cargarReservasPorFecha(reservaVO,params);
                
                // Anular reservas
                String diligencia = request.getParameter("diligencia");
                ReservaOrdenManager.getInstance().anularReservas(reservas, diligencia, usuarioVO, params);
                
                // Cerrar registro
                RegistroAperturaCierreManager.getInstance().updateRegistroValue(elRegistroESVO, params);
                // Comprobamos si el registro se ha cerrado correctamente
                if ("registro_cerrado".equals(elRegistroESVO.getOpcion())) {
                    opcion = "cerrar_salida_denegado";
                    elRegistroESVO.setOpcion(opcion);
                }
                if (elRegistroESVO.getTotalReservas() > 0) {
                    opcion = "cerrar_salida_denegado";
                    elRegistroESVO.setOpcion(opcion);
                }
                
            } catch (Exception e) {
                m_Log.error("AperturaCierreRegistroAction problem" + e.getMessage());
                e.printStackTrace();
                opcion = "error_cerrar";
                elRegistroESVO.setOpcion("error_cerrar_salida");
            }
            
        } else if ("abrir_salida".equals(opcion)) {

            elRegistroESVO = registroForm.getRegistroEntradaSalida();
            elRegistroESVO.setOpcion(opcion);
            try {
                RegistroAperturaCierreManager.getInstance().updateRegistroValue(elRegistroESVO, params);
            } catch (Exception ce) {
                m_Log.error("AperturCierreRegistroAction problem" + ce.getMessage());
                opcion = "error_cerrar";
                elRegistroESVO.setOpcion("error_abrir_salida");
            }

        } else if ("cerrar_salida".equals(opcion)) {

            elRegistroESVO = registroForm.getRegistroEntradaSalida();
            elRegistroESVO.setOpcion(opcion);
            try {
                RegistroAperturaCierreManager.getInstance().updateRegistroValue(elRegistroESVO, params);
                if ("registro_cerrado".equals(elRegistroESVO.getOpcion())) {
                    opcion = "cerrar_salida_denegado";
                    elRegistroESVO.setOpcion(opcion);
                }
                if (elRegistroESVO.getTotalReservas() > 0) {
                    opcion = "cerrar_salida_denegado";
                    elRegistroESVO.setOpcion(opcion);
                }
            } catch (Exception ce) {
                m_Log.error("AperturCierreRegistroAction problem" + ce.getMessage());
                opcion = "error_cerrar";
                elRegistroESVO.setOpcion("error_cerrar_salida");
            }

        // Anular reservas de salida o entrada y cerrar registro.
        } else if ("anular_salida".equals(opcion) || "anular_entrada".equals(opcion)) {
            
            elRegistroESVO = registroForm.getRegistroEntradaSalida();
            if ("anular_salida".equals(opcion)) {
                opcion = "cerrar_salida";
            } else {
               opcion = "cerrar_entrada"; 
            }
            elRegistroESVO.setOpcion(opcion);
            
            try {
                // Recuperar reservas
                ReservaOrdenValueObject reservaVO = new ReservaOrdenValueObject();
                reservaVO.setCodDepto(Integer.parseInt(elRegistroESVO.getDep_cod()));
                reservaVO.setCodUnidad(Integer.parseInt(elRegistroESVO.getUni_cod()));
                if ("cerrar_salida".equals(opcion)) {
                    reservaVO.setTipoReg("S");
                } else {
                    reservaVO.setTipoReg("E");
                }
                reservaVO.setFecha(elRegistroESVO.getFec_apertura_cierre());
                Vector<ReservaOrdenValueObject> reservas = 
                        ReservaOrdenManager.getInstance().cargarReservasPorFecha(reservaVO,params);
                
                // Anular reservas
                String diligencia = request.getParameter("diligencia");
                ReservaOrdenManager.getInstance().anularReservas(reservas, diligencia, usuarioVO, params);
                
                // Cerrar registro
                RegistroAperturaCierreManager.getInstance().updateRegistroValue(elRegistroESVO, params);
                
                // Comprobamos si el registro se ha cerrado correctamente
                if ("registro_cerrado".equals(elRegistroESVO.getOpcion())) {
                    if ("cerrar_salida".equals(opcion)) {
                        opcion = "cerrar_salida_denegado";
                    } else {
                        opcion = "cerrar_entrada_denegado";
                    }
                    elRegistroESVO.setOpcion(opcion);
                }
                if (elRegistroESVO.getTotalReservas() > 0) {
                    if ("cerrar_salida".equals(opcion)) {
                        opcion = "cerrar_salida_denegado";
                    } else {
                        opcion = "cerrar_entrada_denegado";
                    }
                    elRegistroESVO.setOpcion(opcion);
                }
                
            } catch (Exception e) {
                m_Log.error("AperturaCierreRegistroAction problem" + e.getMessage());
                e.printStackTrace();
                opcion = "error_cerrar";
                if ("cerrar_salida".equals(opcion)) {
                    elRegistroESVO.setOpcion("error_cerrar_salida");
                } else {
                    elRegistroESVO.setOpcion("error_cerrar_entrada");
                }
            }
            
        } else {
            if (m_Log.isDebugEnabled()) {
                m_Log.debug("AperturaCierreRegistroActionPerform --> opcion: no válida SIN IMPLEMENTAR");
            }
            opcion = "error";
        }

        /* Asignamos el AperturaCierreRegistro al formulario*/
        registroForm.setRegistroEntradaSalida(elRegistroESVO);
    /* Redirigimos al JSP de salida*/
    } else { // No hay usuario en la sesion.
        if (m_Log.isDebugEnabled()) {
            m_Log.debug("AperturaCierreRegistroActionPerform --> No hay usuario");
        }
        opcion = "no_usuario";
    }
    m_Log.debug("<================== AperturaCierreRegistroAction =================");
    return (mapping.findForward(opcion));
}
}

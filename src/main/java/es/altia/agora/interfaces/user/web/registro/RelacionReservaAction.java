
    /* Generated by Together */
    package es.altia.agora.interfaces.user.web.registro;

import es.altia.agora.business.escritorio.RegistroUsuarioValueObject;
import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.registro.ReservaOrdenValueObject;
import es.altia.agora.business.registro.persistence.ReservaOrdenManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;

import java.io.IOException;

import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

    public final class RelacionReservaAction extends ActionSession {
    protected static Log m_Log =
            LogFactory.getLog(RelacionReservaAction.class.getName());
    protected static Config registroCong = ConfigServiceHelper.getConfig("Registro");

    private final static String RESERVAS_POR_USUARIO="reservas_por_usuario";

     public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                    HttpServletResponse response) throws IOException, ServletException {

         m_Log.info("===================== RelacionReservaAction ===================>");
         HttpSession session = request.getSession();
        // Validaremos los parametros del request especificados

         String opcion = request.getParameter("opcion");
         if(m_Log.isInfoEnabled()) m_Log.info("Opcion: " + opcion);



         // Rellenamos el form de ReservaOrden
         if (form == null) {
         m_Log.debug("Rellenamos el form de RegistroSaida");
             form = new ReservaOrdenForm();
             if ("request".equals(mapping.getScope()))
                  request.setAttribute(mapping.getAttribute(), form);
             else
                  session.setAttribute(mapping.getAttribute(), form);
         }         

         if ( "salir".equals(opcion)){
             /* Borramos de la sesion el form y redirigimos al jsp de inicio*/
             session.removeAttribute("RelacionReservaForm");

         } else if ("anular".equals(opcion)) {
             
             ReservaOrdenForm reservaForm = (ReservaOrdenForm)form;
             ReservaOrdenValueObject reservaVO = reservaForm.getReserva();
             String diligencia = reservaForm.getDiligencia();
             
             UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
             String[] params = usuario.getParamsCon();

             try {
                 Vector<ReservaOrdenValueObject> vo = new Vector<ReservaOrdenValueObject>();
                 vo.add(reservaVO);
                 ReservaOrdenManager.getInstance().anularReservas(vo, diligencia, usuario, params);
             } catch (Exception e) {
                 m_Log.debug("<===================== RelacionReservaAction ===================");
                 return (mapping.findForward("falloAnular"));
             }

             ReservaOrdenManager.getInstance().loadRER(reservaVO,params);

             // Asignamos el vo con los resultados de cargar al formulario
             reservaForm.setReservaOrden(reservaVO);
             
         } else {
             ReservaOrdenForm reservaForm = (ReservaOrdenForm)form;
             ReservaOrdenValueObject reservaVO = new ReservaOrdenValueObject();
             ReservaOrdenManager reservaMan = ReservaOrdenManager.getInstance();

            /* Obtenemos ahora el ReservaOrden de la capa de negocio*/
             UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
             String[] params = usuario.getParamsCon();
             RegistroUsuarioValueObject registroUsuario = (RegistroUsuarioValueObject)session.getAttribute("registroUsuario");
             int codUnidad = registroUsuario.getUnidadOrgCod();
             int codDepto = registroUsuario.getDepCod();
             if(m_Log.isDebugEnabled()) {
                 m_Log.debug("El Codigo de departamento es ***************: " + codDepto);
                 m_Log.debug("Codigo de unidad: " + codUnidad);
             }
             String tipoReg=null;
             if (opcion.equals("cargarRERE") ) {
                 tipoReg = "E";
             }
             if(opcion.equals("cargarRERS") ) {
                 tipoReg= "S";
             }
             if(m_Log.isDebugEnabled()) m_Log.debug("El tipo de registro es " + tipoReg);
             session.setAttribute("tipoAnotacion",tipoReg);

             reservaVO.setTipoReg(tipoReg);
             reservaVO.setCodDepto(codDepto);
             reservaVO.setCodUnidad(codUnidad);

             if(opcion.equals("cargarRERE") || opcion.equals("cargarRERS")) {
                 reservaVO.setA(true);
                 reservaMan.loadRER(reservaVO,params);
             }

             /* Asignamos el ReservaOrden al formulario*/

             String reservaUsuario = registroCong.getString(usuario.getOrgCod()+"/"+RESERVAS_POR_USUARIO);
             
             if("SI".equals(reservaUsuario))reservaForm.setReservasPorUsuario(true);
             else reservaForm.setReservasPorUsuario(false);

             reservaForm.setReservaOrden(reservaVO);
      }
      /* Redirigimos al JSP de salida*/
     m_Log.info("<===================== RelacionReservaAction ===================");
      return (mapping.findForward(opcion));

    }

    }

/* Generated by Together */
package es.altia.agora.interfaces.user.web.terceros;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.business.terceros.persistence.TercerosManager;
import es.altia.agora.business.terceros.TercerosValueObject;
import es.altia.agora.business.terceros.DomicilioSimpleValueObject;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class BuscarTerceroDepuracionAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(BuscarTerceroDepuracionAction.class.getName());
    protected static Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("BuscarTerceroDepuracionAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
        }

        GeneralValueObject gVO = new GeneralValueObject();
        String codTercero = request.getParameter("codTercero");
        // Igual viene de la recarga a partir de copiar domicilios, donde se guardo el codigo de tercero en la sesion.
        if (codTercero == null || ("").equals(codTercero)) codTercero = (String)session.getAttribute("codTercero");
        gVO.setAtributo("codTercero", codTercero);
        Vector resultado = TercerosManager.getInstance().getTercerosSimilaresById(params, gVO);
        Vector terceros = new Vector();
        for (int i=0;i<resultado.size();i++) {
            TercerosValueObject terVO = (TercerosValueObject) ((Vector) resultado.get(i)).get(0);
            TerceroForm terceroForm = new TerceroForm();
            terceroForm.setTipoDocumento(terVO.getTipoDocumento());
            terceroForm.setTipoDocDesc(terVO.getTipoDocDesc());
            terceroForm.setDocumento(terVO.getDocumento());
            terceroForm.setCodTercero(terVO.getIdentificador());
            terceroForm.setNombre(terVO.getNombre());
            terceroForm.setApellido1(terVO.getApellido1());
            terceroForm.setApellido2(terVO.getApellido2());
            
            Vector domicilios = new Vector();
            Vector domiciliosTerc = terVO.getDomicilios();
            for (int j=0;j<domiciliosTerc.size();j++) {
                DomicilioSimpleValueObject domicilio = (DomicilioSimpleValueObject) domiciliosTerc.get(j);
                String direccion = construirDireccion(domicilio.getTipoVia(), domicilio.getDomicilio(), domicilio.getDescVia(), domicilio.getNumDesde(),
                        domicilio.getLetraDesde(), domicilio.getNumHasta(), domicilio.getLetraHasta(), domicilio.getBloque(),
                        domicilio.getPortal(), domicilio.getEscalera(), domicilio.getPlanta(), domicilio.getPuerta());
                DomicilioForm domicilioForm = new DomicilioForm();
                domicilioForm.setCodProvincia(domicilio.getIdProvincia());
                domicilioForm.setProvincia(domicilio.getProvincia());
                domicilioForm.setCodMunicipio(domicilio.getIdMunicipio());
                domicilioForm.setMunicipio(domicilio.getMunicipio());
                domicilioForm.setCodDomicilio(domicilio.getIdDomicilio());
                domicilioForm.setDomicilio(direccion);
                domicilioForm.setCp(domicilio.getCodigoPostal());
                 if (codTercero.equals(terceroForm.getCodTercero())) {
                domicilioForm.setEsPrincipal(terVO.getDomPrincipal().equals(domicilio.getIdDomicilio()) ? "1" : "0");
                 }
                domicilios.add(domicilioForm);
            }

            terceroForm.setDomicilios(domicilios);

            if (codTercero.equals(terceroForm.getCodTercero())) {
                session.setAttribute("DepuracionTerceros.tercero", terceroForm);
            } else {
                terceros.add(terceroForm);
            }
        }
        session.setAttribute("DepuracionTerceros.terceros", terceros);
        return (mapping.findForward("default"));
    }

    private String construirDireccion(String tipoVia, String domicilio, String nombreVia, String numDesde, String letraDesde,
                                      String numHasta, String letraHasta, String bloque, String portal, String escalera,
                                      String planta, String puerta) {

        StringBuffer dirBuffer = new StringBuffer();
        if (tipoVia != null && !tipoVia.trim().equals("")) dirBuffer.append(tipoVia).append(" ");
        if (domicilio != null && !domicilio.trim().equals("")) dirBuffer.append(domicilio).append(" ");
        else dirBuffer.append(nombreVia).append(" ");
        if (numDesde != null && !numDesde.trim().equals("")) dirBuffer.append(numDesde).append(" ");
        if (letraDesde != null && !letraDesde.trim().equals("")) dirBuffer.append(letraDesde).append(" ");
        if ((numHasta != null && !numHasta.trim().equals("")) || (letraHasta != null && !letraHasta.trim().equals(""))) {
            dirBuffer.append(" - ");
            if (numHasta != null && !numHasta.trim().equals("")) dirBuffer.append(numHasta).append(" ");
            if (letraHasta != null && !letraHasta.trim().equals("")) dirBuffer.append(letraHasta).append(" ");
        }
        if (bloque != null && !bloque.trim().equals("")) dirBuffer.append("BLQ. ").append(bloque).append(" ");
        if (portal != null && !portal.trim().equals("")) dirBuffer.append("POR. ").append(portal).append(" ");
        if (escalera != null && !escalera.trim().equals("")) dirBuffer.append("ESC. ").append(escalera).append(" ");
        if (planta != null && !planta.trim().equals("")) dirBuffer.append(planta).append("º ");
        if (puerta != null && !puerta.trim().equals("")) dirBuffer.append(puerta).append(" ");

        return dirBuffer.toString().trim();
    }
}
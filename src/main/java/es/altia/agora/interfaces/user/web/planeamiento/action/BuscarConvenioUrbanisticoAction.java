/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.RegistroValueObject;
import es.altia.agora.business.planeamiento.AnotacionRegistroValueObject;
import es.altia.agora.business.planeamiento.PromotorValueObject;
import es.altia.agora.business.planeamiento.AnotacionRectificacionRegistroValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantSubseccionValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantAmbitoValueObject;
import es.altia.agora.business.planeamiento.persistence.RegistroManager;
import es.altia.agora.business.planeamiento.persistence.AnotacionRegistroManager;
import es.altia.agora.business.planeamiento.persistence.PromotorManager;
import es.altia.agora.business.planeamiento.persistence.AnotacionRectificacionRegistroManager;
import es.altia.agora.business.terceros.persistence.TercerosManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.ConvenioUrbanisticoForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.AnotacionForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.PromotorForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.RectificacionForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.*;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class BuscarConvenioUrbanisticoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(BuscarConvenioUrbanisticoAction.class.getName());
    protected static Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("BuscarConvenioUrbanisticoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
        }

        ConvenioUrbanisticoForm convenioForm = (ConvenioUrbanisticoForm) form;
        ConvenioUrbanisticoForm convenioSessionForm = (ConvenioUrbanisticoForm)
                session.getAttribute("ConvenioUrbanisticoForm");
        Calendar fechaAprobacion = Calendar.getInstance();
        Calendar fechaBaja = Calendar.getInstance();
        Calendar fechaPublicacion = Calendar.getInstance();

        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        try{
            String fecha = convenioForm.getFechaAprobacion();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaAprobacion = null;
            } else {
                fechaAprobacion.setTime(format.parse(fecha));
            }
            fecha = convenioForm.getFechaBaja();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaBaja = null;
            } else {
                fechaBaja.setTime(format.parse(fecha));
            }
            fecha = convenioForm.getFechaPublicacion();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaPublicacion = null;
            } else {
                fechaPublicacion.setTime(format.parse(fecha));
            }
        } catch (Exception e) {//En principio nunca va a entrar
            e.printStackTrace();
            if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
        }
        Integer numero = null;
        if (convenioForm.getNumero()!=null && !convenioForm.getNumero().equals("")) {
            numero = new Integer(convenioForm.getNumero());
        }
        RegistroValueObject registroVO = new RegistroValueObject(
                new Character(convenioForm.getTipoRegistro().charAt(0)),
                convenioForm.getCodigoSubseccion(),
                null,
                numero, convenioForm.getAnho(), null, null,
                fechaAprobacion, null, fechaBaja, null, null,
                convenioForm.getCodigoAmbito(), convenioForm.getParcela(),
                null, convenioForm.getCodigoOrganoAprobacion(),
                convenioForm.getObjetoConvenio(), null, null, null, null, null, fechaPublicacion,
                convenioForm.getNumeroPublicacion(),
                convenioForm.getObservaciones(), convenioForm.getArchivo());
        Collection registrosConvenio = new ArrayList();
        Collection anotaciones = null;
        Collection rectificaciones = null;
        Collection firmantes = null;
        ConvenioUrbanisticoForm conUrbForm = null;
        Vector registros = RegistroManager.getInstance().findByAll(registroVO, params);


        /************Buscamos por firmante si es necesario, en cuyo caso filtramos los registros***************/
        Vector registrosFirmante = new Vector();
        Iterator promotoresIt = null;
        Iterator registrosIt = null;
        RegistroValueObject registro = null;
        PromotorValueObject promotorVO = null;
        firmantes = convenioSessionForm.getPartesFirmantes();
        if (firmantes!=null && !firmantes.isEmpty()) {
            promotoresIt = firmantes.iterator();
            Collection codigosPromotor = new ArrayList();
            while (promotoresIt.hasNext()) {
                PromotorForm promotorForm = (PromotorForm) promotoresIt.next();
                codigosPromotor.add(new Integer(promotorForm.getCodigo()));
            }
            registrosFirmante = PromotorManager.getInstance().findByPromotores(codigosPromotor, params);

            registrosIt = registros.iterator();
            registros = new Vector();
            while (registrosIt.hasNext()) {
                registro = (RegistroValueObject) registrosIt.next();
                promotorVO = new PromotorValueObject(registro.getTipoRegistro(), registro.getCodigoSubseccion(),
                        registro.getNumero(), registro.getAnho(), new Integer(-1));
                if (registrosFirmante.contains(promotorVO)) {
                    registros.add(registro);
                }
            }
        }

        /***************************************************************************************************/
        Iterator anotacionesIt = null;
        AnotacionRegistroValueObject anotacionVO = null;
        AnotacionForm anotacionForm = null;
        Iterator anotacionesRectificacionIt = null;
        AnotacionRectificacionRegistroValueObject anotacionRectificacionVO = null;
        RectificacionForm rectificacionForm = null;
        Iterator firmantesIt = null;
        PromotorForm promotorForm = null;

        //***** Para la busqueda por listado
        Iterator subseccionesIt = null;
        Iterator ambitosIt = null;
        MantSubseccionValueObject subseccionVO = null;
        MantAmbitoValueObject ambitoVO = null;
        //************
        registrosIt = registros.iterator();
        while (registrosIt.hasNext()) {
            registro = (RegistroValueObject) registrosIt.next();
            anotaciones = new ArrayList();
            anotacionesIt = AnotacionRegistroManager.getInstance().findByRegistro(registro.getTipoRegistro(),
                    registro.getCodigoSubseccion(), registro.getAnho(),
                    registro.getNumero(), params).iterator();
            while (anotacionesIt.hasNext()) {
                anotacionVO = (AnotacionRegistroValueObject) anotacionesIt.next();
                anotacionForm = new AnotacionForm();
                anotacionForm.setNumeroAnotacion(anotacionVO.getNumeroAnotacion());
                anotacionForm.setFechaAnotacion(format.format(anotacionVO.getFechaAnotacion().getTime()));
                anotacionForm.setComentarioAnotacion(anotacionVO.getObservaciones().replaceAll("\r\n", "@intro@"));
                anotaciones.add(anotacionForm);
            }
            rectificaciones = new ArrayList();
            anotacionesRectificacionIt = AnotacionRectificacionRegistroManager.getInstance().findByRegistro(registro.getTipoRegistro(),
                    registro.getCodigoSubseccion(), registro.getAnho(),
                    registro.getNumero(), params).iterator();
            while (anotacionesRectificacionIt.hasNext()) {
                anotacionRectificacionVO = (AnotacionRectificacionRegistroValueObject) anotacionesRectificacionIt.next();
                rectificacionForm = new RectificacionForm();
                rectificacionForm.setNumeroRectificacion(anotacionRectificacionVO.getNumeroAnotacion());
                rectificacionForm.setFechaRectificacion(format.format(anotacionRectificacionVO.getFechaAnotacion().getTime()));
                rectificacionForm.setComentarioRectificacion(anotacionRectificacionVO.getObservaciones().replaceAll("\r\n", "@intro@"));
                rectificaciones.add(rectificacionForm);
            }
            firmantes = new ArrayList();
            firmantesIt = PromotorManager.getInstance().findByRegistro(registro.getTipoRegistro(),
                    registro.getCodigoSubseccion(), registro.getAnho(),
                    registro.getNumero(), params).iterator();
            while (firmantesIt.hasNext()) {
                promotorVO = (PromotorValueObject) firmantesIt.next();
                promotorForm = new PromotorForm();
                promotorForm.setCodigo(promotorVO.getCodigo().toString());
                promotorForm.setDescripcion(TercerosManager.getInstance().getNombreTercero(
                        promotorVO.getCodigo().intValue(), params));
                firmantes.add(promotorForm);
            }
            conUrbForm = new ConvenioUrbanisticoForm();
            conUrbForm.setTipoRegistro(convenioForm.getTipoRegistro());
            conUrbForm.setCodigoSubseccion(registro.getCodigoSubseccion());
            conUrbForm.setObjetoConvenio(registro.getObjetoConvenio().replaceAll("\r\n", "@intro@"));
            conUrbForm.setNumero(registro.getNumero().toString());
            conUrbForm.setAnho(registro.getAnho());
            Calendar fecha = registro.getFechaAprobacion();
            String stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            conUrbForm.setFechaAprobacion(stringFecha);
            fecha = registro.getFechaBaja();
            stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            conUrbForm.setFechaBaja(stringFecha);
            conUrbForm.setCodigoAmbito(registro.getCodigoAmbito());
            String parcela = registro.getParcela();
            if (parcela==null) {
                parcela = "";
            }
            conUrbForm.setParcela(parcela);
            conUrbForm.setCodigoOrganoAprobacion(registro.getCodigoOrganoAprobacion());
            fecha = registro.getFechaPublicacion();
            stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            conUrbForm.setFechaPublicacion(stringFecha);
            conUrbForm.setNumeroPublicacion(registro.getNumeroPublicacion());
            String observaciones = registro.getObservaciones();
            if (observaciones!=null && !observaciones.equals("")) {
                observaciones = observaciones.replaceAll("\r\n", "@intro@");
            }
            conUrbForm.setObservaciones(observaciones);
            String file = registro.getArchivo();
            if (file!=null && !file.equals("")) {
                file = file.replaceAll("\r\n", "@intro@");
            }
            conUrbForm.setArchivo(file);
            conUrbForm.setAnotaciones(anotaciones);
            conUrbForm.setRectificaciones(rectificaciones);
            conUrbForm.setSubsecciones(convenioSessionForm.getSubsecciones());
            conUrbForm.setAmbitos(convenioSessionForm.getAmbitos());
            conUrbForm.setOrganosAprobacion(convenioSessionForm.getOrganosAprobacion());
            conUrbForm.setPartesFirmantes(firmantes);

            //Si la salida es un listado necesitamos los nombres
            if (request.getParameter("listado").equals("true")) {
                subseccionesIt = convenioSessionForm.getSubsecciones().iterator();
                while (subseccionesIt.hasNext()) {
                    subseccionVO = (MantSubseccionValueObject) subseccionesIt.next();
                    if (subseccionVO.getCodigo().equals(conUrbForm.getCodigoSubseccion())) {
                        conUrbForm.setSubseccion(subseccionVO.getDescripcion());
                        break;
                    }
                }

                ambitosIt = convenioSessionForm.getAmbitos().iterator();
                while (ambitosIt.hasNext()) {
                    ambitoVO = (MantAmbitoValueObject) ambitosIt.next();
                    if (ambitoVO.getCodigo().equals(conUrbForm.getCodigoAmbito())) {
                        conUrbForm.setAmbito(ambitoVO.getDescripcion());
                        break;
                    }
                }
            }
            registrosConvenio.add(conUrbForm);
        }
        session.setAttribute("registrosConvenio", registrosConvenio);
        session.setAttribute("criteriosConvenio", setCriteriosBusqueda(convenioForm));
        Iterator registrosConvenioIt = registrosConvenio.iterator();
        if (registrosConvenioIt.hasNext()) {
            conUrbForm = (ConvenioUrbanisticoForm) registrosConvenioIt.next();
            conUrbForm.setFirmante(m_ConfigTechnical.getString("Planeamiento.Firmante"));
            session.setAttribute("ConvenioUrbanisticoForm", conUrbForm);
            request.setAttribute("registroActual", "1");
            String nombreFirmante = "";
            firmantesIt = conUrbForm.getPartesFirmantes().iterator();
            if (firmantesIt.hasNext()) {
                nombreFirmante = ((PromotorForm) firmantesIt.next()).getDescripcion();
            }
            request.setAttribute("nombreFirmante", nombreFirmante);
        } else {
            request.setAttribute("registroActual", "-1");
        }

        if (request.getParameter("listado").equals("true")) {
            return (mapping.findForward("listado"));
        }
        return (mapping.findForward("default"));
    }

    //Funcion que permite fijar los criterios de busqueda para ser utilizados en los informes de impresion
    private HashMap setCriteriosBusqueda(ConvenioUrbanisticoForm convenioForm){
        HashMap criterios = new HashMap();

        if (convenioForm.getCodigoSubseccion()!=null && !convenioForm.getCodigoSubseccion().equals("")) {
            criterios.put("subseccion", convenioForm.getSubseccion());
        }
        if (convenioForm.getObjetoConvenio()!=null && !convenioForm.getObjetoConvenio().equals("")) {
            criterios.put("objetoConvenio", convenioForm.getObjetoConvenio());
        }
        if (convenioForm.getCodigoAmbito()!=null && !convenioForm.getCodigoAmbito().equals("")) {
            criterios.put("ambito", convenioForm.getAmbito());
        }
        if (convenioForm.getParcela()!=null && !convenioForm.getParcela().equals("")) {
            criterios.put("parcela", convenioForm.getParcela());
        }
        if (convenioForm.getFirmante()!=null && !convenioForm.getFechaAprobacion().equals("")) {
            criterios.put("firmante", convenioForm.getFirmante());
        }
        if (convenioForm.getCodigoOrganoAprobacion()!=null && !convenioForm.getCodigoOrganoAprobacion().equals("")) {
            criterios.put("organoAprobacion", convenioForm.getOrganoAprobacion());
        }
        if (convenioForm.getFechaAprobacion()!=null && !convenioForm.getFechaAprobacion().equals("")) {
            criterios.put("fechaAprobacion", convenioForm.getFechaAprobacion());
        }
        if (convenioForm.getFechaBaja()!=null && !convenioForm.getFechaBaja().equals("")) {
            criterios.put("fechaBaja", convenioForm.getFechaBaja());
        }
        if (convenioForm.getFechaPublicacion()!=null && !convenioForm.getFechaPublicacion().equals("")) {
            criterios.put("fechaPublicacion", convenioForm.getFechaPublicacion());
        }
        if (convenioForm.getNumeroPublicacion()!=null && !convenioForm.getNumeroPublicacion().equals("")) {
            criterios.put("numeroPublicacion", convenioForm.getNumeroPublicacion());
        }
        if (convenioForm.getObservaciones()!=null && !convenioForm.getObservaciones().equals("")) {
            criterios.put("observaciones", convenioForm.getObservaciones());
        }
        if (convenioForm.getArchivo()!=null && !convenioForm.getArchivo().equals("")) {
            criterios.put("archivo", convenioForm.getArchivo());
        }

        return criterios;
    }
}
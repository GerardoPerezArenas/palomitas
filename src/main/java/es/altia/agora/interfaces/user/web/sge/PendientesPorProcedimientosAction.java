  /* Generated by Together */
package es.altia.agora.interfaces.user.web.sge;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.sge.PendientesPorProcedimientosValueObject;
import es.altia.agora.business.sge.persistence.PendientesPorProcedimientosManager;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

    public final class PendientesPorProcedimientosAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(PendientesPorProcedimientosAction.class.getName());

        public ActionForward performSession(	ActionMapping mapping,
                    ActionForm form,
                    HttpServletRequest request,
                    HttpServletResponse response) throws IOException, ServletException {

      m_Log.debug("perform");
      ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));


            // Validaremos los parametros del request especificados
      HttpSession session = request.getSession();
      String opcion ="";

      if ((session.getAttribute("usuario") != null)) {
        UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
        String[] params = usuario.getParamsCon();
        int cod_dep;
        int cod_uni;
        int munic = 0;
        cod_dep= usuario.getDepCod();
        cod_uni= usuario.getUnidadOrgCod();
        munic = usuario.getOrgCod();
        String municipio = Integer.toString(munic);

        // Si usuario en sesion es nulo --> error.

        ActionErrors errors = new ActionErrors();

        PendientesPorProcedimientosValueObject pendProcVO = new PendientesPorProcedimientosValueObject();
        PendientesPorProcedimientosForm pendProcForm = null;

        if (form == null) {
          m_Log.debug("Rellenamos el form de Pendientes por procedimientos");
          form = new PendientesPorProcedimientosForm();
          if ("request".equals(mapping.getScope()))
            request.setAttribute(mapping.getAttribute(), form);
          else
            session.setAttribute(mapping.getAttribute(), form);
        }

        pendProcForm = (PendientesPorProcedimientosForm)form;

        opcion = request.getParameter("opcion");
        if (m_Log.isInfoEnabled()) m_Log.info("la opcion en el action es " + opcion);


      if (opcion.equals("inicio")){
        pendProcVO.setCodMunicipio(municipio);
        // Cargar listas.
        pendProcVO.setListaProcedimientos(PendientesPorProcedimientosManager.getInstance().getListaProcedimientos(pendProcVO,params));

        pendProcForm.setPendientesPorProcedimientos(pendProcVO);

        opcion = "inicio";
      } else if(opcion.equals("inicioF")){
        pendProcVO.setCodMunicipio(municipio);
        // Cargar listas.
        pendProcVO.setListaProcedimientos(PendientesPorProcedimientosManager.getInstance().getListaProcedimientos(pendProcVO,params));

        pendProcForm.setPendientesPorProcedimientos(pendProcVO);

        opcion = "inicioF";
      } else if(opcion.equals("consultarP")){
        pendProcVO = pendProcForm.getPendientesPorProcedimientos();
        Vector consulta = new Vector();
        consulta = PendientesPorProcedimientosManager.getInstance().consultarP(pendProcVO,params);
        for(int i=0;i<consulta.size();i++) {
          PendientesPorProcedimientosValueObject pPVO = new PendientesPorProcedimientosValueObject();
          pPVO = (PendientesPorProcedimientosValueObject) consulta.elementAt(i);
          String fechaFin = pPVO.getFechaFin();
          opcion = "consultarP";
        }
        if(consulta.size() !=0) {
          pendProcVO.setConsulta(consulta);
          pendProcForm.setPendientesPorProcedimientos(pendProcVO);
        } else {
          opcion = "noConsulta";
        }
      } else if(opcion.equals("consultarF")) {
        pendProcVO = pendProcForm.getPendientesPorProcedimientos();
        Vector consulta = new Vector();
        consulta = PendientesPorProcedimientosManager.getInstance().consultarF(pendProcVO,params);
        for(int i=0;i<consulta.size();i++) {
          PendientesPorProcedimientosValueObject pPVO = new PendientesPorProcedimientosValueObject();
          pPVO = (PendientesPorProcedimientosValueObject) consulta.elementAt(i);
          String fechaFin = pPVO.getFechaFin();
          opcion = "consultarF";
        }
        if(consulta.size() !=0) {
          pendProcVO.setConsulta(consulta);
          pendProcForm.setPendientesPorProcedimientos(pendProcVO);
        } else {
          opcion = "noConsulta";
        }
      }
   } else { // No hay usuario.
             m_Log.debug("MantAnotacionRegistroAction --> no hay usuario");
              opcion = "no_usuario";
   }

    /* Redirigimos al JSP de salida*/
        return (mapping.findForward(opcion));

  }
}
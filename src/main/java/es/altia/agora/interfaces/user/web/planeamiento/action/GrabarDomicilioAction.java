/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.sge.persistence.*;
import es.altia.agora.business.terceros.*;
import es.altia.agora.business.terceros.persistence.*;
import es.altia.agora.business.util.*;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class GrabarDomicilioAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(GrabarDomicilioAction.class.getName());
    String codPais = "";
    String codProvincia = "";
    String codMunicipio = "";

    public ActionForward performSession(	ActionMapping mapping,
                                            ActionForm form,
                                            HttpServletRequest request,
                                            HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("GrabarDomicilioAction.perform");
        // Validaremos los parametros del request especificados
        HttpSession session = request.getSession();
        int codLocalizacion = 0;

        if ((session.getAttribute("usuario") != null)) {
            UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
            String[] params = usuario.getParamsCon();
            ParametrosTerceroValueObject paramsTercero = (ParametrosTerceroValueObject)session.getAttribute("parametrosTercero");
            codPais = paramsTercero.getPais();
            codProvincia = paramsTercero.getProvincia();
            codMunicipio = paramsTercero.getMunicipio();
            // Si usuario en sesion es nulo --> error.

            ActionErrors errors = new ActionErrors();

            GeneralValueObject gVO = new GeneralValueObject();
            String codLocalizacionVieja = request.getParameter("codLocalizacion");
            //String localizacion = request.getParameter("txtDomicilio");
            String localizacion = request.getParameter("descLocalizacionNueva");
            gVO.setAtributo("codMunicipio",codMunicipio);
            gVO.setAtributo("codLocalizacion",codLocalizacionVieja);
            gVO.setAtributo("localizacion",localizacion);
            gVO.setAtributo("codPais",request.getParameter("codPais"));
            gVO.setAtributo("codProvincia",request.getParameter("codProvincia"));
            gVO.setAtributo("codMunicipio",request.getParameter("codMunicipio"));
            gVO.setAtributo("codUsuario",Integer.toString(usuario.getIdUsuario()));

            int resultado = 0;
            TercerosManager terMan = TercerosManager.getInstance();
            if (codLocalizacionVieja!=null && !codLocalizacionVieja.equals("")) {
                terMan.eliminarDomiciliosNoNormalizado(gVO, params);
            }
            if (m_Log.isDebugEnabled()) m_Log.debug("GrabarDomicilioAction. Grabar localizacion: codLocalizacion /" + codLocalizacionVieja +"/");

            // Grabar localizacion como domicilio no normalizado
            String codVia = request.getParameter("txtCodViaOculto");
            String descVia = request.getParameter("txtNombreVia");
            String codTipoVia = request.getParameter("codTVia");
            String descTipoVia = request.getParameter("descTVia");
            String numDesde = request.getParameter("txtNumDesde");
            String letraDesde = request.getParameter("txtLetraDesde");
            String numHasta = request.getParameter("txtNumHasta");
            String letraHasta = request.getParameter("txtLetraHasta");
            String bloque = request.getParameter("txtBloque");
            String portal = request.getParameter("txtPortal");
            String escalera = request.getParameter("txtEsc");
            String planta = request.getParameter("txtPlta");
            String puerta = request.getParameter("txtPta");
            String km = request.getParameter("txtKm");
            String hm = request.getParameter("txtHm");
            String domicilio = request.getParameter("txtDomicilio");
            String refCatastral = request.getParameter("txtRefCatastral");
            String codPostal = request.getParameter("descPostal");
            gVO.setAtributo("codVia",codVia);
            gVO.setAtributo("descVia",descVia);
            gVO.setAtributo("codTipoVia",codTipoVia);
            gVO.setAtributo("descTipoVia",descTipoVia);
            gVO.setAtributo("numDesde",numDesde);
            gVO.setAtributo("letraDesde",letraDesde);
            gVO.setAtributo("numHasta",numHasta);
            gVO.setAtributo("letraHasta",letraHasta);
            gVO.setAtributo("bloque",bloque);
            gVO.setAtributo("portal",portal);
            gVO.setAtributo("escalera",escalera);
            gVO.setAtributo("planta",planta);
            gVO.setAtributo("puerta",puerta);
            gVO.setAtributo("km",km);
            gVO.setAtributo("hm",hm);
            gVO.setAtributo("domicilio",domicilio);
            gVO.setAtributo("refCatastral",refCatastral);
            gVO.setAtributo("codPostal",codPostal);
            /* anadir ECO/ESI */
            String codECO = request.getParameter("codECO");
            String codESI = request.getParameter("codESI");
            gVO.setAtributo("codECO", codECO);
            gVO.setAtributo("codESI", codESI);
            /* fin anadir ECO/ESI */
            if (m_Log.isDebugEnabled()) m_Log.debug("GrabarDomicilioAction. codECO: " + codECO + " , codESI: " + codESI + " , codVia: "  + codVia);
            boolean grabarLoc = true;
            if ((descVia == null && domicilio == null) || ("".equals(descVia) && "".equals(domicilio))){
                grabarLoc = false;
                m_Log.error("No se esta grabando la localizacion. Es necesario especificar via o domicilio");
            }
            if (grabarLoc) {
                codLocalizacion = terMan.grabarDomiciliosNoNormalizados(gVO,params);

            }  else {
                m_Log.error("No se esta grabando la localizacion.");
            }
        }
        request.setAttribute("codigoLocalizacion", Integer.toString(codLocalizacion));
        /* Redirigimos al JSP de salida*/
        return (mapping.findForward("default"));
    }
}

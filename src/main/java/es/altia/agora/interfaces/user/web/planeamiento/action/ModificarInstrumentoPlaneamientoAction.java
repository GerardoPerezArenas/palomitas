/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.RegistroValueObject;
import es.altia.agora.business.planeamiento.AnotacionRegistroValueObject;
import es.altia.agora.business.planeamiento.PromotorValueObject;
import es.altia.agora.business.planeamiento.AnotacionRectificacionRegistroValueObject;
import es.altia.agora.business.planeamiento.persistence.RegistroPlaneamientoManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.InstrumentoPlaneamientoForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.AnotacionForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.PromotorForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.RectificacionForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import es.altia.util.exceptions.InternalErrorException;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Collection;
import java.util.ArrayList;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class ModificarInstrumentoPlaneamientoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(ModificarInstrumentoPlaneamientoAction.class.getName());
    protected static Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        try {
            m_Log.info("ModificarInstrumentoPlaneamientoAction.perform");
            String[] params = null;
            HttpSession session = request.getSession();

            if (session.getAttribute("usuario") != null){
                UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
                params = usuarioVO.getParamsCon();
            }

            InstrumentoPlaneamientoForm instrumentoForm = (InstrumentoPlaneamientoForm) form;
            InstrumentoPlaneamientoForm instrumentoSessionForm = (InstrumentoPlaneamientoForm)
                    session.getAttribute("InstrumentoPlaneamientoForm");
            Calendar fechaAlta = Calendar.getInstance();
            Calendar fechaAprobacion = Calendar.getInstance();
            Calendar fechaVigencia = Calendar.getInstance();
            Calendar fechaBaja = Calendar.getInstance();
            Calendar fechaPublicacion = Calendar.getInstance();

            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            try {
                String fecha = instrumentoForm.getFechaAprobacion();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaAprobacion = null;
                } else {
                    fechaAprobacion.setTime(format.parse(fecha));
                }
                fecha = instrumentoForm.getFechaVigencia();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaVigencia = null;
                } else {
                    fechaVigencia.setTime(format.parse(fecha));
                }
                fecha = instrumentoForm.getFechaBaja();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaBaja = null;
                } else {
                    fechaBaja.setTime(format.parse(fecha));
                }
                fecha = instrumentoForm.getFechaPublicacion();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaPublicacion = null;
                } else {
                    fechaPublicacion.setTime(format.parse(fecha));
                }
            } catch (Exception e) {//En principio nunca va a entrar
                e.printStackTrace();
                if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
            }
            String numeroRegistro = instrumentoSessionForm.getNumeroRegistro();
            if (numeroRegistro==null ||numeroRegistro.equals("")) {
                numeroRegistro = instrumentoForm.getAnho() + "/" + instrumentoForm.getNumero();
            }
            String observaciones = instrumentoForm.getObservaciones();
            if (observaciones!=null && !observaciones.equals("")) {
                observaciones = observaciones.replaceAll("@intro@", "\r\n");
            }
            String file = instrumentoForm.getArchivo();
            if (file!=null && !file.equals("")) {
                file = file.replaceAll("@intro@", "\r\n");
            }
            Integer numeroProcedimiento = null;
            if (instrumentoForm.getNumeroProcedimiento()!=null && !instrumentoForm.getNumeroProcedimiento().equals("")) {
                numeroProcedimiento = new Integer(instrumentoForm.getNumeroProcedimiento());
            }
            RegistroValueObject registroVO = new RegistroValueObject(
                    new Character(instrumentoForm.getTipoRegistro().charAt(0)),
                    instrumentoForm.getCodigoSubseccion(), instrumentoForm.getCodigoTipo(),
                    new Integer(instrumentoForm.getNumero()), instrumentoForm.getAnho(),
                    numeroRegistro, fechaAlta, fechaAprobacion, fechaVigencia, fechaBaja,
                    instrumentoForm.getCodigoProcedimiento(), numeroProcedimiento, instrumentoForm.getCodigoAmbito(),
                    instrumentoForm.getParcela(), new Character(instrumentoForm.getPromotor().charAt(0)),
                    instrumentoForm.getCodigoOrganoAprobacion(), null, null, null, null, null, null, fechaPublicacion,
                    instrumentoForm.getNumeroPublicacion(), observaciones, file);

            Iterator anotacionesIt = instrumentoSessionForm.getAnotaciones().iterator();
            Collection anotaciones = new ArrayList();
            AnotacionRegistroValueObject anotacionVO = null;
            AnotacionForm anotacionForm = null;
            Calendar fechaAnotacion = null;
            Iterator anotacionesRectificacionIt = instrumentoSessionForm.getRectificaciones().iterator();
            Collection anotacionesRectificacion = new ArrayList();
            AnotacionRectificacionRegistroValueObject anotacionRectificacionVO = null;
            RectificacionForm rectificacionForm = null;
            while (anotacionesIt.hasNext()) {
                anotacionForm = (AnotacionForm) anotacionesIt.next();
                fechaAnotacion = Calendar.getInstance();
                try {
                    String fecha = anotacionForm.getFechaAnotacion();
                    if ((fecha==null) || (fecha.equals(""))) {
                        fechaAnotacion = null;
                    } else {
                        fechaAnotacion.setTime(format.parse(fecha));
                    }
                } catch (Exception e) {//En principio nunca va a entrar
                    e.printStackTrace();
                    if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                }
                anotacionVO = new AnotacionRegistroValueObject(new Character(instrumentoForm.getTipoRegistro().charAt(0)),
                        instrumentoForm.getCodigoSubseccion(),
                        new Integer(instrumentoForm.getNumero()),
                        instrumentoForm.getAnho(), anotacionForm.getNumeroAnotacion(), fechaAnotacion,
                        anotacionForm.getComentarioAnotacion().replaceAll("@intro@", "\r\n"));
                anotaciones.add(anotacionVO);
            }

            while (anotacionesRectificacionIt.hasNext()) {
                rectificacionForm = (RectificacionForm) anotacionesRectificacionIt.next();
                fechaAnotacion = Calendar.getInstance();
                try {
                    String fecha = rectificacionForm.getFechaRectificacion();
                    if ((fecha==null) || (fecha.equals(""))) {
                        fechaAnotacion = null;
                    } else {
                        fechaAnotacion.setTime(format.parse(fecha));
                    }
                } catch (Exception e) {//En principio nunca va a entrar
                    e.printStackTrace();
                    if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                }
                anotacionRectificacionVO = new AnotacionRectificacionRegistroValueObject(
                        new Character(instrumentoForm.getTipoRegistro().charAt(0)),
                        instrumentoForm.getCodigoSubseccion(),
                        new Integer(instrumentoForm.getNumero()),
                        instrumentoForm.getAnho(), rectificacionForm.getNumeroRectificacion(), fechaAnotacion,
                        rectificacionForm.getComentarioRectificacion().replaceAll("@intro@", "\r\n"));
                anotacionesRectificacion.add(anotacionRectificacionVO);
            }

            Collection promotores = new ArrayList();
            String codigoPromotor;

            /*Si el promotor es alguno de los contenidos en Planeamiento.Promotores.NoPromotores no se deberian insertar
            * lo que venga en getCodigosPromotor. Ej: Ayuntamiento de Ecija
            */
            String promotor = instrumentoForm.getPromotor();
            boolean noPromotores = false;
            Iterator noPromotoresColIt =
                    m_ConfigTechnical.getCollection("Planeamiento.Promotores.NoPromotores").iterator();
            while (noPromotoresColIt.hasNext()) {
                codigoPromotor = (String) noPromotoresColIt.next();
                if (promotor.equals(codigoPromotor)) {
                    noPromotores = true;
                    break;
                }
            }

            if (!noPromotores) {
                if (instrumentoSessionForm.getCodigosPromotor().isEmpty()) {
                    return (mapping.findForward("promotoresNoExisten"));
                }
                Iterator promotoresIt = instrumentoSessionForm.getCodigosPromotor().iterator();
                PromotorValueObject promotorVO = null;
                PromotorForm promotorForm = null;
                while (promotoresIt.hasNext()) {
                    promotorForm = (PromotorForm) promotoresIt.next();
                    promotorVO = new PromotorValueObject(new Character(instrumentoForm.getTipoRegistro().charAt(0)),
                            instrumentoForm.getCodigoSubseccion(),
                            new Integer(instrumentoForm.getNumero()),
                            instrumentoForm.getAnho(), new Integer(promotorForm.getCodigo()));
                    promotores.add(promotorVO);
                }
            }

            RegistroPlaneamientoManager.getInstance().modify(registroVO, anotaciones, anotacionesRectificacion,
                    promotores, params);

            Iterator registrosPlaneamientoIt = ((Collection) session.getAttribute("registrosPlaneamiento")).iterator();
            InstrumentoPlaneamientoForm insForm = null;
            Collection registrosPlaneamiento = new ArrayList();
            while (registrosPlaneamientoIt.hasNext()) {
                insForm = (InstrumentoPlaneamientoForm) registrosPlaneamientoIt.next();
                if (insForm.getNumero().equals(instrumentoForm.getNumero()) &&
                        insForm.getAnho().equals(instrumentoForm.getAnho()) &&
                        insForm.getCodigoSubseccion().equals(instrumentoForm.getCodigoSubseccion()) &&
                        insForm.getCodigoTipo().equals(instrumentoForm.getCodigoTipo())) {
                    insForm.setCodigoProcedimiento(instrumentoForm.getCodigoProcedimiento());
                    insForm.setProcedimiento(instrumentoForm.getProcedimiento());
                    insForm.setNumeroProcedimiento(instrumentoForm.getNumeroProcedimiento());
                    insForm.setCodigoAmbito(instrumentoForm.getCodigoAmbito());
                    insForm.setAmbito(instrumentoForm.getAmbito());
                    insForm.setParcela(instrumentoForm.getParcela());
                    insForm.setPromotor(instrumentoForm.getPromotor());
                    insForm.setCodigoOrganoAprobacion(instrumentoForm.getCodigoOrganoAprobacion());
                    insForm.setOrganoAprobacion(instrumentoForm.getOrganoAprobacion());
                    insForm.setFechaVigencia(instrumentoForm.getFechaVigencia());
                    insForm.setFechaAprobacion(instrumentoForm.getFechaAprobacion());
                    insForm.setFechaBaja(instrumentoForm.getFechaBaja());
                    insForm.setFechaPublicacion(instrumentoForm.getFechaPublicacion());
                    insForm.setNumeroPublicacion(instrumentoForm.getNumeroPublicacion());
                    insForm.setObservaciones(instrumentoForm.getObservaciones().replaceAll("\r\n", "@intro@"));
                    insForm.setArchivo(instrumentoForm.getArchivo().replaceAll("\r\n", "@intro@"));
                    insForm.setAnotaciones(instrumentoSessionForm.getAnotaciones());
                    insForm.setRectificaciones(instrumentoSessionForm.getRectificaciones());
                    insForm.setCodigosPromotor(instrumentoSessionForm.getCodigosPromotor());
                }
                registrosPlaneamiento.add(insForm);
            }
            session.setAttribute("registrosPlaneamiento", registrosPlaneamiento);
            return (mapping.findForward("default"));
        } catch (InternalErrorException e) {
            return (mapping.findForward("errorModificacion"));
        }
    }
}
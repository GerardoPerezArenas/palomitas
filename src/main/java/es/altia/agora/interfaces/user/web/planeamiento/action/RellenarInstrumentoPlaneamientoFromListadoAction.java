/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.InstrumentoPlaneamientoForm;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class RellenarInstrumentoPlaneamientoFromListadoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(RellenarInstrumentoPlaneamientoFromListadoAction.class.getName());

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("RellenarInstrumentoPlaneamientoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        Iterator registrosPlaneamientoIt = ((Collection) session.getAttribute("registrosPlaneamiento")).iterator();
        InstrumentoPlaneamientoForm instrumentoForm = (InstrumentoPlaneamientoForm) form;
        StringTokenizer st = new StringTokenizer(instrumentoForm.getNumeroRegistro(), "/");
        String anho = (String) st.nextElement();
        Integer numero = new Integer((String) st.nextElement());
        InstrumentoPlaneamientoForm insForm = null;
        int i=1;
        while (registrosPlaneamientoIt.hasNext()) {
            insForm = (InstrumentoPlaneamientoForm) registrosPlaneamientoIt.next();
            if (insForm.getAnho().equals(anho) && insForm.getNumero().equals(numero.toString()) &&
                    insForm.getCodigoSubseccion().equals(instrumentoForm.getCodigoSubseccion()) &&
                    insForm.getCodigoTipo().equals(instrumentoForm.getCodigoTipo())) {
                session.setAttribute("InstrumentoPlaneamientoForm", insForm);
                request.setAttribute("registroActual", (new Integer(i).toString()));
                break;
            }
            i++;
        }

        return (mapping.findForward("default"));
    }
}

/* Generated by Together */
package es.altia.agora.interfaces.user.web.sge; 

import com.google.gson.Gson;
import es.altia.agora.business.administracion.mantenimiento.CamposListadoParametrizablesProcedimientoVO;
import es.altia.agora.business.administracion.mantenimiento.CriterioBusquedaPendientesVO;
import es.altia.agora.business.administracion.mantenimiento.ValoresCriterioBusquedaExpPendientesVO;
import es.altia.agora.business.administracion.mantenimiento.persistence.ParametrosManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.UORsManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.UsuariosGruposManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.manual.UORDTO;
import es.altia.agora.business.administracion.mantenimiento.persistence.manual.UORsDAO;
import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.registro.DocumentoValueObject;
import es.altia.agora.business.registro.RegistroValueObject;
import es.altia.agora.business.registro.SimpleRegistroValueObject;
import es.altia.agora.business.registro.mantenimiento.persistence.MantAsuntosManager;
import es.altia.agora.business.registro.mantenimiento.persistence.MantClasifAsuntosManager;
import es.altia.agora.business.registro.persistence.AnotacionRegistroManager;
import es.altia.agora.business.registro.persistence.AuditoriaManager;
import es.altia.agora.business.sge.ConsultaExpedientesValueObject;
import es.altia.agora.business.sge.DefinicionProcedimientosValueObject;
import es.altia.agora.business.sge.TramitacionValueObject;
import es.altia.agora.business.sge.exception.TramitacionException;
import es.altia.agora.business.sge.manager.visorregistro.VisorRegistroManager;
import es.altia.agora.business.sge.persistence.ConsultaExpedientesManager;
import es.altia.agora.business.sge.persistence.InteresadosManager;
import es.altia.agora.business.sge.persistence.TramitacionManager;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.interfaces.user.web.registro.MantAnotacionRegistroForm;
import es.altia.agora.interfaces.user.web.util.ActionSession; 
import es.altia.agora.technical.ConstantesDatos;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import es.altia.agora.business.sge.InteresadoExpedienteVO;
import es.altia.agora.business.sge.persistence.CamposListadoPendientesProcedimientoManager;
import es.altia.agora.business.sge.persistence.DefinicionProcedimientosManager;
import es.altia.agora.business.sge.persistence.TecnicoReferenciaManager;
import es.altia.common.util.UtilidadesRegistro;
import es.altia.flexia.expedientes.relacionados.historico.factoria.PluginExpedientesRelacionadosHistoricoFactoria;
import es.altia.flexia.expedientes.relacionados.historico.plugin.PluginBusquedaExpedientesRelacionadosHistorico;
import es.altia.flexia.expedientes.relacionados.historico.plugin.PluginExpedientesRelacionadosHistorico;
import es.altia.flexia.expedientes.relacionados.historico.util.ResultadoPluginExpRelHist;
import es.altia.flexia.expedientes.relacionados.historico.vo.ExpedientesAsociadosVO;
import es.altia.flexia.expedientes.relacionados.historico.vo.ExpedientesRelacionadosHistoricoVO;

import java.io.IOException;

import java.io.PrintWriter;
import java.util.*;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;

import es.altia.agora.business.util.ElementoListaValueObject;
import es.altia.util.commons.DateOperations;
import es.altia.util.conexion.AdaptadorSQLBD;
import es.altia.common.service.auditoria.ConstantesAuditoria;
import es.altia.flexia.registro.digitalizacion.lanbide.persistence.DigitalizacionDocumentosLanbideManager;
import es.altia.util.conexion.BDException;
import java.sql.Connection;
import java.sql.SQLException;

  public final class TramitacionAction extends ActionSession { 

      protected static Config registroCong = ConfigServiceHelper.getConfig("Registro");

      public ActionForward performSession(	ActionMapping mapping,
                  ActionForm form,
                  HttpServletRequest request,
                  HttpServletResponse response) throws IOException, ServletException {

    m_Log.debug("================= TramitacionAction ======================>");
    //ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources());

    // Validaremos los parametros del request especificados
    HttpSession session = request.getSession();
    String opcion ="";
    ActionErrors errors;

    opcion = request.getParameter("opcion");
    m_Log.info("Opcion : " + opcion);

    TramitacionValueObject tramVO = new TramitacionValueObject();
    TramitacionForm tramForm = null;

    if (form == null) {
        m_Log.debug("Rellenamos el form de Tramitacion");
        form = new TramitacionForm();
        if ("request".equals(mapping.getScope()))
            request.setAttribute(mapping.getAttribute(), form);
        else
            session.setAttribute(mapping.getAttribute(), form);
    }

    tramForm = (TramitacionForm)form;
    // Si usuario en sesion es nulo --> error.
    if ((session.getAttribute("usuario") != null)) {
      UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
      String[] params = usuario.getParamsCon();

      Config m_Conf = ConfigServiceHelper.getConfig("common");
      String JSP_Tramitacion;

      if (opcion.equals("buzonDeEntrada")) {
        // Se elimina este parametro usado en FichaExpedienteAction para
        // expedientes pendientes, en buzon impide ver los botones Aceptar, Rechazar, etc.
        session.removeAttribute("modoInicio");
        JSP_Tramitacion = "buzonDeEntrada";
        opcion = "inicio";
      } else if (opcion.equals("expedientesPendientes")) {
          JSP_Tramitacion = "expedientesPendientes";
          opcion = "inicio";
      } else
          JSP_Tramitacion = m_Conf.getString("JSP.Tramitacion");

      m_Log.debug("el valor de JSP_TRAMITACION ES : " + JSP_Tramitacion);
      
      /*******************************************************************************************************
       *  SE COMPRUEBA QUE SI ESTÁ ACTIVADA LA CARGA DEL BUZÓN DE ENTRADA, PERO SE DETECTA QUE SE FILTRA
       *  POR PROCEDIMIENTO EN LA FICHA DEL EXPEDIENTE, ENTONCES, HAY QUE REDIRIGIR A LA FICHA DEL EXPEDIENTE
       *  Y NO AL BUZÓN DE ENTRADA 
       *******************************************************************************************************/
      String pantalla = request.getParameter("pantalla");
      if(JSP_Tramitacion.equals("buzonDeEntrada") && pantalla!=null && "expedientesPendientes".equals(pantalla)){
          JSP_Tramitacion = "expedientesPendientes";
      }
      
      if (tramForm.getNumLineasPaginaListado()!=null && !"".equals(tramForm.getNumLineasPaginaListado()))
          tramVO.setNumLineasPaginaListado(tramForm.getNumLineasPaginaListado());
      else
          tramVO.setNumLineasPaginaListado("10");
      
      m_Log.debug(" \n Paginas listado ::::::---> " + tramVO.getNumLineasPaginaListado());    
      
      if (opcion.equals("inicio")){

        Vector consulta = new Vector();
        Vector consultaE = new Vector();
        /** original */
        tramForm.setLeyenda(null);
    
        try {
            if (JSP_Tramitacion.equals("buzonDeEntrada")) {
                session.removeAttribute("modoInicio");
                try {
                    opcion="buzonDeEntrada";
                    
                    // #291976: añadimos a la sesion la propiedad SERVICIO_DIGITALIZACION_ACTIVO de Registro.properties
                    String servDigitalizacionAct = (String) session.getAttribute("servicioDigitalizacionActivo");
                    if(servDigitalizacionAct == null) {
                        try{
                            servDigitalizacionAct = registroCong.getString(usuario.getOrgCod() + "/SERVICIO_DIGITALIZACION_ACTIVO");
                        }catch(Exception e){
                            m_Log.error("Se ha producido un error recuperando la propiedad '" + usuario.getOrgCod() + "/SERVICIO_DIGITALIZACION_ACTIVO' de Registro.properties");
                        }
                        if(servDigitalizacionAct!=null && servDigitalizacionAct.equalsIgnoreCase("si")){
                            session.setAttribute("servicioDigitalizacionActivo", servDigitalizacionAct);               
                        }
                    }

                    //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMA?0 (LISTADO TIPO 4)
                    Vector listaCamposListados = AnotacionRegistroManager.getInstance().getCamposListado(4, params);
                    tramForm.setCamposListados(listaCamposListados);

                    Integer num_dias = new Integer(m_Conf.getString("Tramitacion.num_dias"));
                    long date = System.currentTimeMillis();
                    Date desde = new Date((date - (num_dias.longValue()*86400000)));
                    Date hasta = new Date(date);
                    SimpleDateFormat s = new SimpleDateFormat("dd/MM/yyyy");
                    String fechaDesde = s.format(desde);
                    String fechaHasta = s.format(hasta);
                    tramForm.setNombreBuzonEntrada("");
                    tramForm.setPrimerApellidoBuzonEntrada("");
                    tramForm.setSegundoApellidoBuzonEntrada("");
                    tramForm.setDocumentoBuzonEntrada("");
                    tramForm.setCodUnidadDestinoBuzonEntrada("");
                    tramForm.setDescUnidadDestinoBuzonEntrada("");
                    tramForm.setDescAsuntoBuzonEntrada("");
                    tramForm.setCodAsuntoBuzonEntrada("");
                    tramForm.setDescAsuntoBuzonEntrada("");
                    tramForm.setCodAsuntoSeleccionado("");
                    tramForm.setTipoRegistroAsuntoSeleccionado("");
                    tramForm.setUnidadRegistroAsuntoSeleccionado("");
                    tramForm.setFechaDesde(fechaDesde);
                    tramForm.setFechaHasta(fechaHasta);
                    tramForm.setEjercicioBuzonEntrada("");
                    tramForm.setNumAnotacionBuzonEntrada("");
                    tramForm.setCodRegistroTelematico("");
                    tramForm.setDescRegistroTelematico("");
                    tramForm.setCodRegPendCatalogacion("");
                    tramForm.setDescRegPendCatalogacion("");

                    /*** prueba *****/
                    boolean cargarCriterios = false;
                    try{
                        ResourceBundle configRegistro = ResourceBundle.getBundle("Registro");
                        String propiedad = usuario.getOrgCod() + ConstantesDatos.CARGAR_NUEVOS_CRITERIOS_BUSQUEDA;                        
                        String sCargarCriterios = configRegistro.getString(propiedad);
                        if(sCargarCriterios!=null && "SI".equalsIgnoreCase(sCargarCriterios)) cargarCriterios = true;

                    }catch(Exception e){
                        e.printStackTrace();
                        cargarCriterios = false;
                    }

                    tramForm.setCargarNuevosCriteriosBuzonEntrada(cargarCriterios);
                    
                    /***** Se recupera la lista de unidades organizativas para cargar en el combo de unidades organizativas de destino *****/                    

                    if (registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI")) {
                        // para cargar lista de clasif de trámites.
                        tramForm.setListaClasificacionAsuntos(MantClasifAsuntosManager.getInstance().cargarClasifAsuntos(0, params));
                        // para los tecnicos de referencia
                        tramForm.setTecnicosReferencia(TecnicoReferenciaManager.getInstance().loadTecnicosReferencia(params));
                    }
                     
                     
                    /*** prueba ****/
                    Vector nuevasUOR = null;
                    if(UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.REGISTRO_S_SOLO_UORS_USUARIO,usuario.getIdUsuario(), params)){
                        // Se recupera las unidades sobre las que tiene permiso el usuario eliminando las que sean de tipo registro
                        nuevasUOR = UORsManager.getInstance().getListaUORsPermisoUsuarioNuevo(usuario,params);
                    }else
                        nuevasUOR = UORsManager.getInstance().getListaUORsPermisoUsuario(usuario,params);                    
                    
                    /*** prueba ****/
                    
                    /** original
                    Vector nuevasUOR = UORsManager.getInstance().getListaUORsPermisoUsuario(usuario,params);
                    **/
                    tramForm.setListaUnidadesDestinoBuzon(nuevasUOR);

                    Vector asuntos = MantAsuntosManager.getInstance().getAsuntosCodificadosPermisoUsuario(usuario, "E", params);
                    tramForm.setListaAsuntosCodificadosBuzon(asuntos);
                    /*** prueba *****/

                    String documento = "";
                    String nombre    = "";
                    String apellido1 = "";
                    String apellido2 = "";
                    String codAsunto = "";
                    String codUorDestino = "";
                    String unidadRegistroAsunto = "";
                    String tipoRegistroAsunto   = "";
                    String unidadRegistroAsuntoSeleccionado="";
                    String tipoRegistroAsuntoSeleccionado ="";
                    String ejercicio = "";
                    String numAnotacion = "";
                    String codUorInternoAnotacion = "";
                    tramForm.setCodClasificacionAsuntos("");
                    tramForm.setUnidadRegistroClasifAsuntoSeleccionado("");
                    tramForm.setCodTecnicoReferencia("");
                    tramForm.setDescClasificacionAsuntos("");
                    tramForm.setDescTecnicoReferencia("");
                    
                    /****************************************************************************************************/                    
                    /****************************************************************************************************/
                    /***** SE COMPRUEBA SI SÓLO ESTÁ ACTIVADO EL PLUGIN DE REGISTRO DEL BUZÓN PARA SGE, EN ESE CASO *****/
                    /*****                              SE REALIZA UNA BÚSQUEDA PÁGINADA                            *****/                          
                    /****************************************************************************************************/
                    /****************************************************************************************************/                                        
                    if(UtilidadesRegistro.estaActivadoSoloServicioBusquedaBuzonEntrada("SGE",usuario.getOrgCod()))
                        tramVO.setSoloContarExpedientesBuzonEntrada(true);
                    
                     /****************************************************************************************************/                    
                    /****************************************************************************************************/
                    /***** SE COMPRUEBA SI SÓLO ESTÁ ACTIVADO EL PLUGIN DE REGISTRO DEL BUZÓN PARA SGE Y RTE (Busca en buzón de SGE), EN ESE CASO *****/
                    /*****                              SE REALIZA UNA BÚSQUEDA PÁGINADA                            *****/                          
                    /****************************************************************************************************/
                    /****************************************************************************************************/
                     if(UtilidadesRegistro.estaActivadoSoloServicioBusquedaBuzonEntrada2("SGE;RTE",usuario.getOrgCod()))
                         tramVO.setSoloContarExpedientesBuzonEntrada(true);
                    m_Log.debug("valor de variable de integracion con tecnico referencia : "+registroCong.getString("INTEGRACION_TECNICO_REFERENCIA"));
                    m_Log.debug(registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI"));
                    HashMap resultadosConsulta = registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI") ? VisorRegistroManager.getInstance().getAsientosEntradaRegistroPluginTecnico(usuario, tramVO, params, fechaDesde, fechaHasta, documento, nombre, apellido1, apellido2, codAsunto, unidadRegistroAsuntoSeleccionado, tipoRegistroAsuntoSeleccionado, codUorDestino, ejercicio, numAnotacion, codUorInternoAnotacion, tramForm.getCodClasificacionAsuntos(), tramForm.getUnidadRegistroClasifAsuntoSeleccionado(), tramForm.getCodTecnicoReferencia()) : VisorRegistroManager.getInstance().getAsientosEntradaRegistro(usuario, tramVO, params, fechaDesde, fechaHasta, documento, nombre, apellido1, apellido2, codAsunto, unidadRegistroAsuntoSeleccionado, tipoRegistroAsuntoSeleccionado, codUorDestino, ejercicio, numAnotacion, codUorInternoAnotacion);
                    consulta = (Vector) resultadosConsulta.get("resultados");
                    Collection<String> errores = (Collection<String>) resultadosConsulta.get("errores");                    
                    request.setAttribute("errores", errores);
                    ArrayList<String> erroresBusquedaExtendida = (ArrayList<String>)resultadosConsulta.get("busquedaExtendidaDesactivada");
                    request.setAttribute("busquedaExtendidaDesactivada",erroresBusquedaExtendida);
                    session.setAttribute("consultaBuzonEntrada", consulta);
                    session.setAttribute("RelacionAsientos",consulta);

                } catch (NumberFormatException e) {
                    consulta = new Vector();
                    e.printStackTrace();
                    request.setAttribute("errorCargaBuzon", "ERROR EN ALGUN DATO INTRODUCIDO");
                } catch (TramitacionException e) {
                    consulta = new Vector();
                    request.setAttribute("errorCargaBuzon", "ERROR EN LA CARGA DE ASIENTOS: " + e.getMessage());
                }
            } else {
                opcion="expedientesPendientes";
                
                // Se comprueba de donde se viene
                String referer = (String)request.getHeader("referer");
                m_Log.debug(" ******************************** Tramitacion.do?opcion=expedientesPendientes :  "+ referer);

                // SE COMPRUEBA SI SE HA REALIZADO UN FILTRADO POR CÓDIGO DE PROCEDIMIENTO
                String  pCodProcedimientoFiltro = request.getParameter("codProcedimientoFiltro");
                m_Log.debug(" =====> Código procedimiento filtro: " + pCodProcedimientoFiltro);
          
                String lineasPendientes = (String)session.getAttribute("lineas_pendientes");
                String columnaPendientes = (String)session.getAttribute("columna_pendientes");
                String paginaPendientes = (String)session.getAttribute("pagina_pendientes");
                String tipoOrdenPendientes = (String)session.getAttribute("tipoOrden_pendientes");

                String usuarioTramitador = request.getParameter("usuarioTramitador");
                if (usuarioTramitador!=null && usuarioTramitador!=""){
                    tramVO.setUsuarioTramitador(usuarioTramitador);
                    tramForm.setUsuarioTramitador(usuarioTramitador);
                    session.setAttribute("usuarioTramitador",usuarioTramitador);
                } else {
                    tramVO.setUsuarioTramitador(null);
                    tramForm.setUsuarioTramitador(null);
                    session.removeAttribute("usuarioTramitador");
                }
                
                 m_Log.debug(" =====> lineasPendientes:"+lineasPendientes+ " columnaPendientes:"+columnaPendientes+" paginaPendientes: "+paginaPendientes+" tipoOrdenPendientes:"+tipoOrdenPendientes);
 
                // SE COMPRUEBA SI SE ENTRA EN LA BANDEJA DE EXPEDIENTES PENDIENTES DESDE LA FICHA DE UN EXPEDIENTE. EN CASO DE 
                // SER ASÍ, LO QUE HAY QUE HACER
                ValoresCriterioBusquedaExpPendientesVO criterio = null;
                if(referer!=null && referer.contains("FichaExpediente.do")){
                    pCodProcedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
                    // Se recupera el criterio de búsqueda de la bandeja de expedientes pendientes del formulario porque se vuelve de la ficha de un expediente
                    // y hay que recargar la bandeja de expedientes pendientes respetando el criterio de búsqueda
                    criterio = tramForm.getValoresCriterioBusquedaExpPendientes();
                }else{
                    session.setAttribute("codigo_procedimiento_exp_pendientes",pCodProcedimientoFiltro);
                }
                
                m_Log.debug("PARÁMETRO CÓDIGO DE PROCEDIMIENTO FILTRADO: " + pCodProcedimientoFiltro);

                String filtroRangoTemporal = request.getParameter("codRangoTempFiltro");

                if (!"0".equals(filtroRangoTemporal) && !"1".equals(filtroRangoTemporal) && !"2".equals(filtroRangoTemporal)) {
                    filtroRangoTemporal = (String) session.getAttribute("codigo_rango_temp_exp_pendientes");
                } else {
                    session.setAttribute("codigo_rango_temp_exp_pendientes", filtroRangoTemporal);
                }
                if (!"0".equals(filtroRangoTemporal) && !"1".equals(filtroRangoTemporal) && !"2".equals(filtroRangoTemporal)) {
                    Config m_Expedientes = ConfigServiceHelper.getConfig("Expediente");
                    filtroRangoTemporal = m_Expedientes.getString(usuario.getOrgCod() + "/rango_resultados_expedientes_pendientes");

                }

                tramVO.setCodRangoTemporal(filtroRangoTemporal);
                // SE COMPRUEBA SI SE HA REALIZADO UN FILTRADO POR RANGO TEMPORAL	
                m_Log.debug(" =====> C?digo rango temporal filtro: " + filtroRangoTemporal);

                boolean tieneVistaProcedimiento = false;
                if(pCodProcedimientoFiltro!=null && !"".equalsIgnoreCase(pCodProcedimientoFiltro)){
                    // SI SE HA REALIZADO UN FILTRADO POR CÓDIGO DE PROCEDIMIENTO.
                    tramVO.setCodProcedimiento(pCodProcedimientoFiltro);

                    // Se comprueba si el procedimiento tiene definida una vista de exp. pendientes propia
                    tieneVistaProcedimiento = CamposListadoPendientesProcedimientoManager.getInstance().tieneProcedimientoVistaExpedientesPendientes(pCodProcedimientoFiltro, usuario.getOrgCod(), params);
                    m_Log.debug("el procedimiento tiene vista propia de expedientes pendientes " + tieneVistaProcedimiento);                    
                }
            

            /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);
            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            /*
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0 && valoresCriterioBusqueda!=null && valoresCriterioBusqueda.length()>0 && criterio==null){
             */
           if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0 && criterio==null){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);
          /************************************* criterio busqueda pendientes **********************************/
                               
                /****** PRUEBA *****/
                int numero = TramitacionManager.getInstance().contarNumeroExpedientesPendientes(usuario,tramVO,params);
                /****** PRUEBA *****/
                
                /** SI HA SIDO SELECCIONADO UN PROCEDIMIENTO Y ÉSTE TIENE UNA VISTA DE PENDIENTES DEFINIDA, ENTONCES SE RECUPERAN
                    * LOS CAMPOS DE LISTADO DEFINIDOS PARA LA VISTA DE EXPEDIENTES PENDIENTES DE DICHO PROCEDIMIENTO
                    */
                Vector listaCamposListados = null;
                if(tieneVistaProcedimiento && pCodProcedimientoFiltro!=null && !"".equalsIgnoreCase(pCodProcedimientoFiltro)){
                    // Se recuperan los campos del listado de exp. pendientes propios del procedimiento
                    listaCamposListados = CamposListadoPendientesProcedimientoManager.getInstance().getCamposListado(pCodProcedimientoFiltro, usuario.getOrgCod(), usuario.getIdioma(),params);
                    // SE INDICA QUE EL PROCEDIMIENTO DISPONE DE VISTA DE EXPEDIENTES PROPIA
                    tramForm.setTieneProcedimientoVistaExpedientesPropia(true);
                    m_Log.debug("Se han recuperado " + listaCamposListados.size() + " campos del listado de expedientes pendientes del procedimiento " + pCodProcedimientoFiltro);
                    // Se almacenan en el formulario los campos del listado para el procedimiento
                    tramForm.setCamposListadoProcedimiento(listaCamposListados);
                    //tramForm.setCamposListados(new Vector());
                }else{
                    //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMA?0 (LISTADO TIPO 2). VISTA GENERAL DE EXPEDIENTES PENDIENTES
                    listaCamposListados = TramitacionManager.getInstance().getCamposListado(2, params);
                    
                    // SE INDICA QUE EL PROCEDIMIENTO NO DISPONE DE VISTA DE EXPEDIENTES PROPIA
                    tramForm.setTieneProcedimientoVistaExpedientesPropia(false);
                    // Se almacenan en el formularios los campos del listado de la vista general de expedientes pendientes
                    tramForm.setCamposListados(listaCamposListados);
                }

                DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();                
                // Se recuperan todos los procedimientos para mostrar en el combo del filtro de procedimientos
                //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
                Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario,params);
                request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);  
                session.setAttribute("listaCamposListados",listaCamposListados);

                /** RECUPERAR LOS CAMPOS DE BÚSQUEDA PARA EL LISTADO DE EXPEDIENTES PENDIENTES **/
                String codProcedimientoBusqueda = null;
                if(pCodProcedimientoFiltro!=null && !"".equalsIgnoreCase(pCodProcedimientoFiltro)){
                    codProcedimientoBusqueda = pCodProcedimientoFiltro;
                }

                // Se recuperan los campos que forman parte del criterio de búsqueda
                ArrayList<CriterioBusquedaPendientesVO> criterios = CamposListadoPendientesProcedimientoManager.getInstance().getCriteriosBusquedaExpedientesPendientes(codProcedimientoBusqueda, Integer.toString(usuario.getOrgCod()), usuario.getIdioma(), params);
                tramForm.setCriteriosBusquedaExpPendientes(criterios);

                
                request.setAttribute("numero_expedientes_pendientes",numero);
                
                      
            }
        } catch (TramitacionException te) {
            te.printStackTrace();
          consulta = new Vector();
          consultaE = new Vector();
        }

            // Guardamos los datos necesarios en la sesion y la request.
        session.setAttribute("RelacionAsientos",consulta);
        session.setAttribute("RelacionExpedientes",consultaE);
        session.setAttribute("RelacionExpedientesInicial",consultaE);

      }


      /************ VOLVER DE LA FICHA DE EXPEDIENTE ***************/
      if("volverPantallaPendientes".equals(opcion)){
          // SI SE VUELVE DESDE LA FICHA DE EXPEDIENTE HACIA LA PANTALLA DE EXPEDIENTES PENDIENTES
          // Se comprueba de donde se viene
        String referer = (String)request.getHeader("referer");
        m_Log.debug(" ******************************** Tramitacion.do?opcion=expedientesPendientes :  "+ referer);

        String volverPantallaExpedientesPendientes = request.getParameter("volverPantallaExpedientesPendientes");
        String filtroPendientes = request.getParameter("filtroPendientes");                      
        String lineasPendientes = request.getParameter("lineasPendientes");        
        String columnaPendientes = request.getParameter("columnaPendientes");        
        String paginaPendientes = request.getParameter("paginaPendientes");        
        String tipoOrdenPendientes = request.getParameter("tipoOrdenPendientes");  
        
        session.setAttribute("desdeFichaExpediente", "si");
        
       
        m_Log.debug(" ******************* filtroPendientes: " + filtroPendientes);
        m_Log.debug(" ******************* Tramitacion.do?opcion=expedientesPendientes volverPantallaExpedientesPendientes:  " + volverPantallaExpedientesPendientes);
        if(volverPantallaExpedientesPendientes!=null && "SI".equalsIgnoreCase(volverPantallaExpedientesPendientes) && referer!=null && referer.contains("FichaExpediente.do")
                && filtroPendientes!=null && !"".equals(filtroPendientes) && !"undefined".equals(filtroPendientes) && !"null".equals(filtroPendientes)){
            // Se ha entrado desde la pantalla de expedientes pendientes

            String leyenda = filtroPendientes;
            m_Log.debug("La leyenda que estaba anteriormente cargada es: " + leyenda);
            if(leyenda!=null && !"".equals(leyenda)){

                m_Log.debug(" ==============> REDIRECCIÓN A LA BANDEJA DE EXPEDIENTES PENDIENTES CON FILTRO DE LEYENDA : " + leyenda + " <==========================");
                String destino = "/sge/Tramitacion.do?opcion=" + leyenda;
                
                if (leyenda.equals("expedientesPendientes")) {
                    String usuarioTramitador = (String) session.getAttribute("usuarioTramitador");

                    if (usuarioTramitador != null && usuarioTramitador != ""){
                        destino += "&usuarioTramitador="+usuarioTramitador;
                    }
                }
                m_Log.debug("Redirigiendo a " + destino);
                return new ActionForward(destino);

            }// if
        }// if
        else{
            String pCodProcedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
            m_Log.debug("código del procedimiento del filtro: " + pCodProcedimientoFiltro);
            session.removeAttribute("codigo_procedimiento_exp_pendientes");
            
            String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("c?digo de rango temporal: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
            tramVO.setCodRangoTemporal(filtroRangoTemporal);

            }
           
            /*
            session.removeAttribute("lineas_pendientes");
            session.removeAttribute("columna_pendientes");
            session.removeAttribute("pagina_pendientes");
            session.removeAttribute("tipoOrden_pendientes");
            */

            // Si no se viene desde la pantalla de expedientes pendientes => Entonces se regresa a expedientes pendientes sin más pero,
            // hay que eliminar el criterio de búsqueda si lo hubiese
            tramForm.setValoresCriterioBusquedaExpPendientes(null);
            return new ActionForward("/sge/Tramitacion.do?opcion=expedientesPendientes");
        }

      }// if
      /************ VOLVER DE LA FICHA DE EXPEDIENTE ***************/


      
      if (opcion.equals("inicioDesdeFichaExpediente")) {
        session.removeAttribute("modoInicio");
        Vector consulta = new Vector();
        Vector consultaE = new Vector();

        try {
            if (JSP_Tramitacion.equals("buzonDeEntrada")) { 
                Integer num_dias = new Integer(m_Conf.getString("Tramitacion.num_dias"));
                long date = System.currentTimeMillis();
                Date desde = new Date((date - (num_dias.longValue()*86400000)));
                Date hasta = new Date(date);
                SimpleDateFormat s = new SimpleDateFormat("dd/MM/yyyy");
                String fechaDesde = s.format(desde);
                String fechaHasta = s.format(hasta);

                String documento = "";
                String nombre    = "";
                String apellido1 = "";
                String apellido2 = "";
                String codAsunto = "";
                String codUorDestino = "";
                String unidadRegistroAsuntoSeleccionado="";
                String tipoRegistroAsuntoSeleccionado ="";
                String ejercicio = "";
                String numAnotacion = "";
                String codUorInternoAnotacion = "";

                HashMap resultadosConsulta = VisorRegistroManager.getInstance().getAsientosEntradaRegistro(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,apellido1,apellido2,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorDestino, ejercicio, numAnotacion,codUorInternoAnotacion);
                consulta = (Vector) resultadosConsulta.get("resultados");
                Collection<String> errores = (Collection<String>) resultadosConsulta.get("errores");
                session.setAttribute("consultaBuzonEntrada", consulta);
                tramForm.setFechaDesde(fechaDesde);
                tramForm.setFechaHasta(fechaHasta);
                //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMANH0 (LISTADO TIPO 2)
                Vector listaCamposListados = TramitacionManager.getInstance().getCamposListado(4, params);
                tramForm.setCamposListados(listaCamposListados);

                opcion="buzonDeEntrada";

                    request.setAttribute("errores", errores);
            } else {
                return new ActionForward("/sge/Tramitacion.do?opcion=inicio");
            }
        } catch (TramitacionException te) {
          consulta = new Vector();
          consultaE = new Vector();
        }
        session.setAttribute("RelacionAsientos",consulta);
        session.setAttribute("RelacionExpedientes",consultaE);
        session.setAttribute("RelacionExpedientesInicial",consultaE);
        session.setAttribute("desdeFichaExpediente","si");

      } else if("cargar_pagina_exp_pendientes".equals(opcion)) { 
              m_Log.debug("********************************* opcion cargar_pagina_exp_pendientes");
        //recibo el id del campo que pertece a la columna por la que hay que ordenar
        String pagina=request.getParameter("paginaListado");
        tramVO.setPaginaListado(pagina);
        String lineas=tramVO.getNumLineasPaginaListado();
        //String lineas=request.getParameter("numLineasPaginaListado");
        m_Log.debug("*********************************lineas "+lineas );
        tramVO.setNumLineasPaginaListado(lineas);
        String columna =  request.getParameter("columna");
        String nombreColumna =  request.getParameter("nombreColumna");
        String  tipoOrden = request.getParameter("tipoOrden");
        
        String desdeFichaExpediente= request.getParameter("desdeFichaExpediente");
        
        m_Log.debug("ORDENAR antes de buscar    " + columna + " , " +tipoOrden);
        //busco en que posisicion del select esta el campo por el que tengo que ordenar.

        if ("false".equals(tipoOrden)){
            tipoOrden="DESC";
        }else if("true".equals(tipoOrden)) {
             tipoOrden="ASC";
        }
        
        tramVO.setUsuarioTramitador(tramForm.getUsuarioTramitador());

       /** FILTRADO POR PROCEDIMIENTO  **/        

        String filtroProcedimiento = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
        
         Vector listaCamposListadosAtr = null;
         listaCamposListadosAtr=(Vector)session.getAttribute("listaCamposListados");
        m_Log.debug(" =====> filtroProcedimiento: " + filtroProcedimiento);
        if(filtroProcedimiento!=null && !"".equals(filtroProcedimiento)){
            tramVO.setCodProcedimiento(filtroProcedimiento);            
        }
        
        String  filtroRangoTemporal = request.getParameter("codRangoTempFiltro");	
        if (!"0".equals(filtroRangoTemporal) && !"1".equals(filtroRangoTemporal) && !"2".equals(filtroRangoTemporal))
            filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
        else
            session.setAttribute("codigo_rango_temp_exp_pendientes",filtroRangoTemporal);
        tramVO.setCodRangoTemporal(filtroRangoTemporal);

        m_Log.debug(" =====> filtroRangoTemporal: " + filtroRangoTemporal);
        
         if("si".equals(desdeFichaExpediente)){
        
          if (pagina == null || "".equals(pagina)) {
              String pagina_pendientes = (String) session.getAttribute("pagina_pendientes");
              tramVO.setPaginaListado(pagina_pendientes);
              
          }
          if (lineas == null || "".equals(lineas)) {
              String lineas_pendientes = (String) session.getAttribute("lineas_pendientes");
              tramVO.setNumLineasPaginaListado(lineas_pendientes);
          }
          if (columna == null || "".equals(columna)) {
              columna = (String) session.getAttribute("columna_pendientes");

          }
          
          if (tipoOrden == null || "".equals(tipoOrden)) {
              String tipoOrden_pendientes = (String) session.getAttribute("tipoOrden_pendientes");
              if ("false".equals(tipoOrden_pendientes)) {
                  tipoOrden = "DESC";
              } else if ("true".equals(tipoOrden_pendientes)) {
                  tipoOrden = "ASC";
              }
          }
        
         }
         else
         {
             session.removeAttribute("pagina_pendientes");
             session.removeAttribute("lineas_pendientes");
             session.removeAttribute("columna_pendientes");
            
             session.removeAttribute("tipoOrden_pendientes");
                
         }
        
                
        // Se comprueba si el procedimiento tiene definida una vista de exp. pendientes propia
        boolean tieneVistaProcedimiento = false;
        if(filtroProcedimiento!=null && !"".equalsIgnoreCase(filtroProcedimiento)){
            // SI SE HA REALIZADO UN FILTRADO POR CÓDIGO DE PROCEDIMIENTO.
            tramVO.setCodProcedimiento(filtroProcedimiento);                        
            tieneVistaProcedimiento = CamposListadoPendientesProcedimientoManager.getInstance().tieneProcedimientoVistaExpedientesPendientes(filtroProcedimiento, usuario.getOrgCod(), params);
        }

        m_Log.debug("El procedimiento tiene vista de procedimiento propia: " + tieneVistaProcedimiento);
        if(filtroProcedimiento!=null && !"".equalsIgnoreCase(filtroProcedimiento) && tieneVistaProcedimiento){
            // Se indica cual es la jsp a la que se redirige y se recuperan los campos que forman el listado
            m_Log.debug("el procedimiento tiene vista propia de expedientes pendientes " + tieneVistaProcedimiento);
            opcion = "cargar_pagina_exp_pendientes_procedimiento";
            
            Vector<CamposListadoParametrizablesProcedimientoVO> listaCamposListados = null;
            if(listaCamposListadosAtr!=null) listaCamposListados=listaCamposListadosAtr;
            else CamposListadoPendientesProcedimientoManager.getInstance().getCamposListado(filtroProcedimiento, usuario.getOrgCod(), usuario.getIdioma(),params);
            request.setAttribute("campos_listado_pendientes_procedimiento",listaCamposListados);            
        }

        
        m_Log.debug("pagina: " + pagina+" lineas: " + lineas+" columna: " + columna+" nombreColumna: "+ nombreColumna+ " tipoOrden: " + tipoOrden);
        /**************************************** prueba **********************************/
        ValoresCriterioBusquedaExpPendientesVO criterio = tramForm.getValoresCriterioBusquedaExpPendientes();
        tramVO.setCriterioBusquedaExpPendientes(criterio);
     
        /************************************* prueba **********************************/


        /** FILTRADO POR PROCEDIMIENTO  **/
        Vector consultaE = new Vector();

        //consultaE = TramitacionManager.getInstance().getExpedientesPendientes(usuario,tramVO,params);
        consultaE = TramitacionManager.getInstance().getExpedientesPendientes(usuario,tramVO,params,columna,nombreColumna,tipoOrden);

       // String estadoEstilo = (String)session.getAttribute("estadoEstilo");
        String estadoEstilo = tramForm.getLeyenda();
        session.removeAttribute("estadoEstilo");
        if (estadoEstilo!=null && !"".equals(estadoEstilo))
            consultaE = filtrarPorEstadoEstilo(estadoEstilo, consultaE);
          session.setAttribute("RelacionExpedientes",consultaE);

          // Auditoria de accesos al expediente
          try {
              AuditoriaManager.getInstance().auditarAccesoExpediente(
                      ConstantesAuditoria.EXPEDIENTE_PENDIENTES_CONSULTA_LISTADO,
                      usuario,
                      consultaE);
          } catch (TramitacionException te) {
              m_Log.error("No se pudo registrar el evento de auditoria", te);
          }

      } else if("cargar_pagina_entrada".equals(opcion)) {

          // recibo el id del campo que pertece a la columna por la que hay que ordenar
          String columna =  request.getParameter("columna");
          String tipoOrden = request.getParameter("tipoOrden");
          
          String paginaListado   = request.getParameter("paginaListado");
          String numLineasPagina = request.getParameter("numLineasPaginaListado");
          m_Log.debug("paginaListado: " + paginaListado + ", numLineasPagina: " + numLineasPagina);
          
          //busco en que posisicion del select esta el campo por el que tengo que ordenar.
          if ("false".equals(tipoOrden)) tipoOrden="DESC";
          else if("true".equals(tipoOrden)) tipoOrden="ASC";

          tramVO.setColumna(columna);
          tramVO.setTipoOrdenacion(tipoOrden);
          String fechaDesde = tramForm.getFechaDesde();
          String fechaHasta = tramForm.getFechaHasta();
          Vector consulta = new Vector();
          try {
              String ejercicio         = tramForm.getEjercicioBuzonEntrada();
              String numAnotacion      = tramForm.getNumAnotacionBuzonEntrada();
              String documento         = tramForm.getDocumentoBuzonEntrada();
              String nombre            = tramForm.getNombreBuzonEntrada();
              String primerApellido    = tramForm.getPrimerApellidoBuzonEntrada();
              String segundoApellido   = tramForm.getSegundoApellidoBuzonEntrada();              
              String descUnidadDestino = tramForm.getDescUnidadDestinoBuzonEntrada();
              //String codAsunto         = tramForm.getCodAsuntoBuzonEntrada();
              String descAsunto        = tramForm.getDescAsuntoBuzonEntrada();
              String codVisUorDestino  = tramForm.getCodUnidadDestinoBuzonEntrada();
              String codUorInterno     = "";

              String codAsuntoSeleccionado          = tramForm.getCodAsuntoSeleccionado();
              String tipoRegistroAsuntoSeleccionado = tramForm.getTipoRegistroAsuntoSeleccionado();
              String unidadRegistroAsuntoSeleccionado = tramForm.getUnidadRegistroAsuntoSeleccionado();
              
              String codVisoUnidadOrganicaAnotacion  = tramForm.getCodUnidadOrganicaAnotacion();
              String codUorInternoAnotacion    = "";

              m_Log.debug("ejercicio: "  + ejercicio);
              m_Log.debug("numAnotacion: "  + numAnotacion);
              m_Log.debug("documento: "  + documento);
              m_Log.debug("nombre: "  + nombre);
              m_Log.debug("primerApellido: "  + primerApellido + ", segundoApellido: " + segundoApellido);              
              m_Log.debug("codVisUorDestino: "  + codVisUorDestino);
              m_Log.debug("descUnidadDestino: "  + descUnidadDestino);
              m_Log.debug("codAsuntoSeleccionado: "  + codAsuntoSeleccionado);
              m_Log.debug("unidadRegistroAsuntoSeleccionado: "  + unidadRegistroAsuntoSeleccionado);
              m_Log.debug("tipoRegistroAsuntoSeleccionado: "  + tipoRegistroAsuntoSeleccionado);
              m_Log.debug("descAsunto: "  + descAsunto);
              m_Log.debug("codigo visible unidad organica de la anotacion: "  + codVisoUnidadOrganicaAnotacion);

              // Se recupera la información de la UOR de destino
              if(codVisUorDestino!=null && !"".equals(codVisUorDestino)){
                 UORDTO uor= UORsDAO.getInstance().getUORPorCodigoVisibleAll(codVisUorDestino,params);
                 codUorInterno = uor.getUor_cod();
                 m_Log.debug("codUorInterno destino:: " + codUorInterno);
              }
              
              if(codVisoUnidadOrganicaAnotacion!=null && !"".equals(codVisoUnidadOrganicaAnotacion)){
                 UORDTO uor= UORsDAO.getInstance().getUORPorCodigoVisibleAll(codVisoUnidadOrganicaAnotacion,params);
                 codUorInternoAnotacion = uor.getUor_cod();
                 m_Log.debug("codUorInterno Anotacion:: " + codUorInternoAnotacion);
              }
              
               /****************************************************************************************************/                    
               /****************************************************************************************************/
               /***** SE COMPRUEBA SI SÓLO ESTÁ ACTIVADO EL PLUGIN DE REGISTRO DEL BUZÓN PARA SGE, EN ESE CASO *****/
               /*****                              SE REALIZA UNA BÚSQUEDA PÁGINADA                            *****/                          
               /****************************************************************************************************/
               /****************************************************************************************************/                                        
               if(UtilidadesRegistro.estaActivadoSoloServicioBusquedaBuzonEntrada("SGE",usuario.getOrgCod())){                    
                    tramVO.setSoloContarExpedientesBuzonEntrada(false);
                    tramVO.setPaginaListado(paginaListado);
                    tramVO.setNumLineasPaginaListado(numLineasPagina);
                    
                    // AL ESTAR ACTIVADO COMO ÚNICO PLUGIN DE REGISTRO PARA EL BUZÓN DE ENTRADA EL DEL SGE, ENTONCES
                    // LA REDIRECCIÓN EN LUGAR DE A /jsp/sge/ocultoTramitacionEntrada.jsp SE REALIZARÁ A 
                    // /jsp/sge/ocultoTramitacionEntradaSoloSGE.jsp. SE HACE ASÍ PORQUE AL ESTAR ACTIVADO EL PLUGIN
                    // DEL SGE UNICAMENTE, SE PAGINA EL RESULTADO, RECUPERANDO SOLO LOS REGISTROS QUE SE NECESITEN
                    // EN LA PÁGINA ACTUAL. 
                    // PARA MANTENER LA COMPATIBILIDAD CON EL RESTO DE PLUGINS, EN LOS QUE NO SE REALIZA PAGINACION, 
                    // SI HUBIESE MÁS DE UN PLUGIN ACTIVO O SOLO UNO QUE NO FUESE SGE, SE RECUPERARÍAN TODAS
                    // LAS ANOTACIONES DEL BUZÓN Y LA PAGINACIÓN SE REALIZARÍA EN /jsp/sge/ocultoTramitacionEntrada.jsp                    
               }// if
               
                if(UtilidadesRegistro.estaActivadoSoloServicioBusquedaBuzonEntrada2("SGE;RTE",usuario.getOrgCod())){                    
                    tramVO.setSoloContarExpedientesBuzonEntrada(false);
                    tramVO.setPaginaListado(paginaListado);
                    tramVO.setNumLineasPaginaListado(numLineasPagina);
                    
                    // AL ESTAR ACTIVADO COMO ÚNICO PLUGIN DE REGISTRO PARA EL BUZÓN DE ENTRADA EL DEL SGE, ENTONCES
                    // LA REDIRECCIÓN EN LUGAR DE A /jsp/sge/ocultoTramitacionEntrada.jsp SE REALIZARÁ A 
                    // /jsp/sge/ocultoTramitacionEntradaSoloSGE.jsp. SE HACE ASÍ PORQUE AL ESTAR ACTIVADO EL PLUGIN
                    // DEL SGE UNICAMENTE, SE PAGINA EL RESULTADO, RECUPERANDO SOLO LOS REGISTROS QUE SE NECESITEN
                    // EN LA PÁGINA ACTUAL. 
                    // PARA MANTENER LA COMPATIBILIDAD CON EL RESTO DE PLUGINS, EN LOS QUE NO SE REALIZA PAGINACION, 
                    // SI HUBIESE MÁS DE UN PLUGIN ACTIVO O SOLO UNO QUE NO FUESE SGE, SE RECUPERARÍAN TODAS
                    // LAS ANOTACIONES DEL BUZÓN Y LA PAGINACIÓN SE REALIZARÍA EN /jsp/sge/ocultoTramitacionEntrada.jsp                    
               }// if
               
               
               
              tramVO.setRegistroTelematico(tramForm.getCodRegistroTelematico());
              tramVO.setRegPendCatalogacion(tramForm.getCodRegPendCatalogacion());
              m_Log.debug("tramVO.getRegistroTelematico: "  + tramVO.getRegistroTelematico());
              m_Log.debug("tramVO.getRegPendCatalogacion: "  + tramVO.getRegPendCatalogacion());
              
              HashMap resultadosConsulta = registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI") ? VisorRegistroManager.getInstance().getAsientosEntradaRegistroPluginTecnico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion,tramForm.getCodClasificacionAsuntos(), tramForm.getUnidadRegistroClasifAsuntoSeleccionado(), tramForm.getCodTecnicoReferencia()) : VisorRegistroManager.getInstance().getAsientosEntradaRegistro(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion);
              consulta = (Vector) resultadosConsulta.get("resultados");
               //session.setAttribute("consultaBuzonEntrada", consulta);
              Collection<String> errores = (Collection<String>) resultadosConsulta.get("errores");
              m_Log.debug("Erorres¿?:" + errores.toString());
              request.setAttribute("errores", errores);
              session.setAttribute("RelacionAsientos",consulta);
              ArrayList<String> erroresBusquedaExtendida = (ArrayList<String>)resultadosConsulta.get("busquedaExtendidaDesactivada");
              request.setAttribute("busquedaExtendidaDesactivada",erroresBusquedaExtendida);

              // Auditoria de acceso al registro
              AuditoriaManager.getInstance().auditarAccesoAnotacion(
                      ConstantesAuditoria.EXPEDIENTE_BUZON_ENTRADA_CONSULTA_LISTADO, usuario, consulta);
          } catch (TramitacionException e) {
              consulta = new Vector();
              request.setAttribute("errorCargaBuzon", "ERROR EN LA CARGA DE ASIENTOS: " + e.getMessage());
          }
          
          if(UtilidadesRegistro.estaActivadoSoloServicioBusquedaBuzonEntrada("SGE",usuario.getOrgCod())){                    
                    
                    // AL ESTAR ACTIVADO COMO ÚNICO PLUGIN DE REGISTRO PARA EL BUZÓN DE ENTRADA EL DEL SGE, ENTONCES
                    // LA REDIRECCIÓN EN LUGAR DE A /jsp/sge/ocultoTramitacionEntrada.jsp SE REALIZARÁ A 
                    // /jsp/sge/ocultoTramitacionEntradaSoloSGE.jsp. SE HACE ASÍ PORQUE AL ESTAR ACTIVADO EL PLUGIN
                    // DEL SGE UNICAMENTE, SE PAGINA EL RESULTADO, RECUPERANDO SOLO LOS REGISTROS QUE SE NECESITEN
                    // EN LA PÁGINA ACTUAL. 
                    // PARA MANTENER LA COMPATIBILIDAD CON EL RESTO DE PLUGINS, EN LOS QUE NO SE REALIZA PAGINACION, 
                    // SI HUBIESE MÁS DE UN PLUGIN ACTIVO O SOLO UNO QUE NO FUESE SGE, SE RECUPERARÍAN TODAS
                    // LAS ANOTACIONES DEL BUZÓN Y LA PAGINACIÓN SE REALIZARÍA EN /jsp/sge/ocultoTramitacionEntrada.jsp                    
                    //opcion = "cargar_pagina_entrada_solo_sge";
                    return new ActionForward("/jsp/sge/ocultoTramitacionEntradaSoloSGE.jsp");
         }// if
          
          
      } else if ( "iniciarExpediente".equals(opcion) || "iniciarExpedienteAsiento".equals(opcion) ) {
        Vector listaProcedimientos = new Vector();
        int sinTipoProcs = ("iniciarExpedienteAsiento".equals(opcion))?0:1; // 0: Oficio; 1: Instancia de parte; 2:Ambos.
        try {
          listaProcedimientos=TramitacionManager.getInstance().getListaProcedimientosUsuario2(usuario,sinTipoProcs, params);
        } catch (TramitacionException te) {
          listaProcedimientos = new Vector();
        }

        // Comprobamos si el asiento especifica un procedimiento
        MantAnotacionRegistroForm registroForm = (MantAnotacionRegistroForm)session.getAttribute("MantAnotacionRegistroForm");
        if (registroForm != null) {
            RegistroValueObject elRegistroESVO = registroForm.getRegistro();
            String procAsiento = elRegistroESVO.getCodProcedimiento();
            String munAsiento = elRegistroESVO.getMunProcedimiento();
            m_Log.debug("El asiento especifica el procedimiento: " + procAsiento + " del municipio " + munAsiento);
            if (procAsiento != null && !procAsiento.equals("") &&
               !procAsiento.equals("null") && "iniciarExpedienteAsiento".equals(opcion)) {
                //Creamos una lista nueva con el procedimiento especificado en primera posicion.
                Vector<DefinicionProcedimientosValueObject> listaNueva =
                                new Vector<DefinicionProcedimientosValueObject>();
                // Buscamos el especificado y lo insertamos
                for (DefinicionProcedimientosValueObject proc :
                    (Vector<DefinicionProcedimientosValueObject>) listaProcedimientos) {
                    if (proc.getTxtCodigo().equals(procAsiento)) {
                        listaNueva.add(proc);
                        m_Log.debug("Encontrado " + procAsiento + ", se pone como primero de la lista.");
                    }
                }
                // Insertamos el resto
                for (DefinicionProcedimientosValueObject proc :
                    (Vector<DefinicionProcedimientosValueObject>) listaProcedimientos) {
                    if (!proc.getTxtCodigo().equals(procAsiento)) listaNueva.add(proc);
                }
                listaProcedimientos = listaNueva;
                // Indicamos el procedimiento para remarcarlo en la lista
                tramVO.setCodProcedimiento(procAsiento);
                tramVO.setCodMunicipio(munAsiento);
            }
        }

         //Indicamos desde donde iniciamos el expediente, también obtenemos y enviamos el valor de origen de registro
        if(opcion.equals("iniciarExpedienteAsiento")){
            request.setAttribute("desdeBuzonEntrada", "si");
            String registroOrigen;
            if (registroForm != null) {
                RegistroValueObject elRegistroESVO = registroForm.getRegistro();
                registroOrigen = elRegistroESVO.getIdServicioOrigen();
            } else
                registroOrigen = request.getParameter("registroOrigen");
            request.setAttribute("registroOrigen", registroOrigen);
            request.setAttribute("hayListaTerc", request.getParameter("hayListaTerc"));
            tramVO.setOrigen(registroOrigen);
        }
        
        tramVO.setListaProcedimientos(listaProcedimientos);
        tramForm.setTramitacion(tramVO);
        opcion = "iniciarExpediente";
        
         } else if ( "comprobarProcedimiento".equals(opcion) ) { 
          // opción en donde se comprueba que el procedimiento para el que se quiere iniciar un expediente en buzón de entrada está en la lista definida
          // en Expediente.properties
          String existe = "no";
          ResourceBundle expProp = ResourceBundle.getBundle("Expediente");
          String propiedad = usuario.getOrgCod()+"/BUZON_ENTRADA_PROCEDIMIENTOS_COMPROBAR_EXPEDIENTES";
          String[] listaProcedimientos = null;
          String todosProc = null;
          try{
              m_Log.debug("Código de organización: "+usuario.getOrgCod());
              todosProc = expProp.getString(propiedad);
          }catch(Exception e) { 
            m_Log.error("No existe la propiedad "+propiedad+" en Expediente.properties");
          }
          
          // Recuperamos los parámetros de la request
          String filaSelec = request.getParameter("filaSelec");
          String codProcedimiento = request.getParameter("codProcedimiento");
          
          if(todosProc!=null){
              listaProcedimientos = todosProc.split(";");
              for (String proc : listaProcedimientos) {
                  if(proc.equals(codProcedimiento)){
                      existe = "si";
                      break;
                  }
              }
          }
          
          // devolvemos los datos como String en formato json
          GeneralValueObject respuesta = new GeneralValueObject();
          respuesta.setAtributo("comprobar", existe);
          respuesta.setAtributo("codProc", codProcedimiento);
          respuesta.setAtributo("filaSelec", filaSelec);
          retornarJSON(new Gson().toJson(respuesta), response);
          
      } else if ( "hayExpedientesIntYProc".equals(opcion) ) {
          List<String> listaProcedimientos = getProcsEnExpProperties(usuario);
          String codProc = request.getParameter("codProcedimiento");
          String codsTerc = request.getParameter("codsTerc");
          String versTerc = request.getParameter("nvrsTerc");
          String docusTerc = request.getParameter("docusTerc");
          String filaSelec = request.getParameter("filaSelec");
          m_Log.debug("Código de procedimiento: "+codProc);
          m_Log.debug("Códigos de interesados: "+codsTerc);
          m_Log.debug("Números de versión de interesados: "+versTerc);
          m_Log.debug("Números de documento de tercero: "+docusTerc);
          m_Log.debug("fila seleccionada: "+filaSelec);
          
          String[] listaCods = codsTerc.split("##");
          String[] listaNVers = versTerc.split("##");
          String[] listaDocs = docusTerc.split("##");
          ArrayList<GeneralValueObject> listaInt = new ArrayList<GeneralValueObject>();
          for(int index=0; index<listaCods.length; index++){
              GeneralValueObject gVO = new GeneralValueObject();
              gVO.setAtributo("codigoTercero", listaCods[index]);
              gVO.setAtributo("versionTercero", listaNVers[index]);
              gVO.setAtributo("documentoTercero", listaDocs[index]);
              listaInt.add(gVO);
          }
          //ArrayList<GeneralValueObject> listaExp = TramitacionManager.getInstance().recuperarExpedientesInteresado(listaInt, codProc, params);
          ArrayList<GeneralValueObject> listaExp = TramitacionManager.getInstance().recuperarExpedientesRelacionadosInteresado(listaInt, listaProcedimientos, params);
          for(GeneralValueObject gVO : listaExp){
              Date fecha = (Date) gVO.getAtributo("fechaInicio");
              String fechaStr = DateOperations.toString(fecha, "dd/MM/yyyy");
              gVO.setAtributo("fechaInicioStr", fechaStr);
          }
          // devolvemos los datos como String en formato json
          GeneralValueObject respuesta = new GeneralValueObject();
          respuesta.setAtributo("relacionExpedientes", listaExp);
          respuesta.setAtributo("codProcedimiento", codProc);
          respuesta.setAtributo("filaSelec", filaSelec);
          retornarJSON(new Gson().toJson(respuesta), response);
        
      } else if ( "seleccionarUor".equals(opcion) ) {
      
        String codigoProcedimiento =  request.getParameter("codProc");
        String codigoOrganizacion = request.getParameter("codMun");
        String retorno = "";
        
         GeneralValueObject gVO = new GeneralValueObject();
        
          gVO.setAtributo("codMunicipio", codigoOrganizacion);
          gVO.setAtributo("codProcedimiento", codigoProcedimiento);

                
        
        Vector l = TramitacionManager.getInstance().getListaUORs_usuarioPorProc(usuario, codigoOrganizacion,codigoProcedimiento,params);
        
        for (int i=0;i<l.size();i++)
            {
                ElementoListaValueObject elVO= (ElementoListaValueObject) l.elementAt(i);                               
                retorno = retorno + (String) elVO.getIdentificador() + "|" + (String) elVO.getDescripcion() +"|"+(String) elVO.getCodigo() + "#";                                    
            }
                
        response.setContentType("text/xml");
        PrintWriter out = response.getWriter();
        out.println(retorno);
        out.flush();
        out.close();
        
   
      }
      else if ( "seleccionarUorTramiteInicio".equals(opcion) ) {
      
        String codigoProcedimiento =  request.getParameter("codProc");
        String codigoOrganizacion = request.getParameter("codMun");
        String retorno = "";
        
        
        Vector<UORDTO>  l = TramitacionManager.getInstance().getUnidadesTramitadorasTramiteInicio( codigoProcedimiento,params);
        
        for (int i=0;i<l.size();i++)
            {
                UORDTO g= (UORDTO) l.elementAt(i);                               
                retorno = retorno + (String) g.getUor_cod_vis() + "|" + (String) g.getUor_nom() +"|"+(String) g.getUor_cod() + "#";                                    
            }
                
        response.setContentType("text/xml");
        PrintWriter out = response.getWriter();
        out.println(retorno);
        out.flush();
        out.close();
        
   
      }
      else if ( "numeroExp".equals(opcion) ) {
        tramVO = tramForm.getTramitacion();
        try {
          TramitacionManager.getInstance().getNuevoExpediente(usuario,tramVO,params);
        } catch (TramitacionException te) {
          opcion="noNumeroExp";
        }
        tramForm.setTramitacion(tramVO);
        opcion = "numeroExp";

      } else if ( "consultaAsiento".equals(opcion) ) {
        String servDigitalizacionAct = (String) session.getAttribute("servicioDigitalizacionActivo");
        tramVO = tramForm.getTramitacion();
        RegistroValueObject elRegistroESVO= new RegistroValueObject();
        MantAnotacionRegistroForm registroForm = new MantAnotacionRegistroForm();

        String deHistorico = request.getParameter("deHistorico");
        if ("".equals(deHistorico)||deHistorico == null) deHistorico = "no";
        else {
            Vector relacionAsientosHistorico = (Vector) session.getAttribute("RelacionAsientosHistorico");
            String estado = getEstado(relacionAsientosHistorico,tramVO.getEjerNum());
            if(estado!=null && !"".equals(estado))
            elRegistroESVO.setEstAnotacion(Integer.parseInt(estado));
        }
        elRegistroESVO.setDeHistorico(deHistorico);
        elRegistroESVO.setListaTiposIdInteresado(AnotacionRegistroManager.getInstance().getListaTiposIdInteresado(params));
        elRegistroESVO.setIdentDepart(Integer.parseInt(tramVO.getCodDepartamento()));
        if(!"".equals(tramVO.getCodUnidadRegistro()))
            elRegistroESVO.setUnidadOrgan(Integer.parseInt(tramVO.getCodUnidadRegistro()));
        
        elRegistroESVO.setIdOrganizacion(usuario.getOrgCod());
        String tipoRegistro = tramVO.getTipoRegistro();
        elRegistroESVO.setTipoReg(tipoRegistro);
        elRegistroESVO.setIdServicioOrigen(tramVO.getOrigen());
        elRegistroESVO.setMunProcedimiento(tramVO.getCodMunicipio());

        String ejerNum=request.getParameter("ejerNum");
          StringTokenizer codigos = new StringTokenizer(ejerNum, "/", false);
          String ejercicio = codigos.nextToken();
          String numero = codigos.nextToken();

        elRegistroESVO.setNumReg(Long.parseLong(numero));
        elRegistroESVO.setAnoReg(Integer.parseInt(ejercicio));

          elRegistroESVO = VisorRegistroManager.getInstance().getInfoAsientoConsulta(elRegistroESVO, params);

          registroForm.setTipoRegistro(tipoRegistro);
          registroForm.setCbTipoEntrada(elRegistroESVO.getTipoAnot());
          registroForm.setCbTipoDoc(elRegistroESVO.getTipoDocInteresado());
          registroForm.setTxtDNI(elRegistroESVO.getDocumentoInteresado());
          registroForm.setTxtInteresado(elRegistroESVO.getNomCompletoInteresado());
          registroForm.setTxtTelefono(elRegistroESVO.getTlfInteresado());
          registroForm.setTxtCorreo(elRegistroESVO.getEmailInteresado());
          registroForm.setTxtProv((elRegistroESVO.getProvInteresado() != null) ? elRegistroESVO.getProvInteresado() : "");
          registroForm.setTxtMuni((elRegistroESVO.getMunInteresado() != null) ? elRegistroESVO.getMunInteresado() : "");
          registroForm.setTxtDomicilio((elRegistroESVO.getDomCompletoInteresado() != null) ? elRegistroESVO.getDomCompletoInteresado() : "");
          registroForm.setTxtPoblacion((elRegistroESVO.getPoblInteresado() != null) ? elRegistroESVO.getPoblInteresado() : "");
          registroForm.setTxtCP((elRegistroESVO.getCpInteresado() != null) ? elRegistroESVO.getCpInteresado() : "");
          registroForm.setFechaAnotacion((elRegistroESVO.getFecEntrada())!=null?elRegistroESVO.getFecEntrada():"");
          /* Se guardan los documentos de la anotación recuperada en el formulario para que puedan ser mostrados
           * en la pantalla consultaAsiento.jsp */
           DocumentoValueObject[] docsAnotacion = elRegistroESVO.getDocumentos();
           if(docsAnotacion!=null && docsAnotacion.length>=1){
               Vector docs = new Vector(Arrays.asList(docsAnotacion));
               registroForm.setListaDocsAsignados(docs);
           }

          // Carga de interesados de la anotacion
          registroForm.setListaInteresados(getListaInteresados(elRegistroESVO, params));
          // Carga de roles
          registroForm.setListaRoles(getListaRoles(elRegistroESVO, params));
          registroForm.setRegistro(elRegistroESVO);

          if(registroForm.getRelaciones()==null){
            registroForm.setRelaciones(new Vector<SimpleRegistroValueObject>());
          }

        session.setAttribute("MantAnotacionRegistroForm",registroForm);
        session.removeAttribute("TramitacionForm");
        
        // Auditoria de acceso al registro
        try {
            AuditoriaManager.getInstance().auditarAccesoAnotacion(
                    ConstantesAuditoria.EXPEDIENTE_VER_ANOTACION, usuario, elRegistroESVO);
        } catch (TramitacionException te) {
            m_Log.error("No se pudo registrar el evento de auditoria", te);
        }
        
        opcion = "consultaAsiento";

      } else if ("adjuntarExpediente".equals(opcion)) {

          String hayListaInt=request.getParameter("hayListaInt");
          String registroOrigen = request.getParameter("registroOrigen");
          String origenExpediente = request.getParameter("origenExp");

          MantAnotacionRegistroForm registroForm = (MantAnotacionRegistroForm) session.getAttribute("MantAnotacionRegistroForm");
          RegistroValueObject elRegistroESVO = registroForm.getRegistro();
          tramVO.setCodDepartamento(Integer.toString(elRegistroESVO.getIdentDepart()));
          tramVO.setCodUnidadRegistro(Integer.toString(elRegistroESVO.getUnidadOrgan()));
          tramVO.setTipoRegistro(elRegistroESVO.getTipoReg());
          tramVO.setEjercicioRegistro(Integer.toString(elRegistroESVO.getAnoReg()));
          tramVO.setNumero(Long.toString(elRegistroESVO.getNumReg()));
          tramVO.setCodTercero(Integer.toString(elRegistroESVO.getCodInter()));
          tramVO.setCodDomicilio(Integer.toString(elRegistroESVO.getDomicInter()));
          tramVO.setVersion(Integer.toString(elRegistroESVO.getNumModInfInt()));
          tramVO.setOrigen(elRegistroESVO.getIdServicioOrigen());
          tramVO.setFechaAnotacion(elRegistroESVO.getFecEntrada());
          tramVO.setDejarAnotacionBuzonEntrada(tramForm.getValorOpcionPermanencia());
          try {
              TramitacionManager.getInstance().getNumeroExpediente(tramVO, params);
              request.setAttribute("numeroExpediente", tramVO.getNumeroExpediente());
              request.setAttribute("hayListaTerc", hayListaInt);
              request.setAttribute("registroOrigen", registroOrigen);
          } catch (Exception e) {
              e.printStackTrace();
              request.setAttribute("numeroExpediente", "");
          }
          tramForm.setTramitacion(tramVO);
          tramVO.setDejarAnotacionBuzonEntrada(tramForm.getValorOpcionPermanencia());
          opcion = "adjuntarExpediente";
          if(origenExpediente!=null && origenExpediente.equals("interesado")){
              opcion = "adjuntarExpInt";
              ArrayList<GeneralValueObject> listaInt = new ArrayList<GeneralValueObject>(registroForm.getListaInteresados());
               ArrayList<GeneralValueObject> listaExp = TramitacionManager.getInstance().recuperarExpedientesInteresado(listaInt, null, params);	
              request.setAttribute("relacionExpInt", listaExp);
          }
      } else if ("adjuntarNumero".equals(opcion)) {
        tramVO = tramForm.getTramitacion();

        String adjuntarDesdeIniciar = request.getParameter("adjuntarDesdeIniciar");
        MantAnotacionRegistroForm registroForm = (MantAnotacionRegistroForm) session.getAttribute("MantAnotacionRegistroForm");
        RegistroValueObject elRegistroESVO = registroForm.getRegistro();
        
         if(adjuntarDesdeIniciar!=null && adjuntarDesdeIniciar.equals("si")){	
            tramVO.setCodDepartamento(Integer.toString(elRegistroESVO.getIdentDepart()));	
            tramVO.setCodUnidadRegistro(Integer.toString(elRegistroESVO.getUnidadOrgan()));	
            tramVO.setTipoRegistro(elRegistroESVO.getTipoReg());	
            tramVO.setEjercicioRegistro(Integer.toString(elRegistroESVO.getAnoReg()));	
            tramVO.setNumero(Long.toString(elRegistroESVO.getNumReg()));	
            tramVO.setCodTercero(Integer.toString(elRegistroESVO.getCodInter()));	
            tramVO.setCodDomicilio(Integer.toString(elRegistroESVO.getDomicInter()));	
            tramVO.setVersion(Integer.toString(elRegistroESVO.getNumModInfInt()));	
            tramVO.setOrigen(elRegistroESVO.getIdServicioOrigen());	
            tramVO.setFechaAnotacion(elRegistroESVO.getFecEntrada());	
        }
        
        GeneralValueObject gVO=new GeneralValueObject();
        gVO.setAtributo("hayListaTerc", request.getParameter("hayListaTerc"));
        Vector interesadosExp=(Vector)request.getAttribute("interesados");
        Vector tercerosSoloEnRegistro=registroForm.getListaInteresadosSoloRegistro();
        gVO.setAtributo("codigoTerceroDefecto", request.getAttribute("codigoTerceroDefecto"));



        try {
              //Adjuntar registro.
              VisorRegistroManager.getInstance().adjuntarExpedientesDesdeUnidadTramitadora(tramVO, usuario, params);
              
                // #308045: Iniciar expediente desde un asiento del buzon de entrada se hace a través del plugin_re. Se debe comprobar si el servicio de digitalizacion
                // está activo. Se piensa en incluir en PLUGIN_REXTERNO un properties con esta propiedad, pero para evitar que se cambie en la lce y no en el plugin
                // se opta por obtener la propiedad en la lce y pasarsela a iniciarExpedienteAsiento del plugin como un atributo del objeto
                String servDigitalizacionAct = (String) session.getAttribute("servicioDigitalizacionActivo");
                m_Log.debug("antes de retramitar al adjuntarexpediente :: servDigitalizacionAct: " + servDigitalizacionAct);
                if(servDigitalizacionAct == null) {
                    try{
                        servDigitalizacionAct = registroCong.getString(usuario.getOrgCod() + "/SERVICIO_DIGITALIZACION_ACTIVO");
                    }catch(Exception e){
                        m_Log.error("Se ha producido un error recuperando la propiedad '" + usuario.getOrgCod() + "/SERVICIO_DIGITALIZACION_ACTIVO' de Registro.properties");
                    }
                }
                if(servDigitalizacionAct!=null && servDigitalizacionAct.equalsIgnoreCase("si")){             
                    DigitalizacionDocumentosLanbideManager digitManager = DigitalizacionDocumentosLanbideManager.getInstance();
                    digitManager.retramitarDocumentoAdjuntarExpediente(elRegistroESVO, tramVO.getNumeroExpediente(), params);
                } 
                
              //Adjuntar interesado
              String opcionAdjuntar=request.getParameter("opcionAdjuntar");
              if(opcionAdjuntar.equals("altaTerceroDeRegistro"))
              {
                if((request.getParameter("hayListaTerc")).equals("si")) //El tercero/s es del SGE
                {
                 TramitacionManager.getInstance().setInteresadosReg2Exp(tramVO,elRegistroESVO,gVO,tercerosSoloEnRegistro, params);

                }
                else if(elRegistroESVO.getCodInter()==0) //Solo hay un interesado EXTERNO
                {

                    TramitacionManager.getInstance().setInteresadoExternoReg2Exp(tramVO,registroForm,gVO, usuario,params);

                }

               }
              opcion = "adjuntarNumero";

             tramVO.setRespOpcion("adjuntar");

        /*} catch (TramitacionException te) {
              opcion = "expedienteExiste";
          te.printStackTrace();
        */} catch (Exception e) {
              tramVO.setRespOpcion("noAdjuntar");
              opcion = "noAdjuntar";
          e.printStackTrace();
        }

        
        tramForm.setTramitacion(tramVO);

      }else if ("adjuntarNumeroInfo".equals(opcion)) {
        tramVO = tramForm.getTramitacion();
        tramVO.setDejarAnotacionBuzonEntrada(tramForm.getValorOpcionPermanencia());


        try {
              Vector consultaE = TramitacionManager.getInstance().localizaExpedienteByNum(tramVO,Integer.toString(usuario.getIdUsuario()),Integer.toString(usuario.getOrgCod()),params);
             

              if(consultaE.size()==0)
              {
                  opcion="expedienteExiste";
              }
               else
               {
                   opcion = "adjuntarNumero";
                   tramVO.setRespOpcion("adjuntarInfo");
               }
        } catch (TramitacionException te) {
              opcion = "expedienteExiste";
          te.printStackTrace();
        } catch (Exception e) {
              opcion = "expedienteExiste";
          e.printStackTrace();
        }


        tramForm.setTramitacion(tramVO);

      }else if (("adjuntarExpedienteInteresadosInfo".equals(opcion))||("adjuntarExpedienteInteresadosInfoAux".equals(opcion))) {
        tramVO = tramForm.getTramitacion();

        try {


              String numeroExpediente = request.getParameter("numeroExpediente");
              String codUsuario = Integer.toString(usuario.getIdUsuario());
              String codOrganizacion = Integer.toString(usuario.getOrgCod());

              tramVO.setNumeroExpediente(numeroExpediente);
              Vector consultaE = TramitacionManager.getInstance().localizaExpedienteByNum(tramVO,codUsuario,codOrganizacion,params);

              TramitacionValueObject tramVO1 = new TramitacionValueObject();
              if(consultaE.size()==0)  opcion="expedienteExiste";
              else
              {
                  tramVO1=(TramitacionValueObject)consultaE.get(0);
              }

              String ejercicio=tramVO.getEjercicio();
              String codProc=tramVO.getCodProcedimiento();
              String codMun=tramVO.getCodMunicipio();
              GeneralValueObject gVO=new GeneralValueObject();
              gVO.setAtributo("ejercicio", ejercicio);
              gVO.setAtributo("codMunicipio", codMun);
              gVO.setAtributo("codProcedimiento", codProc);
              gVO.setAtributo("numero", numeroExpediente);

                Vector terceros = InteresadosManager.getInstance().getListaInteresados(gVO, params);

               Vector roles=InteresadosManager.getInstance().getListaRoles(gVO, params);

               String codigoTerceroDefecto="";
               for(int i=0;i<roles.size();i++)
               {
                    GeneralValueObject g = new GeneralValueObject();
                    g=(GeneralValueObject)roles.get(i);
                    if(g.getAtributo("porDefecto").equals("1"))
                    {
                       codigoTerceroDefecto=(String)g.getAtributo("codRol");
                    }
               }
               tramVO.setCodigoRolDefectoInteresados(codigoTerceroDefecto);
               Vector interesados=new Vector(); //Son los interesados con rol principal
               Vector codigoInteresados=new Vector();

               for(int i=0;i<terceros.size();i++)
               {
                   InteresadoExpedienteVO interesadoVO = new InteresadoExpedienteVO();
                   interesadoVO=(InteresadoExpedienteVO)terceros.get(i);
                   int cod=interesadoVO.getCodigoRol();
                   codigoInteresados.add(Integer.toString(interesadoVO.getCodTercero()));
                   if(cod==Integer.parseInt(codigoTerceroDefecto))
                   {
                       interesados.add(interesadoVO);
                   }
              }


              MantAnotacionRegistroForm registroForm = (MantAnotacionRegistroForm) session.getAttribute("MantAnotacionRegistroForm");
              RegistroValueObject elRegistroESVO = registroForm.getRegistro();
              GeneralValueObject gVO1=new GeneralValueObject();
              gVO1.setAtributo("munProc",codMun);
              //gVO1.setAtributo("codProc",codProc);
              gVO1.setAtributo("codDep",Integer.toString(elRegistroESVO.getIdentDepart()) );
              gVO1.setAtributo("codOur",Integer.toString(elRegistroESVO.getUnidadOrgan()));
              gVO1.setAtributo("numero",Long.toString(elRegistroESVO.getNumReg()) );
              gVO1.setAtributo("ejercicio",Integer.toString(elRegistroESVO.getAnoReg()) );
              gVO1.setAtributo("codTip",elRegistroESVO.getTipoReg() );




              //Vector tercerosRegistro = InteresadosManager.getInstance().getListaInteresadosRegistro(gVO1, params);
              Vector tercerosRegistro=registroForm.getListaInteresados();
              String existenTerceros="no";
              Vector tercerosSoloEnRegistro=new Vector();
              //Comprobar que existen terceros del registros que no estan en el expediente

              if(tercerosRegistro.size()>0)
              {
                for(int i=0;i<tercerosRegistro.size();i++)
                {
                  GeneralValueObject terceroGVO=new GeneralValueObject();
                  terceroGVO=(GeneralValueObject)tercerosRegistro.get(i);
                  String codTerc=(String)terceroGVO.getAtributo("codigoTercero");
                  if (!codigoInteresados.contains(codTerc))
                  {
                      existenTerceros="si";
                      tercerosSoloEnRegistro.add(terceroGVO);
                  }
                }
              }
              else if (elRegistroESVO.getCodInter()==0) //Es un tercero externo de un registro externo
              {
                  existenTerceros="si";
                  for(int i=0;i<terceros.size();i++)
                  {
                      InteresadoExpedienteVO interesadoVO = new InteresadoExpedienteVO();
                      interesadoVO=(InteresadoExpedienteVO)terceros.get(i);
                      String documento=interesadoVO.getTxtDoc();
                      String nombreCompleto=interesadoVO.getNombreCompleto();
                      if(elRegistroESVO.getDocumentoInteresado().equals(documento))
                      {
                          existenTerceros="no";  //Coincide el documento
                          break;
                      }
                      else if ((elRegistroESVO.getDocumentoInteresado().equals("")) &&(elRegistroESVO.getNomCompletoInteresado().equals(nombreCompleto))) //Coincide el nombre completo y el documento del tercero externo esta vacio
                      {
                            existenTerceros="no";
                            break;
                      }
                      else
                      {
                          existenTerceros="si";
                      }
                  }
              }


              registroForm.setListaInteresadosSoloRegistro(tercerosSoloEnRegistro);

              request.setAttribute("numeroExpediente", numeroExpediente);
              request.setAttribute("existenInteresadosEnReg", existenTerceros);
              request.setAttribute("interesados", interesados);
              m_Log.debug("\n\n\n interesadossssssssssssss "+interesados);


//              opcion = "adjuntarExpedienteInteresadosInfo";

       /* } catch (TramitacionException te) {
              opcion = "expedienteExiste";
          te.printStackTrace();*/
        } catch (Exception e) {
              opcion = "expedienteExiste";
          e.printStackTrace();
        }

        if ("adjuntarExpedienteInteresadosInfoAux".equals(opcion))
        {
              tramVO.setRespOpcion("adjuntarNumeroInteresados");
        }
        else tramVO.setRespOpcion("adjuntar");

        tramForm.setTramitacion(tramVO);

      }else if("adjuntarInteresadosSoloRegistro".equals(opcion)){
           MantAnotacionRegistroForm registroForm = (MantAnotacionRegistroForm) session.getAttribute("MantAnotacionRegistroForm");
           Vector tercerosSoloEnRegistro= registroForm.getListaInteresadosSoloRegistro();
           RegistroValueObject elRegistroESVO = registroForm.getRegistro();
           request.setAttribute("tercerosSoloEnRegistro", tercerosSoloEnRegistro);


           opcion="adjuntarInteresadosSoloRegistro";
      }else if ( "ventanaRechazar".equals(opcion) ) {

          // Obtenemos el parametro de obligatoriedad o no de las observaciones al rechazar.
          String obsOblig = null;
          try {
              obsOblig = ParametrosManager.getInstance().
                  obtenerParametro(ConstantesDatos.PARAMS_OBS_RECHAZAR_CLAVE, params);
          } catch (Exception e) {
              e.printStackTrace();
          }

          if (ConstantesDatos.PARAMS_OBS_RECHAZAR_SI.equals(obsOblig)) {
              tramForm.setObsObligatorias(true);
          } else {
              tramForm.setObsObligatorias(false);
          }

      } else if ( "rechazarAsiento".equals(opcion) ) {
          
          boolean cargarCriterios = false;
          try {
              ResourceBundle configRegistro = ResourceBundle.getBundle("Registro");
              String propiedad = usuario.getOrgCod() + ConstantesDatos.CARGAR_NUEVOS_CRITERIOS_BUSQUEDA;
              String sCargarCriterios = configRegistro.getString(propiedad);
              if (sCargarCriterios != null && "SI".equalsIgnoreCase(sCargarCriterios)) {
                  cargarCriterios = true;
              }

          } catch (Exception e) { 
              e.printStackTrace();
              cargarCriterios = false;
          }

          tramForm.setCargarNuevosCriteriosBuzonEntrada(cargarCriterios);

          Vector nuevasUOR = UORsManager.getInstance().getListaUORsPermisoUsuario(usuario, params);
          tramForm.setListaUnidadesDestinoBuzon(nuevasUOR);

          Vector asuntos = MantAsuntosManager.getInstance().getAsuntosCodificadosPermisoUsuario(usuario, "E", params);
          tramForm.setListaAsuntosCodificadosBuzon(asuntos);

        
        MantAnotacionRegistroForm registroForm = (MantAnotacionRegistroForm)session.getAttribute("MantAnotacionRegistroForm");
        RegistroValueObject elRegistroESVO = registroForm.getRegistro();

        tramVO.setCodDepartamento(Integer.toString(elRegistroESVO.getIdentDepart()));
        tramVO.setCodUnidadRegistro(Integer.toString(elRegistroESVO.getUnidadOrgan()));
        tramVO.setTipoRegistro(elRegistroESVO.getTipoReg());
        tramVO.setEjercicioRegistro(Integer.toString(elRegistroESVO.getAnoReg()));
        tramVO.setNumero(Long.toString(elRegistroESVO.getNumReg()));
        tramVO.setOrigen(elRegistroESVO.getIdServicioOrigen());
        //tramVO.setObservaciones(StringEscapeUtils.escapeHtml(tramForm.getObservaciones()));
        String obser = request.getParameter("observacionesRechazo");
        String observFichero = obser.replace("\r\n","<br>");
        tramVO.setObservaciones(observFichero);

        try {
              VisorRegistroManager.getInstance().cambiaEstadoAsiento(tramVO, usuario, 2, params);
        } catch (TramitacionException te) {
              request.setAttribute("errorCambiaEstadoAsiento", "NO SE HA PODIDO CAMBIAR EL ESTADO DE LA ANOTACION: " + te.getMessage());
          te.printStackTrace();
          m_Log.debug("<================= TramitacionAction ======================");
              return (mapping.findForward("consultaAsiento"));
        }
        session.removeAttribute("MantAnotacionRegistroForm");
        Vector consulta = new Vector();
        Vector consultaE = new Vector();
        try {
            if (JSP_Tramitacion.equals("buzonDeEntrada")) {
                //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMANH0 (LISTADO TIPO 4)
                Vector listaCamposListados = AnotacionRegistroManager.getInstance().getCamposListado(4, params);
                tramForm.setCamposListados(listaCamposListados);
                Integer num_dias = new Integer(m_Conf.getString("Tramitacion.num_dias"));
                long date = System.currentTimeMillis();
                Date desde = new Date((date - (num_dias.longValue()*86400000)));
                Date hasta = new Date(date);
                SimpleDateFormat s = new SimpleDateFormat("dd/MM/yyyy");
                String fechaDesde = s.format(desde);
                String fechaHasta = s.format(hasta);
                
                tramVO.setSoloContarExpedientesBuzonEntrada(true);
                HashMap resultadosConsulta = VisorRegistroManager.getInstance().getAsientosEntradaRegistro(usuario, tramVO, params, fechaDesde, fechaHasta,"","","","","","","","","","","");
                consulta = (Vector)resultadosConsulta.get("resultados");
                Collection<String> errores = (Collection<String>) resultadosConsulta.get("errores");

                tramForm.setFechaDesde(fechaDesde);
                tramForm.setFechaHasta(fechaHasta);
                opcion="buzonDeEntrada";

                request.setAttribute("errores", errores);
            } else {
                consultaE = TramitacionManager.getInstance().getExpedientesPendientes(usuario,tramVO,params);
                //opcion="expedientesPendientes";
                return new ActionForward("/sge/Tramitacion.do?opcion=inicio");

            }
        } catch (TramitacionException te) {
          consulta = new Vector();
          consultaE = new Vector();
        }
        session.setAttribute("RelacionAsientos",consulta);
        session.setAttribute("RelacionExpedientes",consultaE);
        session.setAttribute("RelacionExpedientesInicial",consultaE);
      } else if ( "aceptarAsiento".equals(opcion) ) {

        m_Log.debug("TramitacionAction aceptarAsiento");
          boolean cargarCriterios = false;
          try {
              ResourceBundle configRegistro = ResourceBundle.getBundle("Registro");
              String propiedad = usuario.getOrgCod() + ConstantesDatos.CARGAR_NUEVOS_CRITERIOS_BUSQUEDA;
              String sCargarCriterios = configRegistro.getString(propiedad);
              if (sCargarCriterios != null && "SI".equalsIgnoreCase(sCargarCriterios)) {
                  cargarCriterios = true;
              }
 
          } catch (Exception e) {
              e.printStackTrace();
              cargarCriterios = false;
          }

          tramForm.setCargarNuevosCriteriosBuzonEntrada(cargarCriterios);

          Vector nuevasUOR = UORsManager.getInstance().getListaUORsPermisoUsuario(usuario, params);
          tramForm.setListaUnidadesDestinoBuzon(nuevasUOR);

          Vector asuntos = MantAsuntosManager.getInstance().getAsuntosCodificadosPermisoUsuario(usuario, "E", params);
          tramForm.setListaAsuntosCodificadosBuzon(asuntos);
                    
                 
        MantAnotacionRegistroForm registroForm = (MantAnotacionRegistroForm)session.getAttribute("MantAnotacionRegistroForm");
        RegistroValueObject elRegistroESVO = registroForm.getRegistro();
        tramVO.setCodDepartamento(Integer.toString(elRegistroESVO.getIdentDepart()));
        tramVO.setCodUnidadRegistro(Integer.toString(elRegistroESVO.getUnidadOrgan()));
        tramVO.setTipoRegistro(elRegistroESVO.getTipoReg());
        tramVO.setEjercicioRegistro(Integer.toString(elRegistroESVO.getAnoReg()));
        tramVO.setNumero(Long.toString(elRegistroESVO.getNumReg()));
        tramVO.setOrigen(elRegistroESVO.getIdServicioOrigen());
        //tramVO.setObservaciones(StringEscapeUtils.escapeHtml(tramForm.getObservaciones()));
        String obser = tramForm.getObservaciones();
        String observFichero = obser.replace("\r\n","<br>");
        tramVO.setObservaciones(observFichero);

        try {
              VisorRegistroManager.getInstance().cambiaEstadoAsiento(tramVO, usuario, 1, params);

        } catch (TramitacionException te) {
              request.setAttribute("errorCambiaEstadoAsiento", "NO SE HA PODIDO CAMBIAR EL ESTADO DE LA ANOTACION: " + te.getMessage());
          te.printStackTrace();
          m_Log.debug("<================= TramitacionAction ======================");
              return (mapping.findForward("consultaAsiento"));
        }

        session.removeAttribute("MantAnotacionRegistroForm");
        Vector consulta = new Vector();
        Vector consultaE = new Vector();
        try {
            if (JSP_Tramitacion.equals("buzonDeEntrada")) { 
                //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMANH0 (LISTADO TIPO 4)
                Vector listaCamposListados = AnotacionRegistroManager.getInstance().getCamposListado(4, params);
                tramForm.setCamposListados(listaCamposListados);
                Integer num_dias = new Integer(m_Conf.getString("Tramitacion.num_dias"));
                long date = System.currentTimeMillis();
                Date desde = new Date((date - (num_dias.longValue()*86400000)));
                Date hasta = new Date(date);
                SimpleDateFormat s = new SimpleDateFormat("dd/MM/yyyy");
                String fechaDesde = s.format(desde);
                String fechaHasta = s.format(hasta);

                tramVO.setSoloContarExpedientesBuzonEntrada(true);
                HashMap resultadosConsulta = VisorRegistroManager.getInstance().getAsientosEntradaRegistro(usuario, tramVO, params, fechaDesde, fechaHasta,"","","","","","","","","","","");
                consulta = (Vector)resultadosConsulta.get("resultados");
                Collection<String> errores = (Collection<String>) resultadosConsulta.get("errores");

                tramForm.setFechaDesde(fechaDesde);
                tramForm.setFechaHasta(fechaHasta);
                opcion="buzonDeEntrada";
                request.setAttribute("errores", errores);
            } else {
                return new ActionForward("/sge/Tramitacion.do?opcion=inicio");
            }


        } catch (TramitacionException te) {
          consulta = new Vector();
          consultaE = new Vector();
        }
        session.setAttribute("RelacionAsientos",consulta);
        session.setAttribute("RelacionExpedientes",consultaE);
        session.setAttribute("RelacionExpedientesInicial",consultaE);
      } else if ("consultar".equals(opcion)) {
          tramVO = tramForm.getTramitacion();

          ConsultaExpedientesValueObject consExpVO = new ConsultaExpedientesValueObject();
          String numeroExpediente = request.getParameter("numeroExpediente");
          tramVO.setNumeroExpediente(numeroExpediente);
          int i = TramitacionManager.getInstance().localizaExpediente(tramVO, params);
          if (i > 0) {
              consExpVO.setNumeroExpediente(numeroExpediente);
              Vector consulta = ConsultaExpedientesManager.getInstance().consultar(usuario, consExpVO, params, false, false,"","",true);
              if (consulta.size() > 0) {
                  TramitacionValueObject tVO = (TramitacionValueObject) consulta.firstElement();
                  tramVO.setNumeroExpediente(tVO.getNumero());
                  String respOpcion = "consultar";
                  tramVO.setRespOpcion(respOpcion);
                  tramForm.setTramitacion(tramVO);
                  opcion = "adjuntarNumero";
              }
          } else {
              opcion = "expedienteExiste";
          }
      } else if ("existeExp".equals(opcion)) {
          ConsultaExpedientesValueObject consExpVO = new ConsultaExpedientesValueObject();
          String numeroExpediente = request.getParameter("numeroExpediente");
          consExpVO.setNumeroExpediente(numeroExpediente);
          ConsultaExpedientesManager consExpManager = ConsultaExpedientesManager.getInstance();
          boolean esPendiente = consExpManager.esPendienteParaUsuario(usuario, consExpVO, params);
          if (esPendiente) {
          Vector consulta = ConsultaExpedientesManager.getInstance().consultar(usuario, consExpVO, params, false, false,"","",true);
          if (consulta.size() > 0) {
              TramitacionValueObject tVO = (TramitacionValueObject) consulta.firstElement();
              tVO.setRespOpcion("existe");
              tramForm.setTramitacion(tVO);
          } else  tramForm.setRespOpcion("noExiste");
          }else tramForm.setRespOpcion("noExiste");
        } else if ("historico".equals(opcion)) {
            Vector consulta = new Vector();
            try {
                boolean cargarCriterios = false;
                try{
                    ResourceBundle configRegistro = ResourceBundle.getBundle("Registro");
                    String propiedad = usuario.getOrgCod() + ConstantesDatos.CARGAR_NUEVOS_CRITERIOS_BUSQUEDA;                        
                    String sCargarCriterios = configRegistro.getString(propiedad);
                    if(sCargarCriterios!=null && "SI".equalsIgnoreCase(sCargarCriterios)) cargarCriterios = true;
                }catch(Exception e){
                    e.printStackTrace();
                    cargarCriterios = false;
                }//try-catch
               
                tramForm.setCargarNuevosCriteriosBuzonEntradaHistorico(cargarCriterios);
                tramForm.setEjercicioBuzonEntradaHistorico("");
                String ejercicio = "";
                tramForm.setNumAnotacionBuzonEntradaHistorico("");          
                String numAnotacion = "";                 
                tramForm.setDocumentoBuzonEntradaHistorico("");
                String documento = "";                 
                tramForm.setNombreBuzonEntradaHistorico("");                 
                String nombre = "";                 
                tramForm.setPrimerApellidoBuzonEntradaHistorico("");                 
                String primerApellido = "";                 
                tramForm.setSegundoApellidoBuzonEntradaHistorico("");
                m_Log.debug("segundoApellido" + tramForm.getSegundoApellidoBuzonEntradaHistorico());                 
                String segundoApellido = "";                 
                tramForm.setDescUnidadDestinoBuzonEntradaHistorico("");                 
                String descUnidadDestino = "";
                //Codigo asunto                 
                tramForm.setCodAsuntoBuzonEntradaHistorico("");                 
                String codAsunto = "";
                //Desc asunto                 
                tramForm.setDescAsuntoBuzonEntradaHistorico("");                 
                String descAsunto = "";
                tramForm.setCodRegistroTelematico("");
                //tramForm.setCodUnidadDestinoBuzonEntradaHistorico(tramForm.getCodUnidadDestinoBuzonEntrada());
                tramForm.setCodUnidadDestinoBuzonEntradaHistorico("");
                m_Log.debug("desc Asunto" +  tramForm.getCodUnidadDestinoBuzonEntradaHistorico());
                //String codVisUorDestino  = tramForm.getCodUnidadDestinoBuzonEntradaHistorico();
                String codVisUorDestino = "";
                //codUnidadInternoDestinoBuzonEntradaHistorico
                tramForm.setCodUnidadInternoDestinoBuzonEntradaHistorico("");
                m_Log.debug("codUorInterno" +  tramForm.getCodUnidadInternoDestinoBuzonEntradaHistorico());
                String codUorInterno = ""; 
                tramForm.setCodAsuntoSeleccionadoHistorico("");
                m_Log.debug("cod Asunto seleccionado" +  tramForm.getCodAsuntoSeleccionadoHistorico());
                String codAsuntoSeleccionado          = "";                 
                tramForm.setTipoRegistroAsuntoSeleccionadoHistorico("");
                m_Log.debug("tipo registro seleccionado" +  tramForm.getTipoRegistroAsuntoSeleccionadoHistorico());                 
                String tipoRegistroAsuntoSeleccionado = "";                 
                tramForm.setUnidadRegistroAsuntoSeleccionadoHistorico("");                                  
                String unidadRegistroAsuntoSeleccionado = ""; 
                /** SE VACIA EL EJERCICIO Y EL NÚMERO **/
                tramForm.setEjercicio("");
                tramForm.setNumero("");
                /** SE VACIA EL EJERCICIO Y EL NÚMERO **/ 
                String codUorInternoAnotacion = ""; 
                tramForm.setCodUnidadOrganicaAnotacionHistorico("");
                tramForm.setCodUnidadInternoAnotacionHistorico("");
                tramForm.setDescUnidadOrganicaAnotacionHistorico("");                  
                String fechaDesde = tramForm.getFechaDesde();
                String fechaHasta = tramForm.getFechaHasta();
                Integer num_dias = new Integer(m_Conf.getString("Tramitacion.num_dias"));
                long date = System.currentTimeMillis();                                  
                SimpleDateFormat s = new SimpleDateFormat("dd/MM/yyyy");                 
                if(fechaDesde==null || fechaDesde.equals("")){
                    Date desde = new Date((date - (num_dias.longValue()*86400000)));
                    fechaDesde = s.format(desde);
                }//if

                if(fechaHasta==null || fechaHasta.equals("")){
                    Date hasta = new Date(date);
                    fechaHasta = s.format(hasta);
                }
                
                tramForm.setCodClasificacionAsuntos("");
                tramForm.setDescClasificacionAsuntos("");
                tramForm.setUnidadRegistroClasifAsuntoSeleccionado("");
                tramForm.setCodTecnicoReferencia("");
                tramForm.setDescTecnicoReferencia("");
                 
                tramForm.setFechaDesdeHistorico(fechaDesde);                                  
                tramForm.setFechaHastaHistorico(fechaHasta);                   
                 
                Vector nuevasUOR = UORsManager.getInstance().getListaUORsPermisoUsuario(usuario,params);
                tramForm.setListaUnidadesDestinoBuzon(nuevasUOR);

                Vector asuntos = MantAsuntosManager.getInstance().getAsuntosCodificadosPermisoUsuario(usuario, "E", params);
                tramForm.setListaAsuntosCodificadosBuzon(asuntos);
                
                if (registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI")) {
                // clasificacion asuntos
                tramForm.setListaClasificacionAsuntos(MantClasifAsuntosManager.getInstance().cargarClasifAsuntos(0, params));
                // para los tecnicos de referencia
                tramForm.setTecnicosReferencia(TecnicoReferenciaManager.getInstance().loadTecnicosReferencia(params));
                }
                 
                /*********** #114893: SI SE TIENE ACTIVADO SÓLO EL PLUGIN DE REGISTRO PARA EL SGE, SE VAN A PAGINAR LOS RESULTADOS      *****/
                /*********** DEVUELTOS POR LA CONSULTA PARA QUE ÉSTA, SEA MÁS RÁPIDA, ALGO QUE DEMANDA LANBIDE. EN ESTE CASO SE HACE    *****/
                /*********** UNA REDIRECCIÓN A UN OCULTO DIFERENTE EN EL QUE NO SE HACE LA PAGINACIÓN, YA QUE ÉSTA, LA REALIZARÁ EL DAO *****/                 
                 
                ResourceBundle config = ResourceBundle.getBundle("Registro");
                String SERVICIOS = config.getString("Registro/" + usuario.getOrgCod() + "/serviciosDisp");
                if(SERVICIOS!=null && !"".equals(SERVICIOS)){            
                    String[] servicios = SERVICIOS.split(";");
                    if(servicios!=null && servicios.length==1 && servicios[0].equalsIgnoreCase("SGE")){
                        // Si sólo se busca en el Registro de Flexia, entonces se tiene en cuenta la paginación
                        //String pagina = tramForm.getTramitacion().getPaginaListado();
                        //String numLineasPagina = tramForm.getTramitacion().getNumLineasPaginaListado();
                        //tramVO.setPaginaListado(pagina);
                        //tramVO.setNumLineasPaginaListado(numLineasPagina);                         
                        // En esta parte sólo se cuenta el número
                        tramVO.setSoloContarExpedientesBuzonEntrada(true);
                        HashMap resultadosContar = registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI") ? VisorRegistroManager.getInstance().getAsientosExpedientesHistoricoPluginTecnicoReferencia(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion,tramForm.getCodClasificacionAsuntos(), tramForm.getUnidadRegistroClasifAsuntoSeleccionado(), tramForm.getCodTecnicoReferencia()) : VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion);                 
                        Vector salida = (Vector)resultadosContar.get("resultados");
                        session.setAttribute("numero_total_anotaciones_historico",Integer.toString(salida.size()));                                        
                        /*
                        tramVO.setSoloContarExpedientesBuzonEntrada(false);
                        HashMap resultadosConsulta = VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion);                
                        consulta = (Vector) resultadosConsulta.get("resultados");
                        request.setAttribute("errores", resultadosConsulta.get("errores"));
                        */
                        // Se redirige a un oculto en el que no es necesario paginar el resultado
                        //opcion = "historicoSinPaginar";
                     }else{ 
                        // HAY VARIOS SERVICIOS DE REGISTRO EXTERNO U OTRO DISTINTO AL SGE => SE CONSULTA TAL Y COMO SE HACÍA HASTA AHORA                         
                        HashMap resultadosConsulta = registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI") ? VisorRegistroManager.getInstance().getAsientosExpedientesHistoricoPluginTecnicoReferencia(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion,tramForm.getCodClasificacionAsuntos(), tramForm.getUnidadRegistroClasifAsuntoSeleccionado(), tramForm.getCodTecnicoReferencia()) : VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion);   
                        consulta = (Vector) resultadosConsulta.get("resultados");                        
                        request.setAttribute("errores", resultadosConsulta.get("errores"));
                        // Se redirige al ocultoListadoAsientosHistorico.jsp
                        opcion = "historico";
                    }//if
                    /*
                        String soloAnulados = "NO";
                        try{
                           soloAnulados = registroCong.getString(usuario.getOrgCod() + "/DESASOCIAR_SOLO_ANULADOS");

                        }catch(Exception ex){
                           m_Log.error("Se ha producido un error recuperando el valor que indica si se qrecuperan solo los anulados", ex);  
                           soloAnulados = "NO";
                        }//try-catch

                        session.setAttribute("recuperar_solo_exp_anulados",soloAnulados);
                    */
                 }//if

                /** ORIGINAL 
                HashMap resultadosConsulta = VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion);                
                consulta = (Vector) resultadosConsulta.get("resultados");
                request.setAttribute("errores", resultadosConsulta.get("errores"));
                **/

            } catch (TramitacionException te) {
                consulta = new Vector();
            } catch (Exception e) {//TODO: mirar que hacer si se produce un error en el ws
                if (consulta == null) {
                    consulta = new Vector();
                }//if
            }//catch

            session.setAttribute("RelacionAsientosHistorico", consulta);
            opcion = "historico";

        } else if ("buscar_historico".equals(opcion)) {

            Vector consulta = new Vector();

            try {
                
                boolean cargarCriterios = false;
                    try{
                        ResourceBundle configRegistro = ResourceBundle.getBundle("Registro");
                        String propiedad = usuario.getOrgCod() + ConstantesDatos.CARGAR_NUEVOS_CRITERIOS_BUSQUEDA;                        
                        String sCargarCriterios = configRegistro.getString(propiedad);
                        if(sCargarCriterios!=null && "SI".equalsIgnoreCase(sCargarCriterios)) cargarCriterios = true;

                    }catch(Exception e){
                        e.printStackTrace();
                        cargarCriterios = false;
                    }

                 tramForm.setCargarNuevosCriteriosBuzonEntradaHistorico(cargarCriterios);
                

                 tramForm.setEjercicioBuzonEntradaHistorico(request.getParameter("ejercicioBuzonEntradaHistorico"));
                 String ejercicio         = request.getParameter("ejercicioBuzonEntradaHistorico");
                 tramForm.setNumAnotacionBuzonEntradaHistorico(request.getParameter("numAnotacionBuzonEntradaHistorico"));
                 String numAnotacion      = request.getParameter("numAnotacionBuzonEntradaHistorico");
                 tramForm.setDocumentoBuzonEntradaHistorico(request.getParameter("documentoBuzonEntradaHistorico"));
                 String documento            = request.getParameter("documentoBuzonEntradaHistorico");
                 tramForm.setNombreBuzonEntradaHistorico(request.getParameter("nombreBuzonEntradaHistorico"));
                 String nombre         = request.getParameter("nombreBuzonEntradaHistorico");
                 tramForm.setPrimerApellidoBuzonEntradaHistorico(request.getParameter("primerApellidoBuzonEntradaHistorico"));
                 String primerApellido    = request.getParameter("primerApellidoBuzonEntradaHistorico");
                 tramForm.setSegundoApellidoBuzonEntradaHistorico(request.getParameter("segundoApellidoBuzonEntradaHistorico"));
                 String segundoApellido   = request.getParameter("segundoApellidoBuzonEntradaHistorico");
                 //codigo Unidad destino
                 tramForm.setCodUnidadDestinoBuzonEntradaHistorico(request.getParameter("codUnidadDestinoBuzonEntradaHistorico"));
                 String codVisUorDestino  = request.getParameter("codUnidadDestinoBuzonEntradaHistorico");
                 //descripcion Unidad destino
                 tramForm.setDescUnidadDestinoBuzonEntradaHistorico(request.getParameter("descUnidadDestinoBuzonEntradaHistorico"));
                 String descUnidadDestino = request.getParameter("descUnidadDestinoBuzonEntradaHistorico");
                 //descripcion asunto
                 tramForm.setDescAsuntoBuzonEntradaHistorico(request.getParameter("descAsuntoBuzonEntradaHistorico"));
                 String descAsunto = request.getParameter("descAsuntoBuzonEntradaHistorico");
                 //codAsuntoSeleccionado
                 tramForm.setCodAsuntoSeleccionadoHistorico(request.getParameter("codAsuntoSeleccionadoHistorico"));
                 String codAsuntoSeleccionado          = request.getParameter("codAsuntoSeleccionadoHistorico");
                 //tipoRegistroAsuntoSeleccionado
                 tramForm.setTipoRegistroAsuntoSeleccionadoHistorico(request.getParameter("tipoRegistroAsuntoSeleccionadoHistorico"));
                 String tipoRegistroAsuntoSeleccionado = request.getParameter("tipoRegistroAsuntoSeleccionadoHistorico");
                 //unidadRegistroAsuntoSeleccionado,
                 tramForm.setUnidadRegistroAsuntoSeleccionadoHistorico(request.getParameter("unidadRegistroAsuntoSeleccionadoHistorico"));
                 String unidadRegistroAsuntoSeleccionado = request.getParameter("unidadRegistroAsuntoSeleccionadoHistorico");
                 tramForm.setFechaDesdeHistorico(request.getParameter("fechaDesdeHistorico"));
                 String fechaDesde = request.getParameter("fechaDesdeHistorico");
                 tramForm.setFechaHastaHistorico(request.getParameter("fechaHastaHistorico"));
                 String fechaHasta = request.getParameter("fechaHastaHistorico");
                 //parametros procedentes de Buzon Entrada
                 String codUorInterno     =  request.getParameter("codUnidadInternoDestinoBuzonEntradaHistorico");
                 tramForm.setCodUnidadInternoDestinoBuzonEntradaHistorico(codUorInterno);

                 Vector nuevasUOR = UORsManager.getInstance().getListaUORsPermisoUsuario(usuario,params);
                 tramForm.setListaUnidadesDestinoBuzonHistorico(nuevasUOR);

                 Vector asuntos = MantAsuntosManager.getInstance().getAsuntosCodificadosPermisoUsuario(usuario, "E", params);
                 tramForm.setListaAsuntosCodificadosBuzonHistorico(asuntos);
                 
                 String codUorInternoAnotacion     =  request.getParameter("codUnidadInternoAnotacionHistorico");
                 
                  m_Log.debug("codUorInternoAnotacion en historico" +  codUorInternoAnotacion);
                 tramForm.setCodUnidadInternoAnotacionHistorico(codUorInternoAnotacion);
                 String registroTelematico = request.getParameter("codRegistroTelematico");
                 tramForm.setCodRegistroTelematico(registroTelematico);
                 tramVO.setRegistroTelematico(tramForm.getCodRegistroTelematico());
                
                m_Log.debug(tramForm.getCodClasificacionAsuntos());
                m_Log.debug(tramForm.getUnidadRegistroClasifAsuntoSeleccionado());
                m_Log.debug(tramForm.getCodTecnicoReferencia());

                HashMap resultadosConsulta = null;
              
                tramForm.setTipoRegistroAsuntoSeleccionadoHistorico(tipoRegistroAsuntoSeleccionado);
                
                /*************************************************************************************************************/
                /******** SI SÓLO ESTÁ ACTIVADO EL PLUGIN DE REGISTRO DEL SGE, ENTONCES SE REDIRIGE AL OCULTO QUE NO  ********/
                /******** REALIZA PAGINACIÓN DEL RESULTADO DE LAS ANOTACIONES DEL HISTÓRICO RECUPERADAS  *********************/
                /*************************************************************************************************************/
                ResourceBundle config = ResourceBundle.getBundle("Registro");
                String SERVICIOS = config.getString("Registro/" + usuario.getOrgCod() + "/serviciosDisp");
                if(SERVICIOS!=null && !"".equals(SERVICIOS)){
                    String[] servicios = SERVICIOS.split(";");
                    if(servicios!=null && servicios.length==1 && servicios[0].equalsIgnoreCase("SGE")){           
                        // SI SOLO ESTÁ ACTIVO EL SERVICIO DE REGISTRO DEL SGE
                        tramVO.setSoloContarExpedientesBuzonEntrada(true); 
                        String pagina = tramForm.getTramitacion().getPaginaListado();
                        String numLineasPagina = tramForm.getTramitacion().getNumLineasPaginaListado();
                        tramVO.setPaginaListado(pagina);
                        tramVO.setNumLineasPaginaListado(numLineasPagina);       
                        resultadosConsulta = registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI") ? VisorRegistroManager.getInstance().getAsientosExpedientesHistoricoPluginTecnicoReferencia(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion,tramForm.getCodClasificacionAsuntos(),tramForm.getUnidadRegistroClasifAsuntoSeleccionado(),tramForm.getCodTecnicoReferencia())  : VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion);                        
                        consulta = (Vector) resultadosConsulta.get("resultados");
                        session.setAttribute("numero_total_anotaciones_historico",Integer.toString(consulta.size()));
                        request.setAttribute("errores", resultadosConsulta.get("errores"));
                      
                    }else{
                        // SI HAY OTROS SERVICIOS
                        resultadosConsulta = registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI") ? VisorRegistroManager.getInstance().getAsientosExpedientesHistoricoPluginTecnicoReferencia(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion,tramForm.getCodClasificacionAsuntos(),tramForm.getUnidadRegistroClasifAsuntoSeleccionado(),tramForm.getCodTecnicoReferencia())  : VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion);
                        //HashMap resultadosConsulta = VisorRegistroManager.getInstance().getAsientosEntradaRegistro(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion);
                        consulta = (Vector) resultadosConsulta.get("resultados");
                        request.setAttribute("errores", resultadosConsulta.get("errores")); 
                    }
                }// if
                

            } catch (TramitacionException te) {
                consulta = new Vector();
            } catch (Exception e) {//TODO: mirar que hacer si se produce un error en el ws
                if (consulta == null) {
                    consulta = new Vector();
                }
            }

            session.setAttribute("RelacionAsientosHistorico", consulta);
            opcion = "historico";

        } else if ("cargar_paginaHistorico".equals(opcion)) {
        tramVO = tramForm.getTramitacion();
        tramForm.setTramitacion(tramVO);
        tramVO.setRegistroTelematico(tramForm.getCodRegistroTelematico());
	

        opcion = "cargar_paginaHistorico";
        
        /*************************************************************************************************************/
        /******** SI SÓLO ESTÁ ACTIVADO EL PLUGIN DE REGISTRO DEL SGE, ENTONCES SE REDIRIGE AL OCULTO QUE NO  ********/
        /******** REALIZA PAGINACIÓN DEL RESULTADO DE LAS ANOTACIONES DEL HISTÓRICO RECUPERADAS  *********************/
        /*************************************************************************************************************/
        ResourceBundle config = ResourceBundle.getBundle("Registro");
        String SERVICIOS = config.getString("Registro/" + usuario.getOrgCod() + "/serviciosDisp");
        if(SERVICIOS!=null && !"".equals(SERVICIOS)){
            String[] servicios = SERVICIOS.split(";");
            if(servicios!=null && servicios.length==1 && servicios[0].equalsIgnoreCase("SGE")){         
                // Si sólo se busca en el Registro de Flexia, entonces se tiene en cuenta la paginación
                String pagina = tramForm.getTramitacion().getPaginaListado();
                String numLineasPagina = tramForm.getTramitacion().getNumLineasPaginaListado();
                tramVO.setPaginaListado(pagina);
                tramVO.setNumLineasPaginaListado(numLineasPagina);                         
                /*** prueba buscador ***/
                String fechaDesde   = tramForm.getFechaDesdeHistorico();
                String fechaHasta   = tramForm.getFechaHastaHistorico();
                String ejercicio    = tramForm.getEjercicioBuzonEntradaHistorico();                                 
                String numAnotacion = tramForm.getNumAnotacionBuzonEntradaHistorico();                                                                    
                String documento    = tramForm.getDocumentoBuzonEntradaHistorico();                 
                String nombre       = tramForm.getNombreBuzonEntradaHistorico();                                  
                String primerApellido = tramForm.getPrimerApellidoBuzonEntradaHistorico();                        
                String segundoApellido = tramForm.getSegundoApellidoBuzonEntradaHistorico();
                String descUnidadDestino = tramForm.getDescUnidadDestinoBuzonEntradaHistorico();                 
                String codAsunto = tramForm.getCodAsuntoBuzonEntradaHistorico();                                            
                String descAsunto = tramForm.getDescAsuntoBuzonEntradaHistorico();                 
                String codVisUorDestino = tramForm.getCodUnidadDestinoBuzonEntradaHistorico();                 
                String codUorInterno = tramForm.getCodUnidadInternoDestinoBuzonEntradaHistorico();                 
                String codAsuntoSeleccionado = tramForm.getCodAsuntoSeleccionadoHistorico();                                   
                String tipoRegistroAsuntoSeleccionado = tramForm.getTipoRegistroAsuntoSeleccionadoHistorico();                 
                String unidadRegistroAsuntoSeleccionado = tramForm.getUnidadRegistroAsuntoSeleccionadoHistorico(); 
                String codUorInternoAnotacion= tramForm.getCodUnidadInternoAnotacionHistorico();
                  
                /*** prueba buscador ****/
                
                 /*
                String fechaDesde = request.getParameter("fechaDesde");;
                String fechaHasta = request.getParameter("fechaHasta");
                String documento = "";
                String nombre= "";
                String primerApellido = "";
                String segundoApellido = "";
                String codAsunto = "";
                String unidadRegistroAsuntoSeleccionado = "";
                String tipoRegistroAsuntoSeleccionado = "";
                String codUorInterno  = "";
                String ejercicio = "";
                String numAnotacion = ""; */
                
                // En esta parte sólo se cuenta el número
                //Comprobamos si ya tenemos los valores en la session
                Vector salida = null;
                if(session.getAttribute("anotaciones_historico_pagina") != null){
                    salida = (Vector) session.getAttribute("anotaciones_historico_pagina");
                    request.setAttribute("anotaciones_historico_pagina",salida);
                }else{
                    tramVO.setSoloContarExpedientesBuzonEntrada(false);
                    HashMap resultadosContar = registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI") ? VisorRegistroManager.getInstance().getAsientosExpedientesHistoricoPluginTecnicoReferencia(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion,tramForm.getCodClasificacionAsuntos(),tramForm.getUnidadRegistroClasifAsuntoSeleccionado(),tramForm.getCodTecnicoReferencia()) : VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacion);                 
                    salida = (Vector)resultadosContar.get("resultados");
                    session.setAttribute("numero_total_anotaciones_historico",Integer.toString(salida.size()));
                    request.setAttribute("anotaciones_historico_pagina",salida);
                }//if
                session.removeAttribute("anotaciones_historico_pagina");                                    

                // Auditoria de acceso al registro
                try {
                    AuditoriaManager.getInstance().auditarAccesoAnotacion(
                            ConstantesAuditoria.EXPEDIENTE_BUZON_ENTRADA_CONSULTA_LISTADO_HISTORICO, usuario, salida);
                } catch (TramitacionException te) {
                    m_Log.error("No se pudo registrar el evento de auditoria", te);
                }
                
                /*
                tramVO.setSoloContarExpedientesBuzonEntrada(false);
                HashMap resultadosConsulta = VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsunto,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion);                
                consulta = (Vector) resultadosConsulta.get("resultados");
                request.setAttribute("errores", resultadosConsulta.get("errores"));
                */
                // Se redirige a un oculto en el que no es necesario paginar el resultado
                //opcion = "historicoSinPaginar";
                
                opcion="ocultoHistoricoSinPaginar";
            }
        }        
        
        
      } else if("comprobarExpediente".equals(opcion)) {
      	tramVO = tramForm.getTramitacion();
      	String ejerNum=request.getParameter("ejerNum");               
        Vector l = new Vector();
        if(ejerNum != null) {
              StringTokenizer codigos = new StringTokenizer(ejerNum, "/", false);
          while (codigos.hasMoreTokens()) {
           String palabra = codigos.nextToken();
           l.addElement(palabra);
          }
        }
        String ejercicio = (String) l.firstElement();
        String numero = (String) l.lastElement();
        tramVO.setEjercicioRegistro(ejercicio);
        tramVO.setNumero(numero);
          String numeroExpediente = TramitacionManager.getInstance().comprobarExpediente(tramVO, params);
      	TramitacionValueObject tvo = new TramitacionValueObject();
          String respOpcion;
      	if(!numeroExpediente.equals("")) {
      		respOpcion = "expedienteAsociado";
      	} else {
      		respOpcion = "sinExpedienteAsociado";
      	}
      	tvo.setRespOpcion(respOpcion);
      	tvo.setNumero(numeroExpediente);

       	tramForm.setTramitacion(tvo);
       	opcion = "irOculto";
      } else if("recuperarAsiento".equals(opcion)) {
      	tramVO = tramForm.getTramitacion();
      	String ejerNum=request.getParameter("ejerNum");
        String listaExpedientesEliminar = request.getParameter("expedientes_eliminar");
        tramVO.setexpedientesEliminar(listaExpedientesEliminar);
        
          StringTokenizer codigos = new StringTokenizer(ejerNum, "/", false);
          tramVO.setEjercicioRegistro(codigos.nextToken());
          tramVO.setNumero(codigos.nextToken());
          VisorRegistroManager.getInstance().recuperarAsiento(tramVO, usuario, params);
          tramVO.setPaginaListado("1");

          Vector consulta;
        try {
         //criterios
             String ejercicio         = tramForm.getEjercicioBuzonEntrada();
             String numAnotacion      = tramForm.getNumAnotacionBuzonEntrada();
             String documento         = tramForm.getDocumentoBuzonEntrada();
             String nombre            = tramForm.getNombreBuzonEntrada();
             String primerApellido    = tramForm.getPrimerApellidoBuzonEntrada();
             String segundoApellido   = tramForm.getSegundoApellidoBuzonEntrada();
             String descUnidadDestino = tramForm.getDescUnidadDestinoBuzonEntrada();
             //String codAsunto         = tramForm.getCodAsuntoBuzonEntrada();
             String descAsunto        = tramForm.getDescAsuntoBuzonEntrada();
             String codVisUorDestino  = tramForm.getCodUnidadDestinoBuzonEntrada();
             String codUorInterno     = "";

             String codAsuntoSeleccionado          = tramForm.getCodAsuntoSeleccionado();
             String tipoRegistroAsuntoSeleccionado = tramForm.getTipoRegistroAsuntoSeleccionado();
             String unidadRegistroAsuntoSeleccionado = tramForm.getUnidadRegistroAsuntoSeleccionado();
             String codUorInternoAnotacionHistorico=tramForm.getCodUnidadInternoAnotacionHistorico();

            String fechaDesde = tramForm.getFechaDesde();
            String fechaHasta = tramForm.getFechaHasta();
            
            String pagina = tramForm.getTramitacion().getPaginaListado();
            String numLineasPagina = tramForm.getTramitacion().getNumLineasPaginaListado();
            tramVO.setPaginaListado(pagina);
            tramVO.setNumLineasPaginaListado(numLineasPagina); 

           //HashMap resultadosConsulta =  VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta, ejercicio, numAnotacion);
             HashMap resultadosConsulta = VisorRegistroManager.getInstance().getAsientosExpedientesHistorico(usuario, tramVO, params, fechaDesde, fechaHasta,documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno, ejercicio, numAnotacion,codUorInternoAnotacionHistorico);
            consulta = (Vector)resultadosConsulta.get("resultados");
            request.setAttribute("errores", resultadosConsulta.get("errores"));

            // Auditoria de acceso al registro
            AuditoriaManager.getInstance().auditarAccesoAnotacion(
                    ConstantesAuditoria.EXPEDIENTE_BUZON_ENTRADA_CONSULTA_LISTADO_HISTORICO, usuario, consulta);
        } catch (TramitacionException te) {
          consulta = new Vector();
        }
        session.setAttribute("RelacionAsientosHistorico",consulta);
        opcion = "cargar_paginaHistorico";
      } else if (opcion.equals("buscar_buzon_entrada")) {
          Vector consulta;
          opcion = "buzonDeEntrada";
          m_Log.debug("<=================" + opcion);
          try {
              if ((tramForm.getEjercicioBuzonEntrada()==null || "".equals(tramForm.getEjercicioBuzonEntrada())) ||(tramForm.getNumAnotacionBuzonEntrada()==null || "".equals(tramForm.getNumAnotacionBuzonEntrada())) ){
                  errors = tramForm.validate(mapping, request);

                  if (!(errors.isEmpty())) {
                      saveErrors(request, errors);
                      consulta = new Vector();
					  session.setAttribute("RelacionAsientos", consulta);
                    
                      m_Log.debug("<================= TramitacionAction ======================");
                      return new ActionForward(mapping.getInput());
                  }
              }
              m_Log.debug("completamos los campos del listado");
              tramForm.setCamposListados(AnotacionRegistroManager.getInstance().getCamposListado(4, params));
              String fechaDesde = tramForm.getFechaDesde();
              String fechaHasta = tramForm.getFechaHasta();

              /**** NUEVOS CRITERIOS DE BÚSQUEDA ******/
              String ejercicio          = tramForm.getEjercicioBuzonEntrada();
              String numAnotacion       = tramForm.getNumAnotacionBuzonEntrada();
              String documento         = tramForm.getDocumentoBuzonEntrada();
              String nombre            = tramForm.getNombreBuzonEntrada();
              String primerApellido    = tramForm.getPrimerApellidoBuzonEntrada();
              String segundoApellido   = tramForm.getSegundoApellidoBuzonEntrada();
              String codUnidadDestino  = tramForm.getCodUnidadDestinoBuzonEntrada();
              String descUnidadDestino = tramForm.getDescUnidadDestinoBuzonEntrada();
              //String codAsunto         = tramForm.getCodAsuntoBuzonEntrada();
              //String descAsunto        = tramForm.getDescAsuntoBuzonEntrada();
              String codUorInternoDestinoBuzonEntradaHistorico     = tramForm.getCodUnidadInternoDestinoBuzonEntradaHistorico();
              String codUorInterno = "";
              
              String codvisUorInternoAnotacion= tramForm.getCodUnidadOrganicaAnotacion();
              
              String codUorInternoAnotacion="";
              
              // Se recupera la información de la UOR de destino
              if(codUnidadDestino!=null && !"".equals(codUnidadDestino)){
                 UORDTO uor= UORsDAO.getInstance().getUORPorCodigoVisibleAll(codUnidadDestino,params);
                 codUorInterno = uor.getUor_cod();
                 m_Log.debug("codUorInterno destino:: " + codUorInterno);
              }
                      
              if(codvisUorInternoAnotacion!=null && !"".equals(codvisUorInternoAnotacion)){
                 UORDTO uor= UORsDAO.getInstance().getUORPorCodigoVisibleAll(codvisUorInternoAnotacion,params);
                 codUorInternoAnotacion = uor.getUor_cod();
                 m_Log.debug("codUorInterno Anotacion:: " + codUorInternoAnotacion);
              }

              String codAsuntoSeleccionado = tramForm.getCodAsuntoSeleccionado();
              String tipoRegistroAsuntoSeleccionado = tramForm.getTipoRegistroAsuntoSeleccionado();
              String unidadRegistroAsuntoSeleccionado = tramForm.getUnidadRegistroAsuntoSeleccionado();
              
              
              
              m_Log.debug("ejercicio: "  + ejercicio);
              m_Log.debug("n anotacion: "  + numAnotacion);
              m_Log.debug("documento: "  + documento);
              m_Log.debug("nombre: "  + nombre);
              m_Log.debug("primerApellido: "  + primerApellido + ", segundoApellido: " + segundoApellido);
              //m_Log.debug("codUnidadDestino: "  + codUnidadDestino);
              m_Log.debug("codUorInterno: "  + codUorInterno);
              m_Log.debug("descUnidadDestino: "  + descUnidadDestino);
              m_Log.debug("codAsuntoSeleccionado: "  + codAsuntoSeleccionado);
              m_Log.debug("tipoRegistroAsuntoSeleccionado: "  + tipoRegistroAsuntoSeleccionado);
              m_Log.debug("unidadRegistroAsuntoSeleccionado: "  + unidadRegistroAsuntoSeleccionado);
              
               
              request.setAttribute("cod_asunto_seleccionado",codAsuntoSeleccionado);
              request.setAttribute("tipo_registro_asunto_seleccionado",tipoRegistroAsuntoSeleccionado);
              request.setAttribute("unidad_registro_asunto_seleccionado",unidadRegistroAsuntoSeleccionado);
              request.setAttribute("unidad_registro_asunto_clasificacion_seleccionado",tramForm.getUnidadRegistroClasifAsuntoSeleccionado());
              String registroTelematico = request.getParameter("codRegistroTelematico");
              String regPendCatalogacion = request.getParameter("codRegPendCatalogacion");
              m_Log.debug("Request parametro Registro Telematico: " + registroTelematico);
              m_Log.debug("Request parametro Registro pendiente de Catalogacion: " + regPendCatalogacion);
              tramVO.setRegistroTelematico(registroTelematico);
              tramVO.setRegPendCatalogacion(regPendCatalogacion);
              /****************************************************************************************************/              
              /**** SE COMPRUEBA SI SOLO ESTÁ ACTIVADO EL SERVICIO DE BÚSQUEDA DEL SGE EN EL BUZÓN DE ENTRADA. ****/
              /****                         EN ESTE CASO, SE PAGINA EL RESULTADO                               ****/ 
              /****************************************************************************************************/
              if(UtilidadesRegistro.estaActivadoSoloServicioBusquedaBuzonEntrada("SGE",usuario.getOrgCod()))
                    tramVO.setSoloContarExpedientesBuzonEntrada(true);
              
              
              HashMap resultadosConsulta = registroCong.getString("INTEGRACION_TECNICO_REFERENCIA").equals("SI") ? VisorRegistroManager.getInstance().getAsientosEntradaRegistroPluginTecnico(usuario, tramVO, params, fechaDesde, fechaHasta, documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno,ejercicio,numAnotacion,codUorInternoAnotacion,tramForm.getCodClasificacionAsuntos(), tramForm.getUnidadRegistroClasifAsuntoSeleccionado(), tramForm.getCodTecnicoReferencia()) : VisorRegistroManager.getInstance().getAsientosEntradaRegistro(usuario, tramVO, params, fechaDesde, fechaHasta, documento,nombre,primerApellido,segundoApellido,codAsuntoSeleccionado,unidadRegistroAsuntoSeleccionado,tipoRegistroAsuntoSeleccionado,codUorInterno,ejercicio,numAnotacion,codUorInternoAnotacion);
                    
              consulta = (Vector)resultadosConsulta.get("resultados");
              session.setAttribute("consultaBuzonEntrada", consulta);
              Collection<String> errores = (Collection<String>) resultadosConsulta.get("errores");
              m_Log.debug("Erorres¿?:" + errores.toString());
              request.setAttribute("errores", errores);
              ArrayList<String> erroresBusquedaExtendida = (ArrayList<String>)resultadosConsulta.get("busquedaExtendidaDesactivada");
              request.setAttribute("busquedaExtendidaDesactivada",erroresBusquedaExtendida);


          } catch (TramitacionException te) {
              request.setAttribute("errorCargaBuzon", te.getMessage());
              consulta = new Vector();
          }
          session.setAttribute("RelacionAsientos", consulta);
      }else if("cargar_pagina_exp_filtrados".equals(opcion)) {
        m_Log.debug ("TramitacionAction --> opcion=cargar_pagina_exp_filtrados");
        String pagina=request.getParameter("paginaListado");
        tramVO.setPaginaListado(pagina);
        String lineas=request.getParameter("numLineasPaginaListado");
        tramVO.setNumLineasPaginaListado(lineas);
        String columna =  request.getParameter("columna");
        String nombreColumna =  request.getParameter("nombreColumna");
        String  tipoOrden = request.getParameter("tipoOrden");
        
        String desdeFichaExpediente= request.getParameter("desdeFichaExpediente");
        
        m_Log.debug("ORDENAR antes de buscar    " + columna + " , " +tipoOrden);

        if ("false".equals(tipoOrden)){
            tipoOrden="DESC";
        }else if("true".equals(tipoOrden)) {
             tipoOrden="ASC";
        }
        Vector consultaE = new Vector();

        String lineasPendientes = request.getParameter("lineasPendientes");        
        String columnaPendientes = request.getParameter("columnaPendientes");        
        String paginaPendientes = request.getParameter("paginaPendientes");        
        String tipoOrdenPendientes = request.getParameter("tipoOrdenPendientes"); 
        
         m_Log.debug("lineasPendientes: " + lineasPendientes+" columnaPendientes: " + columnaPendientes+" paginaPendientes: " + paginaPendientes+" tipoOrdenPendientes: " + tipoOrdenPendientes);
        

        if("si".equals(desdeFichaExpediente)){
        
          if (pagina == null || "".equals(pagina)) {
              String pagina_pendientes = (String) session.getAttribute("pagina_pendientes");
              tramVO.setPaginaListado(pagina_pendientes);
              
          }
          if (lineas == null || "".equals(lineas)) {
              String lineas_pendientes = (String) session.getAttribute("lineas_pendientes");
              tramVO.setNumLineasPaginaListado(lineas_pendientes);
          }
          if (columna == null || "".equals(columna)) {
              columna = (String) session.getAttribute("columna_pendientes");

          }
          if (tipoOrden == null || "".equals(tipoOrden)) {
              String tipoOrden_pendientes = (String) session.getAttribute("tipoOrden_pendientes");
              if ("false".equals(tipoOrden_pendientes)) {
                  tipoOrden = "DESC";
              } else if ("true".equals(tipoOrden_pendientes)) {
                  tipoOrden = "ASC";
              }
          }
        
         }
         else
         {
             session.removeAttribute("pagina_pendientes");
             session.removeAttribute("lineas_pendientes");
             session.removeAttribute("columna_pendientes");
             session.removeAttribute("tipoOrden_pendientes");
                
         }

        /********** SE RECUPERA EL CRITERIO DE BÚSQUEDA  *************/
        ValoresCriterioBusquedaExpPendientesVO criterio = tramForm.getValoresCriterioBusquedaExpPendientes();
        if(criterio!=null){
            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);
        }
        /********** FIN: RECUPERA EL CRITERIO DE BÚSQUEDA  *************/

        /** FILTRADO POR PROCEDIMIENTO  **/
        String codProcedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
        if(codProcedimientoFiltro!=null && !"".equalsIgnoreCase(codProcedimientoFiltro) && !"null".equalsIgnoreCase(codProcedimientoFiltro) && !"TODOSLOSPROCEDIMIENTOS".equalsIgnoreCase(codProcedimientoFiltro)){
            tramVO.setCodProcedimiento(codProcedimientoFiltro);
            

            /*** prueba **/
            //Se ha realizado un filtrado por procedimiento => Se comprueba si el procedimiento tiene su propia vista de expedientes pendientes
                        
            // SI SE HA REALIZADO UN FILTRADO POR CÓDIGO DE PROCEDIMIENTO.                
            if(CamposListadoPendientesProcedimientoManager.getInstance().tieneProcedimientoVistaExpedientesPendientes(codProcedimientoFiltro, usuario.getOrgCod(), params)){              
                // El procedimiento tiene definida su propia vista de expedientes pendientes
                opcion = "cargar_pagina_exp_pendientes_procedimiento";
                Vector<CamposListadoParametrizablesProcedimientoVO> listaCamposListados = CamposListadoPendientesProcedimientoManager.getInstance().getCamposListado(codProcedimientoFiltro, usuario.getOrgCod(), usuario.getIdioma(),params);
                request.setAttribute("campos_listado_pendientes_procedimiento",listaCamposListados);
            }
            
            /** prueba **/
        }        
        /** FILTRADO POR PROCEDIMIENTO  **/
        
        
        
        String  filtroRangoTemporal = request.getParameter("codRangoTempFiltro");	
        if (!"0".equals(filtroRangoTemporal) && !"1".equals(filtroRangoTemporal) && !"2".equals(filtroRangoTemporal))
            filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
        else
            session.setAttribute("codigo_rango_temp_exp_pendientes",filtroRangoTemporal);
        tramVO.setCodRangoTemporal(filtroRangoTemporal);

        m_Log.debug(" =====> filtroRangoTemporal: " + filtroRangoTemporal);
        
        

        if ((tramForm.getLeyenda()).equals("fueraPlazo"))
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 1);
        else if ((tramForm.getLeyenda()).equals("plazoCercaFin"))
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 0);
        else if ((tramForm.getLeyenda()).equals("pendientesEstaUnidad"))
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 2);
        else if ((tramForm.getLeyenda()).equals("pendientesOtraUnidad"))
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 3);
        else if ((tramForm.getLeyenda()).equals("expPlazoCercaFin")) 
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 4);
        else if ((tramForm.getLeyenda()).equals("expFueraPlazo")) 
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 5);
        else if ((tramForm.getLeyenda()).equals("expImportantes"))
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 6);
        else if ((tramForm.getLeyenda()).equals("pendientesEstaUnidadCargo"))
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 7);
	else if ((tramForm.getLeyenda()).equals("expAlarmas"))
            consultaE = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario,tramVO,params,columna,tipoOrden, 8);
       
        
        session.setAttribute("RelacionExpedientes",consultaE);
 
        DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
        //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
        Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
        // Se almacenan los procedimientos por los que se realiza el filtrado para que desde ocultoTramitacionExpedientesPendientes.jsp se puede rellenar el combo
        request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);
        
      }else if (opcion.equals("fueraPlazo")) {

        /*** original */
        String procedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
        m_Log.debug("El filtro por procedimiento en la bandeja de entrada es: " + procedimientoFiltro);
        if(procedimientoFiltro!=null && !"".equalsIgnoreCase(procedimientoFiltro) && !"null".equalsIgnoreCase(procedimientoFiltro) && !"TODOSLOSPROCEDIMIENTOS".equalsIgnoreCase(procedimientoFiltro)){
            tramVO.setCodProcedimiento(procedimientoFiltro);
        }
        
         String filtroRangoTemporal = (String) session.getAttribute("codigo_rango_temp_exp_pendientes");
          m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
          if (filtroRangoTemporal != null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)) {
              tramVO.setCodRangoTemporal(filtroRangoTemporal);
          }

            /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda que llegan por parámetro
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = null;

            // Si el código del campo del criterio de búsqueda no llega por parámetro se comprueba si está alojado en el formulario
            if((codigoCriterioBusqueda==null || codigoCriterioBusqueda.length()==0 || "".equals(codigoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoCriterioBusqueda();

            if((tipoCampoCriterioBusqueda==null || tipoCampoCriterioBusqueda.length()==0 || "".equals(tipoCampoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoCriterioBusqueda();

            if((esCampoSuplementarioCriterioBusqueda==null || esCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(esCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                esCampoSuplementarioCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().isCampoSuplementarioCriterioBusqueda());

            if((operadorCriterioBusqueda==null || operadorCriterioBusqueda.length()==0 || "".equals(operadorCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                operadorCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().getOperadorCriterioBusqueda());

            if((tipoCampoSuplementarioCriterioBusqueda==null || tipoCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(tipoCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoSuplementarioCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoSuplementarioCriterioBusqueda();

            if((codigoDesplegable==null || codigoDesplegable.length()==0 || "".equals(codigoDesplegable)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoDesplegable = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoDesplegable();

            if((valoresCriterioBusqueda==null || valoresCriterioBusqueda.length()==0 || "".equals(valoresCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                valores = tramForm.getValoresCriterioBusquedaExpPendientes().getValoresCriterioBusqueda();
            else
                valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);

            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            ValoresCriterioBusquedaExpPendientesVO criterio = null;
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);

          /************************************* criterio busqueda pendientes **********************************/

            
            Vector fueraPlazo = new Vector();
            //fueraPlazo = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 1);
            int numero = TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 1);
            session.setAttribute("estadoEstilo", "fueraPlazo");
            request.setAttribute("numero_expedientes_pendientes",numero);      
            //session.setAttribute("RelacionExpedientes", fueraPlazo);
            //(session.setAttribute("RelacionExpedientesInicial", fueraPlazo);
            tramForm.setLeyenda("fueraPlazo");

             // Se recuperan los procedimientos para cargar el combo de filtrado a nivel de procedimiento en la bandeja de expedientes pendientes
            
            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
            Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
            request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);
            
            

      } else if (opcion.equals("plazoCercaFin")) {
           String procedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
           m_Log.debug("El filtro por procedimiento en la bandeja de expedientes pendientes es: " + procedimientoFiltro);
           if(procedimientoFiltro!=null && !"".equalsIgnoreCase(procedimientoFiltro) && !"null".equalsIgnoreCase(procedimientoFiltro) && !"TODOSLOSPROCEDIMIENTOS".equalsIgnoreCase(procedimientoFiltro)){
                tramVO.setCodProcedimiento(procedimientoFiltro);
           }
           
           String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
                tramVO.setCodRangoTemporal(filtroRangoTemporal);
            }

           /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda que llegan por parámetro
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = null;

            // Si el código del campo del criterio de búsqueda no llega por parámetro se comprueba si está alojado en el formulario
            if((codigoCriterioBusqueda==null || codigoCriterioBusqueda.length()==0 || "".equals(codigoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoCriterioBusqueda();

            if((tipoCampoCriterioBusqueda==null || tipoCampoCriterioBusqueda.length()==0 || "".equals(tipoCampoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoCriterioBusqueda();

            if((esCampoSuplementarioCriterioBusqueda==null || esCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(esCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                esCampoSuplementarioCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().isCampoSuplementarioCriterioBusqueda());

            if((operadorCriterioBusqueda==null || operadorCriterioBusqueda.length()==0 || "".equals(operadorCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                operadorCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().getOperadorCriterioBusqueda());

            if((tipoCampoSuplementarioCriterioBusqueda==null || tipoCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(tipoCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoSuplementarioCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoSuplementarioCriterioBusqueda();

            if((codigoDesplegable==null || codigoDesplegable.length()==0 || "".equals(codigoDesplegable)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoDesplegable = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoDesplegable();

            if((valoresCriterioBusqueda==null || valoresCriterioBusqueda.length()==0 || "".equals(valoresCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                valores = tramForm.getValoresCriterioBusquedaExpPendientes().getValoresCriterioBusqueda();
            else
                valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);

            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            ValoresCriterioBusquedaExpPendientesVO criterio = null;
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);

          /************************************* criterio busqueda pendientes **********************************/


           //Vector plazoCercaFin = new Vector();
            //plazoCercaFin = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 0);
            int numero = TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 0);
            tramForm.setLeyenda("plazoCercaFin");
            session.setAttribute("estadoEstilo", "plazoCercaFin");
            //session.setAttribute("RelacionExpedientes", plazoCercaFin);
            //session.setAttribute("RelacionExpedientesInicial", plazoCercaFin);

            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
            Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
            request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);
            

      } else if (opcion.equals("cercaFinPlazo")) {
        Vector consultaE;
        Vector fueraPlazo = new Vector();
        consultaE = (Vector) session.getAttribute("RelacionExpedientesInicial");
        for (int i=0;i<consultaE.size();i++) {
          tramVO = (TramitacionValueObject) consultaE.elementAt(i);
          if (tramVO.getFueraDePlazo().equals("si")) {
              fueraPlazo.addElement(tramVO);
          }
        }
      opcion="expedientesPendientes";
      session.setAttribute("RelacionExpedientes",fueraPlazo);
        } else if (opcion.equals("pendientesEstaUnidad")) {

            String procedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
            m_Log.debug("El filtro por procedimiento en la bandeja de entrada es: " + procedimientoFiltro);
            
            if(procedimientoFiltro!=null && !"".equalsIgnoreCase(procedimientoFiltro) && !"null".equalsIgnoreCase(procedimientoFiltro)){
                tramVO.setCodProcedimiento(procedimientoFiltro);
            }
            
            String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
                tramVO.setCodRangoTemporal(filtroRangoTemporal);
            }

            /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda que llegan por parámetro
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = null;

            // Si el código del campo del criterio de búsqueda no llega por parámetro se comprueba si está alojado en el formulario
            if((codigoCriterioBusqueda==null || codigoCriterioBusqueda.length()==0 || "".equals(codigoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoCriterioBusqueda();

            if((tipoCampoCriterioBusqueda==null || tipoCampoCriterioBusqueda.length()==0 || "".equals(tipoCampoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoCriterioBusqueda();

            if((esCampoSuplementarioCriterioBusqueda==null || esCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(esCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                esCampoSuplementarioCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().isCampoSuplementarioCriterioBusqueda());

            if((operadorCriterioBusqueda==null || operadorCriterioBusqueda.length()==0 || "".equals(operadorCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                operadorCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().getOperadorCriterioBusqueda());

            if((tipoCampoSuplementarioCriterioBusqueda==null || tipoCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(tipoCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoSuplementarioCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoSuplementarioCriterioBusqueda();

            if((codigoDesplegable==null || codigoDesplegable.length()==0 || "".equals(codigoDesplegable)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoDesplegable = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoDesplegable();

            if((valoresCriterioBusqueda==null || valoresCriterioBusqueda.length()==0 || "".equals(valoresCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                valores = tramForm.getValoresCriterioBusquedaExpPendientes().getValoresCriterioBusqueda();
            else
                valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);

            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            ValoresCriterioBusquedaExpPendientesVO criterio = null;
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);

          /************************************* criterio busqueda pendientes **********************************/



            //Vector pendientesEstaUnidad = new Vector();
            //pendientesEstaUnidad = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 2);
            int numero = TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 2);
            tramForm.setLeyenda("pendientesEstaUnidad");
            session.setAttribute("estadoEstilo", "pendientesEstaUnidad");
            request.setAttribute("numero_expedientes_pendientes",numero);      
            //session.setAttribute("RelacionExpedientes", pendientesEstaUnidad);
            //session.setAttribute("RelacionExpedientesInicial", pendientesEstaUnidad);

            // Se recuperan los procedimientos para cargar el combo de filtrado a nivel de procedimiento en la bandeja de expedientes pendientes
            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
            Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
            request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);

        } else if (opcion.equals("pendientesEstaUnidadCargo")) { 
             String procedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
            m_Log.debug("El filtro por procedimiento en la bandeja de entrada es: " + procedimientoFiltro);
            
            if(procedimientoFiltro!=null && !"".equalsIgnoreCase(procedimientoFiltro) && !"null".equalsIgnoreCase(procedimientoFiltro)){
                tramVO.setCodProcedimiento(procedimientoFiltro);
            }
            
            String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
                tramVO.setCodRangoTemporal(filtroRangoTemporal);
            }

            /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda que llegan por parámetro
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = null;

            // Si el código del campo del criterio de búsqueda no llega por parámetro se comprueba si está alojado en el formulario
            if((codigoCriterioBusqueda==null || codigoCriterioBusqueda.length()==0 || "".equals(codigoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoCriterioBusqueda();

            if((tipoCampoCriterioBusqueda==null || tipoCampoCriterioBusqueda.length()==0 || "".equals(tipoCampoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoCriterioBusqueda();

            if((esCampoSuplementarioCriterioBusqueda==null || esCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(esCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                esCampoSuplementarioCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().isCampoSuplementarioCriterioBusqueda());

            if((operadorCriterioBusqueda==null || operadorCriterioBusqueda.length()==0 || "".equals(operadorCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                operadorCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().getOperadorCriterioBusqueda());

            if((tipoCampoSuplementarioCriterioBusqueda==null || tipoCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(tipoCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoSuplementarioCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoSuplementarioCriterioBusqueda();

            if((codigoDesplegable==null || codigoDesplegable.length()==0 || "".equals(codigoDesplegable)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoDesplegable = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoDesplegable();

            if((valoresCriterioBusqueda==null || valoresCriterioBusqueda.length()==0 || "".equals(valoresCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                valores = tramForm.getValoresCriterioBusquedaExpPendientes().getValoresCriterioBusqueda();
            else
                valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);

            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            ValoresCriterioBusquedaExpPendientesVO criterio = null;
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);

          /************************************* criterio busqueda pendientes **********************************/


 
            //Vector pendientesEstaUnidad = new Vector();
            //pendientesEstaUnidad = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 7);
            
            int numero = TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 7);
            tramForm.setLeyenda("pendientesEstaUnidadCargo");
            session.setAttribute("estadoEstilo", "pendientesEstaUnidadCargo");
            request.setAttribute("numero_expedientes_pendientes",numero);
            //session.setAttribute("RelacionExpedientes", pendientesEstaUnidad);
            //session.setAttribute("RelacionExpedientesInicial", pendientesEstaUnidad);

            // Se recuperan los procedimientos para cargar el combo de filtrado a nivel de procedimiento en la bandeja de expedientes pendientes
            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
            Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
            request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);
        
        }else if (opcion.equals("pendientesOtraUnidad")) {
            String procedimientoFiltrado = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
            m_Log.debug("Filtro por procedimiento en la bandeja de expedientes pendientes " + procedimientoFiltrado);
            if(procedimientoFiltrado!=null && !"".equalsIgnoreCase(procedimientoFiltrado) && !"null".equalsIgnoreCase(procedimientoFiltrado)){
                tramVO.setCodProcedimiento(procedimientoFiltrado);
            }
            
            String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
                tramVO.setCodRangoTemporal(filtroRangoTemporal);
            }

            /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda que llegan por parámetro
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = null;

            // Si el código del campo del criterio de búsqueda no llega por parámetro se comprueba si está alojado en el formulario
            if((codigoCriterioBusqueda==null || codigoCriterioBusqueda.length()==0 || "".equals(codigoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoCriterioBusqueda();

            if((tipoCampoCriterioBusqueda==null || tipoCampoCriterioBusqueda.length()==0 || "".equals(tipoCampoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoCriterioBusqueda();

            if((esCampoSuplementarioCriterioBusqueda==null || esCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(esCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                esCampoSuplementarioCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().isCampoSuplementarioCriterioBusqueda());

            if((operadorCriterioBusqueda==null || operadorCriterioBusqueda.length()==0 || "".equals(operadorCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                operadorCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().getOperadorCriterioBusqueda());

            if((tipoCampoSuplementarioCriterioBusqueda==null || tipoCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(tipoCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoSuplementarioCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoSuplementarioCriterioBusqueda();

            if((codigoDesplegable==null || codigoDesplegable.length()==0 || "".equals(codigoDesplegable)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoDesplegable = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoDesplegable();

            if((valoresCriterioBusqueda==null || valoresCriterioBusqueda.length()==0 || "".equals(valoresCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                valores = tramForm.getValoresCriterioBusquedaExpPendientes().getValoresCriterioBusqueda();
            else
                valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);

            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            ValoresCriterioBusquedaExpPendientesVO criterio = null;
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);

          /************************************* criterio busqueda pendientes **********************************/

            //Vector pendientesOtraUnidad = new Vector();
            //pendientesOtraUnidad = TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 3);
            int numero = TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 3);
            
            tramForm.setLeyenda("pendientesOtraUnidad");
            session.setAttribute("estadoEstilo", "pendientesOtraUnidad");
            //session.setAttribute("RelacionExpedientes", pendientesOtraUnidad);
            //session.setAttribute("RelacionExpedientesInicial", pendientesOtraUnidad);
            request.setAttribute("numero_expedientes_pendientes",numero);

            // Se recuperan los procedimientos para cargar el combo de filtrado a nivel de procedimiento en la bandeja de expedientes pendientes
            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
            Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
            request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);
      }else if("unidadesTramitadoras".equals(opcion)){
        // Se entra por aquí por medio de una llamada asíncrona. Se envia el codigo de un procedimiento
        // y se comprueba si su trámite de inicio tiene unidades tramitadoras. Si las tiene devuelve un si, en otro caso un no.
        String codPro = request.getParameter("codPro");
        m_Log.debug("codPro: " + codPro);
        String salida = "no";
        if(!"".equals(codPro)){
            Vector<UORDTO> unidades = TramitacionManager.getInstance().getUnidadesTramitadorasTramiteInicio(codPro, params);
            if(unidades.size()>0) // si el nº de unidades tramitadoras de inicio es mayor que 0
                salida = "si";

            /* Se recupera el tipo de unidad tramitadora para el trámite de inicio
                4 ? El trámite lo ejecuta la unidad del expediente.
                3 ? El trámite lo ejecuta la unidad que lo inicia.
                2 ? El trámite lo ejecuta la unidad del trámite anterior.
                1 ? El trámite lo ejecuta cualquier unidad orgánica (se elegirá una en el momento de instanciar el trámite).
                0 ? El trámite lo ejecuta cualquiera de las unidades incluidas en el atributo ?unidadesTramitadoras?. */
            int tipo = TramitacionManager.getInstance().getTipoUnidadTramitadoraTramiteInicio(codPro, params);
            salida+="&" + tipo;

            m_Log.debug("TramitacionAction se ha recuperado una unidad tramitadora");
            String numero = "varios".trim();
            if(unidades.size()==1){
               m_Log.debug("TramitacionAction como hay una unidad tramitadora se indica en la salida uno");
               UORDTO uor = (UORDTO)unidades.get(0);
               salida+="&uno&" + uor.getUor_cod();
            }
            else{
                m_Log.debug("TramitacionAction como hay una unidad tramitadora se indica en la salida varios");
                salida += "&" + numero;
            }
        }

        m_Log.debug("salida = " + salida);
        // Se devuelve la salida la salida
        PrintWriter out = response.getWriter();
        response.setContentType("text/html");
        out.println(salida.trim());
    }
    else if("listadoUnidadesTramitadoras".equals(opcion)){
        // Se recupera la lista de unidades tramitadoras del tramite de inicio del procedimiento para que sea seleccionada por el usuario
        String codPro = request.getParameter("codProc");
        m_Log.debug("codPro: " + codPro);
        String salida = "no";
        if(!"".equals(codPro)){
            Vector<UORDTO> unidades = TramitacionManager.getInstance().getUnidadesTramitadorasTramiteInicio(codPro, params);
            if(unidades.size()>0) // si el nº de unidades tramitadoras de inicio es mayor que 0
                salida = "si";

            m_Log.debug("opcion=listadoUnidadesTramitadoras codPro: " + codPro + " se han recuperado: " + unidades.size());
            request.getSession().setAttribute("unidadesTramiteInicio",unidades);
            //return mapping.findForward("/jsp/sge/listaUnidadesTramiteInicio.jsp");
            opcion = "listadoUnidadesTramitadoras";
            m_Log.debug("opcion=listadoUnidadesTramitadoras opcion salida: " + opcion);
        }
    }
    else
    if("recuperarUnidadesOrganicasTramite".equals(opcion)){
        // Se recuperan todas las unidades orgánicas para que el usuario seleccione la unidad que quiere que se
        // inicie junto al trámite de inicio
        String codPro = request.getParameter("codProc");
        m_Log.debug("codPro: " + codPro);
        String salida = "no";
        if(!"".equals(codPro)){
            Vector<UORDTO> unidades = TramitacionManager.getInstance().getTodasUnidadesOrganizativas(params);
            if(unidades.size()>0) // si el nº de unidades tramitadoras de inicio es mayor que 0
                salida = "si";

            m_Log.debug("opcion=recuperarUnidadesOrganicasTramite codPro: " + codPro + " se han recuperado: " + unidades.size());
            request.getSession().setAttribute("unidadesTramiteInicio",unidades);
            //return mapping.findForward("/jsp/sge/listaUnidadesTramiteInicio.jsp");
            opcion = "recuperarUnidadesOrganicasTramite";
            m_Log.debug("opcion=recuperarUnidadesOrganicasTramite opcion salida: " + opcion);
        }
    } else if (opcion.equals("expPlazoCercaFin")) {
           
          String procedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
          m_Log.debug("Filtro por procedimiento en bandeja de expedientes pendientes: " + procedimientoFiltro);
          if(procedimientoFiltro!=null && !"".equalsIgnoreCase(procedimientoFiltro) && !"null".equalsIgnoreCase(procedimientoFiltro) && !"TODOSLOSPROCEDIMIENTOS".equalsIgnoreCase(procedimientoFiltro)){
              tramVO.setCodProcedimiento(procedimientoFiltro);
          }
          
          String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
                tramVO.setCodRangoTemporal(filtroRangoTemporal);
            }

          /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda que llegan por parámetro
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = null;
            // Si el código del campo del criterio de búsqueda no llega por parámetro se comprueba si está alojado en el formulario
            if((codigoCriterioBusqueda==null || codigoCriterioBusqueda.length()==0 || "".equals(codigoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoCriterioBusqueda();

            if((tipoCampoCriterioBusqueda==null || tipoCampoCriterioBusqueda.length()==0 || "".equals(tipoCampoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoCriterioBusqueda();

            if((esCampoSuplementarioCriterioBusqueda==null || esCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(esCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                esCampoSuplementarioCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().isCampoSuplementarioCriterioBusqueda());

            if((operadorCriterioBusqueda==null || operadorCriterioBusqueda.length()==0 || "".equals(operadorCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                operadorCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().getOperadorCriterioBusqueda());

            if((tipoCampoSuplementarioCriterioBusqueda==null || tipoCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(tipoCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoSuplementarioCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoSuplementarioCriterioBusqueda();

            if((codigoDesplegable==null || codigoDesplegable.length()==0 || "".equals(codigoDesplegable)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoDesplegable = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoDesplegable();

            if((valoresCriterioBusqueda==null || valoresCriterioBusqueda.length()==0 || "".equals(valoresCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                valores = tramForm.getValoresCriterioBusquedaExpPendientes().getValoresCriterioBusqueda();
            else
                valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);

            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            ValoresCriterioBusquedaExpPendientesVO criterio = null;
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);
          /************************************* criterio busqueda pendientes **********************************/


           Vector expPlazoCercaFin = new Vector();
            //expPlazoCercaFin =  TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 4);
            int numero =  TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 4);

            tramForm.setLeyenda("expPlazoCercaFin");
            session.setAttribute("estadoEstilo", "expPlazoCercaFin");
            request.setAttribute("numero_expedientes_pendientes",numero);
            
            //session.setAttribute("RelacionExpedientes", expPlazoCercaFin);
            //session.setAttribute("RelacionExpedientesInicial",expPlazoCercaFin);
            opcion="expedientesPendientes";

            // Se recuperan los procedimientos para cargar el combo de filtrado a nivel de procedimiento en la bandeja de expedientes pendientes
            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
            Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
            request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);

      } else if (opcion.equals("expFueraPlazo")) {
          
          String procedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
          m_Log.debug("Filtro por procedimiento en bandeja de expedientes pendientes: " + procedimientoFiltro);
          if(procedimientoFiltro!=null && !"".equalsIgnoreCase(procedimientoFiltro) && !"null".equalsIgnoreCase(procedimientoFiltro) && !"TODOSLOSPROCEDIMIENTOS".equalsIgnoreCase(procedimientoFiltro)){
              tramVO.setCodProcedimiento(procedimientoFiltro);
          }
          
          String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
                tramVO.setCodRangoTemporal(filtroRangoTemporal);
            }
       
           /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda que llegan por parámetro
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = null;

            // Si el código del campo del criterio de búsqueda no llega por parámetro se comprueba si está alojado en el formulario
            if((codigoCriterioBusqueda==null || codigoCriterioBusqueda.length()==0 || "".equals(codigoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoCriterioBusqueda();

            if((tipoCampoCriterioBusqueda==null || tipoCampoCriterioBusqueda.length()==0 || "".equals(tipoCampoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoCriterioBusqueda();

            if((esCampoSuplementarioCriterioBusqueda==null || esCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(esCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                esCampoSuplementarioCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().isCampoSuplementarioCriterioBusqueda());

            if((operadorCriterioBusqueda==null || operadorCriterioBusqueda.length()==0 || "".equals(operadorCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                operadorCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().getOperadorCriterioBusqueda());

            if((tipoCampoSuplementarioCriterioBusqueda==null || tipoCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(tipoCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoSuplementarioCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoSuplementarioCriterioBusqueda();

            if((codigoDesplegable==null || codigoDesplegable.length()==0 || "".equals(codigoDesplegable)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoDesplegable = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoDesplegable();

            if((valoresCriterioBusqueda==null || valoresCriterioBusqueda.length()==0 || "".equals(valoresCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                valores = tramForm.getValoresCriterioBusquedaExpPendientes().getValoresCriterioBusqueda();
            else
                valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);
            
            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            ValoresCriterioBusquedaExpPendientesVO criterio = null;
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);

          /************************************* criterio busqueda pendientes **********************************/




           Vector expFueraPlazo = new Vector();
            // ORIGINAL
            //expFueraPlazo =  TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 5);
            int numero = TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 5);
            tramForm.setLeyenda("expFueraPlazo");
            session.setAttribute("estadoEstilo", "expFueraPlazo");
            request.setAttribute("numero_expedientes_pendientes",numero); 
            //session.setAttribute("RelacionExpedientes", expFueraPlazo);
            //session.setAttribute("RelacionExpedientesInicial",expFueraPlazo);
            opcion="expedientesPendientes";

            // Se recuperan los procedimientos para cargar el combo de filtrado a nivel de procedimiento en la bandeja de expedientes pendientes
            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
            Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
            request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);

      }else if (opcion.equals("expImportantes") ||(opcion.equals("expAlarmas"))) {
          
          String procedimientoFiltro = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
          if(procedimientoFiltro!=null && !"".equalsIgnoreCase(procedimientoFiltro) && !"null".equalsIgnoreCase(procedimientoFiltro) && !"TODOSLOSPROCEDIMIENTOS".equalsIgnoreCase(procedimientoFiltro)){
              tramVO.setCodProcedimiento(procedimientoFiltro);
          }
          
           String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
                tramVO.setCodRangoTemporal(filtroRangoTemporal);
            }
            
          m_Log.debug("FILTRO EXPEDIENTES IMPORTANTES codProcedimientoFiltro " + procedimientoFiltro);

         /************************************* criterio busqueda pendientes **********************************/
            // Se recupera el criterio de búsqueda que llegan por parámetro
            String codigoCriterioBusqueda                   = request.getParameter("codigoCriterioBusqueda");
            String tipoCampoCriterioBusqueda                = request.getParameter("tipoCampoCriterioBusqueda");
            String esCampoSuplementarioCriterioBusqueda     = request.getParameter("campoSuplementarioCriterioBusqueda");
            String operadorCriterioBusqueda                 = request.getParameter("operadorCriterioBusqueda");
            String tipoCampoSuplementarioCriterioBusqueda   = request.getParameter("tipoCampoSuplementarioCriterioBusqueda");
            String valoresCriterioBusqueda                  = request.getParameter("valoresCriterioBusqueda");
            String codigoDesplegable                        = request.getParameter("codigoDesplegable");

            ArrayList<String> valores = null;

            // Si el código del campo del criterio de búsqueda no llega por parámetro se comprueba si está alojado en el formulario
            if((codigoCriterioBusqueda==null || codigoCriterioBusqueda.length()==0 || "".equals(codigoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoCriterioBusqueda();

            if((tipoCampoCriterioBusqueda==null || tipoCampoCriterioBusqueda.length()==0 || "".equals(tipoCampoCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoCriterioBusqueda();

            if((esCampoSuplementarioCriterioBusqueda==null || esCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(esCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                esCampoSuplementarioCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().isCampoSuplementarioCriterioBusqueda());

            if((operadorCriterioBusqueda==null || operadorCriterioBusqueda.length()==0 || "".equals(operadorCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                operadorCriterioBusqueda = String.valueOf(tramForm.getValoresCriterioBusquedaExpPendientes().getOperadorCriterioBusqueda());

            if((tipoCampoSuplementarioCriterioBusqueda==null || tipoCampoSuplementarioCriterioBusqueda.length()==0 || "".equals(tipoCampoSuplementarioCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                tipoCampoSuplementarioCriterioBusqueda = tramForm.getValoresCriterioBusquedaExpPendientes().getTipoCampoSuplementarioCriterioBusqueda();

            if((codigoDesplegable==null || codigoDesplegable.length()==0 || "".equals(codigoDesplegable)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                codigoDesplegable = tramForm.getValoresCriterioBusquedaExpPendientes().getCodigoDesplegable();

            if((valoresCriterioBusqueda==null || valoresCriterioBusqueda.length()==0 || "".equals(valoresCriterioBusqueda)) && tramForm.getValoresCriterioBusquedaExpPendientes()!=null)
                valores = tramForm.getValoresCriterioBusquedaExpPendientes().getValoresCriterioBusqueda();
            else
                valores = this.tratarValoresCriterioBusqueda(valoresCriterioBusqueda);

            m_Log.debug("Valores recuperados: " + valores.size());
            m_Log.debug("codigoCriterioBusqueda: " + codigoCriterioBusqueda + "operadorCriterioBusqueda:" +
                    operadorCriterioBusqueda + ", tipoCampoCriterioBusqueda: " + tipoCampoCriterioBusqueda + ", valoresCriterioBusqueda: " +
                    valoresCriterioBusqueda + ", esCampoSuplementarioCriterioBusqueda: " + esCampoSuplementarioCriterioBusqueda + ",tipoCampoSuplementarioCriterioBusqueda: " +
                    tipoCampoSuplementarioCriterioBusqueda + ",codigoDesplegable: " + codigoDesplegable);

            ValoresCriterioBusquedaExpPendientesVO criterio = null;
            if(codigoCriterioBusqueda!=null && codigoCriterioBusqueda.length()>0 &&
                    tipoCampoCriterioBusqueda!=null && tipoCampoCriterioBusqueda.length()>0 && operadorCriterioBusqueda!=null &&
                    operadorCriterioBusqueda.length()>0){
                criterio = new ValoresCriterioBusquedaExpPendientesVO();
                criterio.setCodigoCriterioBusqueda(codigoCriterioBusqueda);
                criterio.setTipoCampoCriterioBusqueda(tipoCampoCriterioBusqueda);
                if(operadorCriterioBusqueda!=null && !"".equals(operadorCriterioBusqueda))
                    criterio.setOperadorCriterioBusqueda(Integer.parseInt(operadorCriterioBusqueda));
                else
                    criterio.setOperadorCriterioBusqueda(-1);
                criterio.setValoresCriterioBusqueda(valores);
                boolean esCampo = false;
                if(esCampoSuplementarioCriterioBusqueda!=null && "true".equals(esCampoSuplementarioCriterioBusqueda)){
                    esCampo = true;
                    criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                }
                criterio.setCampoSuplementarioCriterioBusqueda(esCampo);
                criterio.setTipoCampoSuplementarioCriterioBusqueda(tipoCampoSuplementarioCriterioBusqueda);
                criterio.setCodigoDesplegable(codigoDesplegable);
            }// if

            tramVO.setCriterioBusquedaExpPendientes(criterio);
            tramForm.setValoresCriterioBusquedaExpPendientes(criterio);
          /************************************* criterio busqueda pendientes **********************************/

          
           Vector expImportantes = new Vector();
           int numero = 0;
           if (opcion.equals("expImportantes")){
               // Se cuentan los expedientes pendientes destacados/importantes
               
               numero = TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 6);
               //expImportantes =  TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 6);
               tramForm.setLeyenda("expImportantes");
           }else{
               numero = TramitacionManager.getInstance().contarExpedientesPendientesFiltrados(usuario, tramVO, params, 8);
               //expImportantes =  TramitacionManager.getInstance().getExpedientesPendientesFiltrados(usuario, tramVO, params, 8);
               tramForm.setLeyenda("expAlarmas");
           }
           
            request.setAttribute("numero_expedientes_pendientes",numero);      
            session.setAttribute("estadoEstilo", "expFueraPlazo");
            //session.setAttribute("RelacionExpedientes", expImportantes);
            //session.setAttribute("RelacionExpedientesInicial",expImportantes);

            opcion="expedientesPendientes";

            // Se recuperan los procedimientos para cargar el combo de filtrado a nivel de procedimiento en la bandeja de expedientes pendientes
            DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
            //Vector procedimientos = DefinicionProcedimientosManager.getInstance().consultar(defProcVO, params);
            Vector procedimientos = DefinicionProcedimientosManager.getInstance().getListaProcedimientosFiltroBandejaPendientes(usuario, params);
            request.setAttribute("procedimientosFiltroExpPendientes",procedimientos);

     } else if ((opcion.equals("destacarExpediente")) ||(opcion.equals("desmarcarExpediente")) ){
        String numeroExp = request.getParameter("numero");
        String ejercicio = request.getParameter("ejercicio");

        int resultado = -1;
        if (opcion.equals("destacarExpediente")){
            resultado = TramitacionManager.getInstance().establecerExpedienteDestacado(ejercicio, numeroExp, params, 1);
        }else if (opcion.equals("desmarcarExpediente")){
            resultado = TramitacionManager.getInstance().establecerExpedienteDestacado(ejercicio, numeroExp, params, 0);
        }



        boolean actualizadoExp = false;
        if (resultado > 0) {    // si se ha actualizado algun expediente, modificamos la lista de expedientes pendientes
            Vector relacionExpedientes = (Vector) session.getAttribute("RelacionExpedientes");
            String leyenda = "";
            if (tramForm.getLeyenda() != null){
                leyenda = tramForm.getLeyenda();
            }

            
            actualizadoExp = actualizarRelacionExpedientes(numeroExp, relacionExpedientes, leyenda);
            if (actualizadoExp) {
                session.setAttribute("estadoEstilo", "expFueraPlazo");
                session.setAttribute("RelacionExpedientes", relacionExpedientes);
                session.setAttribute("RelacionExpedientesInicial", relacionExpedientes);

            }
        }

       String filtroRangoTemporal = (String)session.getAttribute("codigo_rango_temp_exp_pendientes");
            m_Log.debug("El filtro por rango temporal en la bandeja de entrada es: " + filtroRangoTemporal);
            if(filtroRangoTemporal!=null && !"".equals(filtroRangoTemporal) && !"null".equalsIgnoreCase(filtroRangoTemporal)){
                tramVO.setCodRangoTemporal(filtroRangoTemporal);
        }

        /** SE COMPRUEBA SI SE FILTRA POR PROCEDIMIENTO, Y EN ESE CASO, SI EL PROCEDIMIENTO TIENE DEFINIDA UNA VISTA DE EXPEDIENTES PROPIA */
        String filtroProcedimiento = (String)session.getAttribute("codigo_procedimiento_exp_pendientes");
        
        m_Log.debug(" =====> filtroProcedimiento: " + filtroProcedimiento);
        if(filtroProcedimiento!=null && !"".equalsIgnoreCase(filtroProcedimiento)){
            // Si se ha hecho filtro por procedimiento y el procedimiento tiene su propia vista de expedientes
            if(CamposListadoPendientesProcedimientoManager.getInstance().tieneProcedimientoVistaExpedientesPendientes(filtroProcedimiento, usuario.getOrgCod(), params)){
                opcion ="cargar_pagina_exp_pendientes_procedimiento";
                // Se recuperan los campos/columnas del listado del procedimiento
                Vector<CamposListadoParametrizablesProcedimientoVO> listaCamposListados = CamposListadoPendientesProcedimientoManager.getInstance().getCamposListado(filtroProcedimiento, usuario.getOrgCod(), usuario.getIdioma(),params);
                request.setAttribute("campos_listado_pendientes_procedimiento",listaCamposListados);            
            }            
        }//if
  
    }else if("limpiarCriterioBusqueda".equals(opcion)){
         m_Log.debug("**************** LIMPIAR EL CRITERIO DE BÚSQUEDA ************************");
         // SE VACÍAN LOS CRITERIOS DE BÚSQUEDA DE LA BANDEJA DE EXPEDIENTES PENDIENTES.
         tramForm.setValoresCriterioBusquedaExpPendientes(null);

     }else if("comprobarAsociacionMultiple".equalsIgnoreCase(opcion)){
         if(m_Log.isDebugEnabled()) m_Log.debug("comprobarAsociacionMultiple : BEGIN");
         //Recuperamos del fichero de propiedades de registro la propiedad que indica si se permite la la asociación o el inicio de multiples
         //expedientes con una misma entrada en el registro
         if(m_Log.isDebugEnabled()) m_Log.debug("Recuperamos la propiedad que indica si se pueden asociar o iniciar mas de un expediente con"
                 + "la misma entrada de registro ");
         Boolean opcionPermanencia = true;
         tramVO = tramForm.getTramitacion();
         try{
             //Recogemos el origen del registro
             String registroOrigen = (String) request.getParameter("registroOrigen");
             
             String origenesPermitidos = null;
             try{
                origenesPermitidos = registroCong.getString(usuario.getOrgCod() + ConstantesDatos.SERVICIO_VALIDO_PERMANENCIA_BUZON_ENTRADA);
                if(m_Log.isDebugEnabled()) m_Log.debug("origenesPermitidos = " + origenesPermitidos);
             }catch(Exception ex){
                m_Log.error("Se ha producido un error recuperando los origenes de registro que permiten mantener la anotación en el buzón", ex); 
                opcionPermanencia = false;
             }//try-catch
             
             //Recuperamos el valor que indica si se permite la permanencia de la anotación en el buzón
             String permanencia = null;
             try{
                permanencia = registroCong.getString(usuario.getOrgCod() + ConstantesDatos.PERMANENCIA_ANOTACION_BUZON_ENTRADA);
                if(m_Log.isDebugEnabled()) m_Log.debug("permanencia = " + permanencia);
             }catch(Exception ex){
                m_Log.error("Se ha producido un error recuperando el valor que indica si se que permite mantener la anotación en el buzón", ex);  
                opcionPermanencia = false;
             }//try-catch
             
             if(opcionPermanencia){
                if(permanencia.equalsIgnoreCase("SI")){ 
                    //String numExpediente = tramVO.getNumExpediente();
                    String numExpediente = tramVO.getNumeroExpediente();
                    if(m_Log.isDebugEnabled()) m_Log.debug("Recuperamos el número de expediente seleccionado = " + numExpediente);
                    if(numExpediente != null){
                        String[] datosNumExpediente = numExpediente.split("/");
                        String año = datosNumExpediente[0];
                        String codProc = datosNumExpediente[1];
                        String exp = datosNumExpediente[2];

                        if(m_Log.isDebugEnabled()) m_Log.debug("Comprobamos que el origen de la anotación este incluido en los servicios válidos");
                        String[] origenes = origenesPermitidos.split(";");
                        Boolean origenValido = false;
                        for(int x=0; x<origenes.length; x++){
                            if(registroOrigen.equalsIgnoreCase(origenes[x])){
                                if(m_Log.isDebugEnabled()) m_Log.debug("El origen de del registro es válido");
                                origenValido = true;
                            }//if(registroOrigen.equalsIgnoreCase(origenes[x]))
                        }//for(int x=0; x<origenes.length; x++)
                        
                        if(!origenValido){
                            if(m_Log.isDebugEnabled()) m_Log.debug("El origen de la anotación no es válido para mantener la anotación en el buzón -> " + registroOrigen);
                            opcionPermanencia = false;
                        }//if(!origenValido)
                        
                        if(opcionPermanencia){
                            if(m_Log.isDebugEnabled()) m_Log.debug("Expediente seleccionado = " + datosNumExpediente);
                            if(m_Log.isDebugEnabled()) m_Log.debug("código de procedimiento seleccionado = " + codProc);
                            if(m_Log.isDebugEnabled()) m_Log.debug("Recuperamos los expedientes para los que no se puede mantener la anotación"
                                    + "en el buzón");
                            try{
                                String codProcsRestringidos = registroCong.getString(usuario.getOrgCod() + ConstantesDatos.PROCEDIMIENTOS_RESTRINGIDOS_PERMANENCIA_ANOTACION);
                                if(m_Log.isDebugEnabled()) m_Log.debug("Códigos procedimientos restringidos = " + codProcsRestringidos);
                                String[] procsRestringidos = codProcsRestringidos.split(";");
                                for(int i=0; i<procsRestringidos.length; i++){
                                    if(codProc.equalsIgnoreCase(procsRestringidos[i])){
                                        if(m_Log.isDebugEnabled()) m_Log.debug("El procedimiento seleccionado es restringido");
                                        opcionPermanencia = false;
                                    }//if(codProc.equalsIgnoreCase(procsRestringidos[i]))
                                }//for(int i=0; i<procsRestringidos.length; i++)
                            }catch(Exception ex){
                                opcionPermanencia = false;
                                m_Log.error("Se ha producido un error recuperando los procedimientos restringidos que no pueden mantener la anotación"
                                        + "en el buzón", ex);
                            }//try-catch
                        }//if(opcionPermanencia)
                    }//if(numExpediente != null)
                }else{
                    opcionPermanencia = false;
                }//if(permanencia.equalsIgnoreCase("SI"))
             }//if(opcionPermanencia)
         }catch(Exception ex){
             opcionPermanencia = false;
             m_Log.error("Se ha producido un error recuperando la propiedad que indica si las anotaciones pueden permanecer en el buzón",ex);
         }//try-catch
         tramForm.setRespOpcion("permanenciaEnBuzon");
         tramForm.setOpcionPermanencia(opcionPermanencia);
         if(m_Log.isDebugEnabled()) m_Log.debug("comprobarAsociacionMultiple : END");
     }else if("comprobarAsociacionMultipleNuevoProcedimiento".equalsIgnoreCase(opcion)){
         if(m_Log.isDebugEnabled()) m_Log.debug("comprobarAsociacionMultipleNuevoProcedimiento : BEGIN");
         //Recuperamos del fichero de propiedades de registro la propiedad que indica si se permite la la asociación o el inicio de multiples
         //expedientes con una misma entrada en el registro
         if(m_Log.isDebugEnabled()) m_Log.debug("Recuperamos la propiedad que indica si se pueden asociar o iniciar mas de un expediente con"
                 + "la misma entrada de registro ");
         Boolean opcionPermanencia = true;
         //Recogemos el origen del registro
        String registroOrigen = (String) request.getParameter("tipoRegistroOrigen");
             
        //Recogemos los parametros seleccionados
        String codProc = (String) request.getParameter("codProcedimiento");
        String codMunicipio = (String) request.getParameter("codMunicipio");
        String uor = (String) request.getParameter("uor");
        String unidadTramiteInicioSeleccionada = (String) request.getParameter("unidadTramiteInicioSeleccionada");
        String tipoRegistroOrigen = (String) request.getParameter("tipoRegistroOrigen");
        tramVO = tramForm.getTramitacion();
        try{
            String origenesPermitidos = null;
            try{
            origenesPermitidos = registroCong.getString(usuario.getOrgCod() + ConstantesDatos.SERVICIO_VALIDO_PERMANENCIA_BUZON_ENTRADA);
            if(m_Log.isDebugEnabled()) m_Log.debug("origenesPermitidos = " + origenesPermitidos);
            }catch(Exception ex){
            m_Log.error("Se ha producido un error recuperando los origenes de registro que permiten mantener la anotación en el buzón", ex); 
            opcionPermanencia = false;
            }//try-catch

            //Recuperamos el valor que indica si se permite la permanencia de la anotación en el buzón
            String permanencia = null;
            try{
            permanencia = registroCong.getString(usuario.getOrgCod() + ConstantesDatos.PERMANENCIA_ANOTACION_BUZON_ENTRADA);
            if(m_Log.isDebugEnabled()) m_Log.debug("permanencia = " + permanencia);
            }catch(Exception ex){
            m_Log.error("Se ha producido un error recuperando el valor que indica si se que permite mantener la anotación en el buzón", ex);  
            opcionPermanencia = false;
            }//try-catch

            if(opcionPermanencia){
            if(permanencia.equalsIgnoreCase("SI")){
                if(m_Log.isDebugEnabled()) m_Log.debug("Comprobamos que el origen de la anotación este incluido en los servicios válidos");
                String[] origenes = origenesPermitidos.split(";");
                Boolean origenValido = false;
                for(int x=0; x<origenes.length; x++){
                    if(registroOrigen.equalsIgnoreCase(origenes[x])){
                        if(m_Log.isDebugEnabled()) m_Log.debug("El origen de del registro es válido");
                        origenValido = true;
                    }//if(registroOrigen.equalsIgnoreCase(origenes[x]))
                }//for(int x=0; x<origenes.length; x++)

                if(!origenValido){
                    if(m_Log.isDebugEnabled()) m_Log.debug("El origen de la anotación no es válido para mantener la anotación en el buzón -> " + registroOrigen);
                    opcionPermanencia = false;
                }//if(!origenValido)

                if(opcionPermanencia){
                    if(m_Log.isDebugEnabled()) m_Log.debug("código de procedimiento seleccionado = " + codProc);
                    if(m_Log.isDebugEnabled()) m_Log.debug("Recuperamos los expedientes para los que no se puede mantener la anotación"
                            + "en el buzón");
                    try{
                        String codProcsRestringidos = registroCong.getString(usuario.getOrgCod() + ConstantesDatos.PROCEDIMIENTOS_RESTRINGIDOS_PERMANENCIA_ANOTACION);
                        if(m_Log.isDebugEnabled()) m_Log.debug("Códigos procedimientos restringidos = " + codProcsRestringidos);
                        String[] procsRestringidos = codProcsRestringidos.split(";");
                        for(int i=0; i<procsRestringidos.length; i++){
                            if(codProc.equalsIgnoreCase(procsRestringidos[i])){
                                if(m_Log.isDebugEnabled()) m_Log.debug("El procedimiento seleccionado es restringido");
                                opcionPermanencia = false;
                            }//if(codProc.equalsIgnoreCase(procsRestringidos[i]))
                        }//for(int i=0; i<procsRestringidos.length; i++)
                    }catch(Exception ex){
                        opcionPermanencia = false;
                        m_Log.error("Se ha producido un error recuperando los procedimientos restringidos que no pueden mantener la anotación"
                                + "en el buzón", ex);
                    }//try-catch
                }//if(opcionPermanencia)
                }else{
                opcionPermanencia = false;
            }//if(permanencia.equalsIgnoreCase("SI"))
            }//if(opcionPermanencia)
        }catch(Exception ex){
            opcionPermanencia = false;
            m_Log.error("Se ha producido un error recuperando la propiedad que indica si las anotaciones pueden permanecer en el buzón",ex);
        }//try-catch
        if(m_Log.isDebugEnabled()) m_Log.debug("comprobarAsociacionMultipleNuevoProcedimiento : END");
        tramForm.setRespOpcion("permanenciaEnBuzonNuevoExpediente");
        request.setAttribute("opcionPermanencia", opcionPermanencia);
        request.setAttribute("codMunicipio", codMunicipio);
        request.setAttribute("uor", uor);
        request.setAttribute("unidadTramiteInicioSeleccionada", unidadTramiteInicioSeleccionada);
        request.setAttribute("tipoRegistroOrigen", tipoRegistroOrigen);
        
     }else if (opcion.equals("verAsociados")){
        try{                 
            ArrayList<String> listaExpedientes = new ArrayList<String>();        

            String cod_dep = request.getParameter("cod_departamento");              
            request.setAttribute("cod_departamento",cod_dep );
            String cod_uni = request.getParameter("cod_unidad_reg");              
            request.setAttribute("cod_unidad_reg", cod_uni);
            String ejerc = request.getParameter("ejercicio");              
            request.setAttribute("ejercicio",ejerc); 
            String tipo_reg = request.getParameter("tipo_reg");
            request.setAttribute("tipo_reg",tipo_reg);
            String bloquearPantalla = request.getParameter("bloquearPantalla");
            request.setAttribute("bloquearPantalla", bloquearPantalla);
            /*
            String recuperarAnulados = request.getParameter("recuperarAnulados");   
            if ("SI".equals(recuperarAnulados))listaExpedientes = TramitacionManager.getInstance().getExpedientesAsociados(cod_dep,ejerc, tipo_reg, params);                            
            else listaExpedientes = TramitacionManager.getInstance().getTodosExpedientesAsociados(cod_dep,ejerc, tipo_reg, params);                            
            * */
            String codOrganizacion = Integer.toString(usuario.getOrgCod());
            PluginBusquedaExpedientesRelacionadosHistorico pluginBusqueda = 
                    PluginExpedientesRelacionadosHistoricoFactoria.getPluginBusquedaExpedientesRelacionadosHistorico(codOrganizacion);
            
            //Cambiamos el parametro del plugin, por el de la unidad, ya que el departamento nunca varía
           //listaExpedientes = pluginBusqueda.listaExpedientes(cod_dep, ejerc, tipo_reg, params);
           
                listaExpedientes = pluginBusqueda.listaExpedientes(cod_uni, ejerc, tipo_reg,params);
           
            
            
            request.setAttribute("Expedientes",listaExpedientes);                                                  
        }catch (Exception ex) {
            m_Log.error("Se ha producido un error recuperando la lista de expdientes asociados en operacion verAsociados : ",ex);
            ex.printStackTrace(); 
        }//try-catch
     }else if (opcion.equals("comprobacionesDesasociacion")){  
         //Este metodo mediante el plugin de desasociacion hace las comprobaciones necesarias unicas por cada cliente
         //para saber si nos esta permitido desasociar los expedientes de la entrada de registro y ademas devuelve tambien
         //el numero de expedientes asociados a la entrada
        try{                             
            String cod_dep = request.getParameter("cod_departamento");              
            request.setAttribute("cod_departamento",cod_dep );
            String cod_uni = request.getParameter("cod_unidad_reg");              
            request.setAttribute("cod_unidad_reg", cod_uni);
            String ejerc = request.getParameter("ejercicio");              
            request.setAttribute("ejercicio",ejerc);
            String tipo_reg = request.getParameter("tipo_reg");
            request.setAttribute("tipo_reg",tipo_reg);
            //String numeroExp = TramitacionManager.getInstance().getNumeroExpedientesAsociadosAnulados(cod_dep, cod_uni, ejerc, tipo_reg, params);                                        
            //String numeroExp = TramitacionManager.getInstance().getNumeroExpedientesAsociados(cod_dep, ejerc, tipo_reg,"NO", params);
            String codOrganizacion = Integer.toString(usuario.getOrgCod());
            PluginBusquedaExpedientesRelacionadosHistorico pluginBusqueda = 
                    PluginExpedientesRelacionadosHistoricoFactoria.getPluginBusquedaExpedientesRelacionadosHistorico(codOrganizacion);
            
            Boolean bloquearPantalla = pluginBusqueda.bloquearPantalla(codOrganizacion);
            
            m_Log.info("Control de llamada a expedientesAsociados"); 
             ExpedientesAsociadosVO expedientesAsociados=new ExpedientesAsociadosVO();
            
             //Modificamos el plugin para que filtre por uor y no por departamento (que nunca varía)
             //expedientesAsociados = pluginBusqueda.getComprobarDesasociacion(departamento, ejerc, tipo_reg, params);
            expedientesAsociados = pluginBusqueda.getComprobarDesasociacion(cod_uni, ejerc, tipo_reg, params);
          
            
            StringBuilder xmlSalida = new StringBuilder();
            xmlSalida.append("<RESPUESTA>");
                xmlSalida.append("<BLOQUEAR_PANTALLA>");
                    xmlSalida.append(String.valueOf(bloquearPantalla));
                xmlSalida.append("</BLOQUEAR_PANTALLA>");
                xmlSalida.append("<PERMITIMOS_DESASOCIAR>");
                    xmlSalida.append(String.valueOf(expedientesAsociados.getPermitimosDesasociar()));
                xmlSalida.append("</PERMITIMOS_DESASOCIAR>");
                xmlSalida.append("<NUM_EXPEDIENTES_ASOCIADOS>");
                    xmlSalida.append(String.valueOf(expedientesAsociados.getNumExpedientesAsociados()));
                xmlSalida.append("</NUM_EXPEDIENTES_ASOCIADOS>");
            xmlSalida.append("</RESPUESTA>");
            m_Log.info("Control de llamada a expedientesAsociados fin de consutruccion xmlsalida");
            
            response.setContentType("text/xml");
            response.setCharacterEncoding("UTF-8"); 
            PrintWriter out = response.getWriter();
            out.println(xmlSalida.toString());   
            out.flush();
            out.close();
            
        }catch (Exception ex) {
            m_Log.error("Se ha producido un error recuperando el numero de expedientes asociados anulados : ",ex);
            ex.printStackTrace();
        }//try-catch     
     }else if ("CompruebaPermisoHist".equals(opcion)){              
         try
         {  
            String cod_dep = request.getParameter("cod_departamento").toString();
            String cod_uni = request.getParameter("cod_unidad_reg").toString(); 
            String ejerc = request.getParameter("ejercicio").toString(); 
            String tipo_reg = request.getParameter("tipo_reg").toString();
                                                
            String fecha = TramitacionManager.getInstance().getFechaPresentacion(cod_dep, cod_uni, ejerc, tipo_reg, params);
            
            SimpleDateFormat df=new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
            Calendar cal=Calendar.getInstance();
            Date d1=df.parse(fecha);
            cal.setTime(d1);                        
            
            int posicion = ejerc.indexOf("/");
            String ejercicio = ejerc.substring(0, posicion);
            String numero = ejerc.substring(posicion+1,ejerc.length());                 
            
            ExpedientesRelacionadosHistoricoVO registro = new ExpedientesRelacionadosHistoricoVO();
            registro.setNum_entrada(numero);
            registro.setEjercicio(ejercicio);
            registro.setFecha_desasociada(Calendar.getInstance());
            registro.setFecha_presentacion(cal);
            registro.setUsuario(Integer.toString(usuario.getIdUsuario()));  
            registro.setCodigoIdiomaUsuario(usuario.getIdioma());
            
            String listaExpedientes = request.getParameter("listaExp");
            String[] expedientes = listaExpedientes.split(",");            
            String posible = "";
            String organizacion = "0";
            String salida = "";
            String procedimiento = "";
            String error = "";
            int posicion1 = 0;
            int posicion2 = 0;
            Map Listaprocedimientos = new HashMap();
            
            for (int i=0;i<expedientes.length;i++) {            
                registro.setExpediente(expedientes[i]);
                          
                posicion1 = expedientes[i].indexOf("/");
                procedimiento = expedientes[i].substring(posicion1+1,expedientes[i].length());
                posicion2 = procedimiento.indexOf("/")+1;
                procedimiento = expedientes[i].substring(posicion1+1,posicion2+posicion1).toString();
                
                if (Listaprocedimientos.get(procedimiento) == null){    
                  
                   PluginExpedientesRelacionadosHistorico plugin = PluginExpedientesRelacionadosHistoricoFactoria.getImplClass(organizacion, procedimiento, params);                    
                   ResultadoPluginExpRelHist resultados = plugin.recuperarPermisosDeshacerRelacion(registro);
                   
                   // ResultadoPluginExpRelHist resultados = PluginExpedientesRelacionadosHistoricoFactoria.getImplClass(organizacion,procedimiento,params).recuperarPermisosDeshacerRelacion(registro);                                                            
                   //ResultadoPluginExpRelHist resultados = new ResultadoPluginExpRelHist();
                    /* 
                    if(resultados.getStatus() == null)
                        posible = "No se ha podido conectar al servicio RGI.";                        
                    else{*/
                        if (resultados.getStatus() == 0)
                            posible = "SI";                            
                        else
                            posible = resultados.getMensajeError();
                            
                    //}
                    Listaprocedimientos.put(procedimiento,posible);    
                }else{
                    posible = Listaprocedimientos.get(procedimiento).toString();
                }
                
                if (posible != "SI")
                {
                    if (salida == "")
                        salida = expedientes[i] + ": " + posible;
                    else
                        salida += "||" + expedientes[i] + ": " + posible;
                }                                       
            }
            salida = salida.replace("'","");

            response.setContentType("text/xml"); 
            PrintWriter out = response.getWriter();
            out.println(salida);
            out.flush();
            out.close();
          }catch (Exception ex) {
              m_Log.error("Se ha producido un error operacion CompruebaPermisoHist: ",ex);
              ex.printStackTrace();
          }  
    } else if(opcion.equals("recuperarDatosExpediente")){
        Connection con = null; 
        AdaptadorSQLBD adapt = null;
        GeneralValueObject datos = null;
        String tramAbiertos = "";
        
        try {
            adapt = new AdaptadorSQLBD(params);
            con = adapt.getConnection();
            
            int codOrganizacion = Integer.parseInt(request.getParameter("codOrganizacion"));
            String numExpediente = request.getParameter("numExpediente");
            String[] partes = numExpediente.split("/");
            int ejercicio = Integer.parseInt(partes[0]);
            
            m_Log.debug("Va a recuperar datos de expediente");
            datos = TramitacionManager.getInstance().recuperarDatosExpediente(codOrganizacion, ejercicio, numExpediente, partes[1], adapt, con);
            m_Log.debug("Datos del expediente recuperados");
            
            retornarJSON(new Gson().toJson(datos),response);
        } catch (BDException ex) {
            m_Log.error("Ha ocurrido un error al obtener una conexión a la bbdd");
            ex.printStackTrace();
        } catch (SQLException sqle) {
            m_Log.error("Ha ocurrido un error al recuperar los trámites abiertos");
            sqle.printStackTrace();
        } finally {
            if(con!=null) try {
                con.close();
            } catch (SQLException ex) {
                m_Log.error("Error al cerrar la conexión de bbdd");
                ex.printStackTrace();
            }
        }
    }    
    } else { // No hay usuario. 
      m_Log.debug("MantAnotacionRegistroAction --> no hay usuario");
      opcion = "no_usuario";
    }

  /* Redirigimos al JSP de salida*/
    m_Log.debug("<================= TramitacionAction ("+opcion+")======================");
    return (mapping.findForward(opcion));

/*
private Vector listaTemasSeleccionados(String listTemasSelecc) {
  Vector lista = new Vector();
  StringTokenizer valores = null;
  if (listTemasSelecc != null) {
    valores = new StringTokenizer(listTemasSelecc,"§¥,",false);
    while (valores.hasMoreTokens()) {
      String valor = valores.nextToken();
      lista.addElement(valor);
    }
  }
  return lista;
}
*/
    }

      public MessageResources getResources(){
          return null;
      }


      // Modifica el valor del expediente almacenado en la sesion que ha sido Marcado/Desmarcado
      // Cuando se desmarca/marca un expediente se debe actulizar en la lista que se le muestra al usuario.(mateniendo la misma leyenda si la busqueda habia sido filtrada)
      // Un caso especial es cuando hemos filtrado la busqueda por exp. destcados y desmarcamos un expediente: en ese caso se debe quitar de la vista.
      private boolean actualizarRelacionExpedientes(String numexpModificado, Vector relacionExpedientes, String leyenda) {

          int numRelacionExpedientes = relacionExpedientes.size();
          boolean expActualizado = false;

          for (int i = 0; i < numRelacionExpedientes; i++) {
              TramitacionValueObject tramE = (TramitacionValueObject) relacionExpedientes.elementAt(i);
              if (numexpModificado.equals(tramE.getNumero())) {
                  // modificamos la marca del expediente del expediente
                  if (tramE.getExpImportante().equals("N")) {
                      tramE.setExpImportante("S");
                      if (leyenda.equals("expImportantes")){    // si estamos en la pantalla que solo nos muestra los expedientes destacados
                                                                // debemos borrarlo de la lista
                          relacionExpedientes.removeElementAt(i);
                      }else relacionExpedientes.setElementAt(tramE, i);
                      expActualizado = true;
                      return expActualizado;

                  } else if (tramE.getExpImportante().equals("S")) {
                      tramE.setExpImportante("N");
                      if (leyenda.equals("expImportantes")){
                           relacionExpedientes.removeElementAt(i);
                      }else relacionExpedientes.setElementAt(tramE, i);
                      expActualizado = true;
                      return expActualizado;
                  }
              }
          }
          return expActualizado;
      }


    private Vector filtrarPorEstadoEstilo(String estadoEstilo, Vector consultaE) {
        if ("fueraPlazo".equals(estadoEstilo)) {
            return filtrarPorEstadoFueraPlazo(consultaE);
        }else if ("plazoCercaFin".equals(estadoEstilo)) {
            return filtrarPorEstadoPlazoCercaFin(consultaE);
        }else if ("pendientesEstaUnidad".equals(estadoEstilo)) {
            return filtrarPorEstadoPendientesEstaUnidad(consultaE);
        }else if ("pendientesOtraUnidad".equals(estadoEstilo)) {
            return filtrarPorEstadoPendientesOtraUnidad(consultaE);
        }else return null; 
    } 

    private Vector filtrarPorEstadoFueraPlazo(Vector consultaE) {
        Vector resultado = new Vector();
        for (Iterator it = consultaE.iterator();it.hasNext();) {
            TramitacionValueObject tramVO = (TramitacionValueObject)it.next();
            if ("si".equals(tramVO.getFueraDePlazo())) resultado.addElement(tramVO);
        }
        return resultado;
    }
    private Vector filtrarPorEstadoPlazoCercaFin(Vector consultaE) {
        Vector resultado = new Vector();
        for (Iterator it = consultaE.iterator();it.hasNext();) {
            TramitacionValueObject tramVO = (TramitacionValueObject)it.next();
            if ("si".equals(tramVO.getPlazoCercaFin())) resultado.addElement(tramVO);
        }
        return resultado;
    }
    private Vector filtrarPorEstadoPendientesEstaUnidad(Vector consultaE) {
        Vector resultado = new Vector();
        for (Iterator it = consultaE.iterator();it.hasNext();) {
            TramitacionValueObject tramVO = (TramitacionValueObject)it.next();
            if ("si".equals(tramVO.getPendiente())) resultado.addElement(tramVO);
        }
        return resultado;
    }
    private Vector filtrarPorEstadoPendientesOtraUnidad(Vector consultaE) {
        Vector resultado = new Vector();
        for (Iterator it = consultaE.iterator();it.hasNext();) {
            TramitacionValueObject tramVO = (TramitacionValueObject)it.next();
            if ("no".equals(tramVO.getPendiente())) resultado.addElement(tramVO);
        }
        return resultado;
    }

    private String getEstado(Vector relacionAsientosHistorico,String ejerNum) {
        String estado = "";
        for (Iterator it = relacionAsientosHistorico.iterator();it.hasNext();) {
            TramitacionValueObject tVO = (TramitacionValueObject) it.next();
            if (ejerNum.equals(tVO.getEjerNum())) {
                estado = tVO.getEstado();
                break;
            }

        }
        return estado;
    }


    private Vector getListaInteresados(RegistroValueObject datos, String[] params) {
        GeneralValueObject gVO = new GeneralValueObject();

        gVO.setAtributo("ejercicio", String.valueOf(datos.getAnoReg()));
        gVO.setAtributo("numero", String.valueOf(datos.getNumReg()));
        gVO.setAtributo("codOur", String.valueOf(datos.getUnidadOrgan()));
        gVO.setAtributo("codDep", String.valueOf(datos.getIdentDepart()));
        gVO.setAtributo("codTip", String.valueOf(datos.getTipoReg()));
        gVO.setAtributo("codProc", String.valueOf(datos.getCodProcedimientoRoles()));
        gVO.setAtributo("munProc", String.valueOf(datos.getMunProcedimiento()));

        return InteresadosManager.getInstance().getListaInteresadosRegistro(gVO, params);
    }

    private Vector<GeneralValueObject> getListaRoles(RegistroValueObject elRegistroESVO, String[] params)
    {
        String proc = elRegistroESVO.getCodProcedimientoRoles();
        Vector<GeneralValueObject> roles = new Vector<GeneralValueObject>();
        if (proc != null && !proc.equals("") && !proc.equals("null")) {
            GeneralValueObject procGVO = new GeneralValueObject();
            procGVO.setAtributo("codMunicipio", elRegistroESVO.getMunProcedimiento());
            procGVO.setAtributo("codProcedimiento", proc);
            roles= InteresadosManager.getInstance().getListaRoles(procGVO, params);
            for (GeneralValueObject rol : roles) {
                m_Log.debug("TramitacionAction porDefecto: " + rol.getAtributo("porDefecto"));
                rol.setAtributo("porDefecto", rol.getAtributo("porDefecto").equals("1") ? "SI" : "NO");
            }
        } else {
           roles = InteresadosManager.getInstance().getListaRolesRegistro(params);
           m_Log.debug("TramitacionAction getListaRoles nº roles: " + roles.size());
        }
        return roles;
    }

    private ArrayList<String> tratarValoresCriterioBusqueda(String valores){
        String separador = "§¥";
        ArrayList<String> salida = new ArrayList<String>();
        if(valores!=null){
            String[] datos = valores.split(separador);
            for(int i=0;datos!=null && i<datos.length;i++){
                salida.add(datos[i]);
            }
        }
        return salida;
    }      
    
    /**
     * Método llamado para devolver un String en formato JSON al cliente que ha realiza la petición 
     * a alguna de las operaciones de este action
     * @param json: String que contiene el JSON a devolver
     * @param response: Objeto de tipo HttpServletResponse a través del cual se devuelve la salida
     * al cliente que ha realizado la solicitud
     */
    private void retornarJSON(String json,HttpServletResponse response){
        
        try{
            if(json!=null){
                response.setCharacterEncoding("UTF-8");                
                PrintWriter out = response.getWriter();
                out.print(json);
                out.flush();
                out.close();
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }

    private List<String> getProcsEnExpProperties(final UsuarioValueObject usuario) {
        List<String> procedimientos = new ArrayList<String>();
        ResourceBundle expProp = ResourceBundle.getBundle("Expediente");
        String propiedad = usuario.getOrgCod()+"/BUZON_ENTRADA_PROCEDIMIENTOS_COMPROBAR_EXPEDIENTES";
        String[] listaProcedimientos = null;
        String todosProc = null;
        try{
            m_Log.debug("Código de organización: "+usuario.getOrgCod());
            todosProc = expProp.getString(propiedad);
        }catch(Exception e) {
            m_Log.error("No existe la propiedad "+propiedad+" en Expediente.properties");
        }

        if(todosProc!=null){
            listaProcedimientos = todosProc.split(";");
            for (String proc : listaProcedimientos) {
                procedimientos.add(proc);
            }
        }
        return procedimientos;
    }
}

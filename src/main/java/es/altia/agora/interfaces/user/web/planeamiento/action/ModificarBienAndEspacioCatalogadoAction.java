/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.RegistroValueObject;
import es.altia.agora.business.planeamiento.AnotacionRegistroValueObject;
import es.altia.agora.business.planeamiento.PromotorValueObject;
import es.altia.agora.business.planeamiento.AnotacionRectificacionRegistroValueObject;
import es.altia.agora.business.planeamiento.persistence.RegistroPlaneamientoManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.BienAndEspacioCatalogadoForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.AnotacionForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.PromotorForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.RectificacionForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import es.altia.util.exceptions.InternalErrorException;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Collection;
import java.util.ArrayList;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class ModificarBienAndEspacioCatalogadoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(ModificarBienAndEspacioCatalogadoAction.class.getName());
    protected static Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        try {
            m_Log.info("ModificarBienAndEspacioCatalogadoAction.perform");
            String[] params = null;
            HttpSession session = request.getSession();

            if (session.getAttribute("usuario") != null){
                UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
                params = usuarioVO.getParamsCon();
            }

            BienAndEspacioCatalogadoForm bienForm = (BienAndEspacioCatalogadoForm) form;
            BienAndEspacioCatalogadoForm bienSessionForm = (BienAndEspacioCatalogadoForm)
                    session.getAttribute("BienAndEspacioCatalogadoForm");
            Calendar fechaAlta = Calendar.getInstance();
            Calendar fechaAprobacion = Calendar.getInstance();
            Calendar fechaBaja = Calendar.getInstance();
            Calendar fechaPublicacion = Calendar.getInstance();

            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            try {
                String fecha = bienForm.getFechaAprobacion();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaAprobacion = null;
                } else {
                    fechaAprobacion.setTime(format.parse(fecha));
                }
                fecha = bienForm.getFechaBaja();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaBaja = null;
                } else {
                    fechaBaja.setTime(format.parse(fecha));
                }
                fecha = bienForm.getFechaPublicacion();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaPublicacion = null;
                } else {
                    fechaPublicacion.setTime(format.parse(fecha));
                }
            } catch (Exception e) {//En principio nunca va a entrar
                e.printStackTrace();
                if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
            }
            String numeroRegistro = bienSessionForm.getNumeroRegistro();
            if (numeroRegistro==null ||numeroRegistro.equals("")) {
                numeroRegistro = bienForm.getAnho() + "/" + bienForm.getNumero();
            }
            Integer codigoDomicilio = null;
            if (bienForm.getCodigoDomicilio()!=null && !bienForm.getCodigoDomicilio().equals("")) {
                codigoDomicilio = new Integer(bienForm.getCodigoDomicilio());
            }
            String observaciones = bienForm.getObservaciones();
            if (observaciones!=null && !observaciones.equals("")) {
                observaciones = observaciones.replaceAll("@intro@", "\r\n");
            }
            String file = bienForm.getArchivo();
            if (file!=null && !file.equals("")) {
                file = file.replaceAll("@intro@", "\r\n");
            }
            RegistroValueObject registroVO = new RegistroValueObject(
                    new Character(bienForm.getTipoRegistro().charAt(0)),
                    m_ConfigTechnical.getString("Planeamiento.BienAndEspacioCatalogado.Subseccion"),
                    null,
                    new Integer(bienForm.getNumero()), bienForm.getAnho(),
                    numeroRegistro, fechaAlta, fechaAprobacion, null, fechaBaja,
                    null, null, null, null, null, null, null, bienForm.getDenominacionBien(), codigoDomicilio,
                    bienForm.getCodigoCatalogacion(), bienForm.getCodigoGradoProteccion(),
                    bienForm.getCodigoRelacionBien(), fechaPublicacion,
                    bienForm.getNumeroPublicacion(), observaciones, file);

            Iterator anotacionesIt = bienSessionForm.getAnotaciones().iterator();
            Collection anotaciones = new ArrayList();
            AnotacionRegistroValueObject anotacionVO = null;
            AnotacionForm anotacionForm = null;
            Calendar fechaAnotacion = null;
            Iterator anotacionesRectificacionIt = bienSessionForm.getRectificaciones().iterator();
            Collection anotacionesRectificacion = new ArrayList();
            AnotacionRectificacionRegistroValueObject anotacionRectificacionVO = null;
            RectificacionForm rectificacionForm = null;
            while (anotacionesIt.hasNext()) {
                anotacionForm = (AnotacionForm) anotacionesIt.next();
                fechaAnotacion = Calendar.getInstance();
                try {
                    String fecha = bienForm.getFechaAprobacion();
                    if ((fecha==null) || (fecha.equals(""))) {
                        fechaAnotacion = null;
                    } else {
                        fechaAnotacion.setTime(format.parse(fecha));
                    }
                } catch (Exception e) {//En principio nunca va a entrar
                    e.printStackTrace();
                    if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                }
                anotacionVO = new AnotacionRegistroValueObject(new Character(bienForm.getTipoRegistro().charAt(0)),
                        m_ConfigTechnical.getString("Planeamiento.BienAndEspacioCatalogado.Subseccion"),
                        new Integer(bienForm.getNumero()),
                        bienForm.getAnho(), anotacionForm.getNumeroAnotacion(), fechaAnotacion,
                        anotacionForm.getComentarioAnotacion().replaceAll("@intro@", "\r\n"));
                anotaciones.add(anotacionVO);
            }

            while (anotacionesRectificacionIt.hasNext()) {
                rectificacionForm = (RectificacionForm) anotacionesRectificacionIt.next();
                fechaAnotacion = Calendar.getInstance();
                try {
                    String fecha = rectificacionForm.getFechaRectificacion();
                    if ((fecha==null) || (fecha.equals(""))) {
                        fechaAnotacion = null;
                    } else {
                        fechaAnotacion.setTime(format.parse(fecha));
                    }
                } catch (Exception e) {//En principio nunca va a entrar
                    e.printStackTrace();
                    if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                }
                anotacionRectificacionVO = new AnotacionRectificacionRegistroValueObject(
                        new Character(bienForm.getTipoRegistro().charAt(0)),
                        m_ConfigTechnical.getString("Planeamiento.BienAndEspacioCatalogado.Subseccion"),
                        new Integer(bienForm.getNumero()),
                        bienForm.getAnho(), rectificacionForm.getNumeroRectificacion(), fechaAnotacion,
                        rectificacionForm.getComentarioRectificacion().replaceAll("@intro@", "\r\n"));
                anotacionesRectificacion.add(anotacionRectificacionVO);
            }

            RegistroPlaneamientoManager.getInstance().modify(registroVO, anotaciones, anotacionesRectificacion,
                    new ArrayList(), params);

            Iterator registrosBienIt = ((Collection) session.getAttribute("registrosBien")).iterator();
            BienAndEspacioCatalogadoForm bienEspForm = null;
            Collection registrosBien = new ArrayList();
            while (registrosBienIt.hasNext()) {
                bienEspForm = (BienAndEspacioCatalogadoForm) registrosBienIt.next();
                if (bienEspForm.getNumero().equals(bienForm.getNumero()) &&
                        bienEspForm.getAnho().equals(bienForm.getAnho())) {
                    bienEspForm.setDenominacionBien(bienForm.getDenominacionBien().replaceAll("\r\n", "@intro@"));
                    bienEspForm.setCodigoDomicilio(bienForm.getCodigoDomicilio());
                    bienEspForm.setCodigoCatalogacion(bienForm.getCodigoCatalogacion());
                    bienEspForm.setCatalogacion(bienForm.getCatalogacion());
                    bienEspForm.setCodigoGradoProteccion(bienForm.getCodigoGradoProteccion());
                    bienEspForm.setGradoProteccion(bienForm.getGradoProteccion());
                    bienEspForm.setCodigoRelacionBien(bienForm.getCodigoRelacionBien());
                    bienEspForm.setRelacionBien(bienForm.getRelacionBien());
                    bienEspForm.setFechaAprobacion(bienForm.getFechaAprobacion());
                    bienEspForm.setFechaBaja(bienForm.getFechaBaja());
                    bienEspForm.setFechaPublicacion(bienForm.getFechaPublicacion());
                    bienEspForm.setNumeroPublicacion(bienForm.getNumeroPublicacion());
                    bienEspForm.setObservaciones(bienForm.getObservaciones().replaceAll("\r\n", "@intro@"));
                    bienEspForm.setArchivo(bienForm.getArchivo().replaceAll("\r\n", "@intro@"));
                    bienEspForm.setAnotaciones(bienSessionForm.getAnotaciones());
                    bienEspForm.setRectificaciones(bienSessionForm.getRectificaciones());
                }
                registrosBien.add(bienEspForm);
            }
            session.setAttribute("registrosBien", registrosBien);
            return (mapping.findForward("default"));
        } catch (InternalErrorException e) {
            return (mapping.findForward("errorModificacion"));
        }
    }
}
/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action.mantenimiento;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.persistence.MantAmbitoManager;
import es.altia.agora.business.planeamiento.mantenimiento.MantAmbitoValueObject;
import es.altia.agora.business.planeamiento.persistence.RegistroManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.mantenimiento.MantenimientoAmbitosForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.mantenimiento.MantenimientoAmbitoForm;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.Iterator;
import java.util.Collection;
import java.util.ArrayList;
import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class EliminarAmbitoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(EliminarAmbitoAction.class.getName());

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("EliminarAmbitoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
        }

        MantenimientoAmbitosForm ambitosForm = (MantenimientoAmbitosForm) form;

        //Comprobamos que el ambito no esta siendo utilizado
        Vector registros = RegistroManager.getInstance().findByAmbito(ambitosForm.getCodigo(), params);
        if (!registros.isEmpty()) {

            request.setAttribute("ambitos", ((MantenimientoAmbitosForm)
                    session.getAttribute("MantenimientoAmbitosForm")).getAmbitos());
            return (mapping.findForward("noDelete"));
        }
        
        MantAmbitoValueObject ambitoVO = new MantAmbitoValueObject(ambitosForm.getCodigo(), ambitosForm.getDescripcion());
        MantAmbitoManager.getInstance().delete(ambitoVO, params);

        Iterator ambitosIt = ((MantenimientoAmbitosForm)
                session.getAttribute("MantenimientoAmbitosForm")).getAmbitos().iterator();
        Collection ambitos = new ArrayList();
        while (ambitosIt.hasNext()) {
            MantenimientoAmbitoForm mantAmbitoForm = (MantenimientoAmbitoForm) ambitosIt.next();
            if (!mantAmbitoForm.getCodigo().equals(ambitosForm.getCodigo())) {
                ambitos.add(mantAmbitoForm);
            }
        }

        ambitosForm.setAmbitos(ambitos);

        session.setAttribute("MantenimientoAmbitosForm", ambitosForm);
        return (mapping.findForward("default"));
    }
}
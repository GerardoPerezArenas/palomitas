  /* Generated by Together */
  package es.altia.agora.interfaces.user.web.registro.mantenimiento;


import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import es.altia.agora.business.registro.mantenimiento.persistence.MantRegistroExternoManager;
import es.altia.agora.business.util.GeneralValueObject;

public final class MantRegistroExternoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(MantRegistroExternoAction.class.getName());

    public ActionForward performSession( ActionMapping mapping, ActionForm form, HttpServletRequest request,
                          HttpServletResponse response) throws IOException, ServletException {

      m_Log.debug("perform");
      ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));
      ActionErrors errors = new ActionErrors();

      // Validaremos los parametros del request especificados
      HttpSession session = request.getSession();

      String opcion = request.getParameter("opcion");
	  m_Log.debug("Opcion " + opcion);
	  
      UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
      String[] params = usuario.getParamsCon();
      
	  // Rellenamos el form de organizaciones externas
	  if (form == null) {
			 m_Log.debug("Rellenamos el form de registro externo");
			 form = new MantRegistroExternoForm();
			 if ("request".equals(mapping.getScope()))
			   request.setAttribute(mapping.getAttribute(), form);
			 else
			   session.setAttribute(mapping.getAttribute(), form);
	  }

	  MantRegistroExternoForm regExtForm = (MantRegistroExternoForm)form;

	  if (opcion.equals("cargarOrganizacionesExternas")){
	  	Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
		regExtForm.setListaOrganizacionesExternas(lista);
		return (mapping.findForward(opcion));
		
	  } else if (opcion.equals("altaOrganizacionExterna")){
	  		GeneralValueObject orgExtVO = obtenerDatos(request);        
			String resultado = MantRegistroExternoManager.getInstance().altaOrganizacionExterna(orgExtVO,params);
			Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
			regExtForm.setListaOrganizacionesExternas(lista);
			regExtForm.setResultado(resultado);		
        	return (mapping.findForward(opcion));

	  } else if (opcion.equals("modificarOrganizacionExterna")){
			GeneralValueObject orgExtVO = obtenerDatos(request);        
			String resultado = MantRegistroExternoManager.getInstance().modificarOrganizacionExterna(orgExtVO,params);
			Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
			regExtForm.setListaOrganizacionesExternas(lista);
			regExtForm.setResultado(resultado);			
			return (mapping.findForward(opcion));
			
	  } else if (opcion.equals("eliminarOrganizacionExterna")){
			GeneralValueObject orgExtVO = obtenerDatos(request);        
			String resultado = MantRegistroExternoManager.getInstance().eliminarOrganizacionExterna(orgExtVO,params);
			Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
			regExtForm.setListaOrganizacionesExternas(lista);
			regExtForm.setResultado(resultado);
			return (mapping.findForward(opcion));

	  } else if (opcion.equals("cargarOrganizacionesUnidadesRegistroExternas")){			
			GeneralValueObject orgExtVO = obtenerDatos(request);        			
			Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
			regExtForm.setListaOrganizacionesExternas(lista);
			regExtForm.setResultado(null);
			return (mapping.findForward(opcion));

	  } else if (opcion.equals("cargarUnidadesRegistroExternas")){
			GeneralValueObject orgExtVO = obtenerDatos(request);
			Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
			regExtForm.setListaOrganizacionesExternas(lista);
			lista = MantRegistroExternoManager.getInstance().loadUnidadesRegistroExternas(orgExtVO,params);
			regExtForm.setListaUnidadesRegistroExternas(lista);
			regExtForm.setResultado(null);
			return (mapping.findForward(opcion));

	  } else if (opcion.equals("altaUnidadRegistroExterna")){
			GeneralValueObject uniRegExtVO = obtenerDatos2(request);
			String resultado = MantRegistroExternoManager.getInstance().altaUnidadRegistroExterna(uniRegExtVO,params);
			Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
			regExtForm.setListaOrganizacionesExternas(lista);
			lista = MantRegistroExternoManager.getInstance().loadUnidadesRegistroExternas(uniRegExtVO,params);
			regExtForm.setListaUnidadesRegistroExternas(lista);
			regExtForm.setResultado(resultado);		
			return (mapping.findForward(opcion));
	
	  } else if (opcion.equals("modificarUnidadRegistroExterna")){
			GeneralValueObject uniRegExtVO = obtenerDatos2(request);        
			String resultado = MantRegistroExternoManager.getInstance().modificarUnidadRegistroExterna(uniRegExtVO,params);
			Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
			regExtForm.setListaOrganizacionesExternas(lista);
			lista = MantRegistroExternoManager.getInstance().loadUnidadesRegistroExternas(uniRegExtVO,params);
			regExtForm.setListaUnidadesRegistroExternas(lista);
			regExtForm.setResultado(resultado);		
			return (mapping.findForward(opcion));

	  } else if (opcion.equals("eliminarUnidadRegistroExterna")){
			GeneralValueObject uniRegExtVO = obtenerDatos2(request);        
			String resultado = MantRegistroExternoManager.getInstance().eliminarUnidadRegistroExterna(uniRegExtVO,params);
			Vector lista = MantRegistroExternoManager.getInstance().loadOrganizacionesExternas(params);
			regExtForm.setListaOrganizacionesExternas(lista);
			lista = MantRegistroExternoManager.getInstance().loadUnidadesRegistroExternas(uniRegExtVO,params);
			regExtForm.setListaUnidadesRegistroExternas(lista);
			regExtForm.setResultado(resultado);		
			return (mapping.findForward(opcion));
		 	
      }else{
        return (new ActionForward(mapping.getInput()));
      }
    }

	private GeneralValueObject obtenerDatos(HttpServletRequest request){
		String idOrgExt = request.getParameter("idOrganizacionExterna");
		String codOrgExt = request.getParameter("codOrganizacionExterna");
		String desOrgExt = request.getParameter("desOrganizacionExterna");
		GeneralValueObject orgExtVO =  new GeneralValueObject();
		orgExtVO.setAtributo("idOrganizacionExterna", idOrgExt);
		orgExtVO.setAtributo("codOrganizacionExterna", codOrgExt);
		orgExtVO.setAtributo("desOrganizacionExterna", desOrgExt);
		return orgExtVO;		
    }
	
	private GeneralValueObject obtenerDatos2(HttpServletRequest request){
						
			GeneralValueObject uniRegExtVO =  new GeneralValueObject();
			uniRegExtVO = obtenerDatos(request);
			String idUniRegExt = request.getParameter("idUnidadRegistro");
			String codUniRegExt = request.getParameter("codUnidadRegistro");
			String desUniRegExt = request.getParameter("desUnidadRegistro");
			String orgUniRegExt = request.getParameter("organizacionUnidadRegistro");
			uniRegExtVO.setAtributo("idUnidadRegistroExterna", idUniRegExt);			
			uniRegExtVO.setAtributo("codUnidadRegistroExterna", codUniRegExt);
			uniRegExtVO.setAtributo("desUnidadRegistroExterna", desUniRegExt);
			uniRegExtVO.setAtributo("orgUnidadRegistroExterna", orgUniRegExt);		
			if(m_Log.isDebugEnabled()) m_Log.debug("Datos 2: idUnidadRegistroExterna " + (String) uniRegExtVO.getAtributo("idUnidadRegistroExterna")
								+ " codUnidadRegistroExterna " + (String) uniRegExtVO.getAtributo("codUnidadRegistroExterna")
								+ " desUnidadRegistroExterna " + (String) uniRegExtVO.getAtributo("desUnidadRegistroExterna")										
								+ " orgUnidadRegistroExterna " + (String) uniRegExtVO.getAtributo("orgUnidadRegistroExterna")								
								);	
			return uniRegExtVO;		
	}
}
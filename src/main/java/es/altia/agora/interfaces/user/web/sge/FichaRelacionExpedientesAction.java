/* Generated by Together */
package es.altia.agora.interfaces.user.web.sge;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.sge.*;
import es.altia.agora.business.sge.persistence.*;
import es.altia.agora.business.terceros.*;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.business.integracionsw.exception.EjecucionSWException;
import es.altia.agora.business.sge.persistence.manual.FichaExpedienteDAO;
import es.altia.agora.business.sge.persistence.manual.FichaRelacionExpedientesDAO;
import es.altia.agora.business.util.jdbc.SigpGeneralOperations;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.technical.ConstantesDatos;
import es.altia.agora.technical.EstructuraCampo;
import es.altia.agora.webservice.tramitacion.servicios.WSException;
import es.altia.common.exception.TechnicalException;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import es.altia.flexia.integracion.moduloexterno.plugin.ModuloIntegracionExterno;
import es.altia.flexia.integracion.moduloexterno.plugin.ModuloIntegracionExternoFactoria;
import es.altia.util.conexion.AdaptadorSQLBD;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class FichaRelacionExpedientesAction extends ActionSession {

    Config m_Config = ConfigServiceHelper.getConfig("common");
    protected static Log m_Log =
            LogFactory.getLog(FichaRelacionExpedientesAction.class.getName());
    String codPais = "";
    String codProvincia = "";
    String codMunicipio = "";

    public ActionForward performSession(	ActionMapping mapping,
                                            ActionForm form,
                                            HttpServletRequest request,
                                            HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("FichaRelacionExpedientesAction.perform");
//        ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));


        // Validaremos los parametros del request especificados
        HttpSession session = request.getSession();
        String opcion ="";

        if ((session.getAttribute("usuario") != null)) {
            UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
            String[] params = usuario.getParamsCon();
            ParametrosTerceroValueObject paramsTercero = (ParametrosTerceroValueObject)session.getAttribute("parametrosTercero");
            codPais = paramsTercero.getPais();
            codProvincia = paramsTercero.getProvincia();
            codMunicipio = paramsTercero.getMunicipio();
            // Si usuario en sesion es nulo --> error.

            ActionErrors errors = new ActionErrors();

            if (form == null) {
                  m_Log.debug("Rellenamos el form de FichaRelacionExpedientesForm");
              form = new FichaRelacionExpedientesForm();
              if ("request".equals(mapping.getScope()))
              request.setAttribute(mapping.getAttribute(), form);
              else
              session.setAttribute(mapping.getAttribute(), form);
            }
            FichaRelacionExpedientesForm fichaRelExpForm = (FichaRelacionExpedientesForm)form;


            opcion = request.getParameter("opcion");
            if (m_Log.isInfoEnabled()) m_Log.info("la opcion en el action es " + opcion);

            if ((opcion.equals("cargar")) || ("cargarPestTram".equals(opcion))){
                
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",request.getParameter("codMunicipio"));
                gVO.setAtributo("codProcedimiento",request.getParameter("codProcedimiento"));
                gVO.setAtributo("ejercicio",request.getParameter("ejercicio"));
                String numero = request.getParameter("numero");  
                if (numero==null) numero = request.getParameter("numeroExp"); // Adjuntar o cargar desde asiento.
                gVO.setAtributo("numeroRelacion",numero);
                gVO.setAtributo("numeroRelacionMostrar",m_Config.getString("constante.relacion")+numero);
                gVO.setAtributo("numero",numero);
                String modoConsulta = request.getParameter("modoConsulta");
                String desdeConsulta = request.getParameter("desdeConsulta");
                if(modoConsulta == null) {
                  modoConsulta = "no";
                }
                gVO.setAtributo("modoConsulta",modoConsulta);
                gVO.setAtributo("desdeConsulta",desdeConsulta);
                String expRelacionado = request.getParameter("expRelacionado");
                if (m_Log.isDebugEnabled()) m_Log.debug("el expediente relacionado es : " + expRelacionado);
                if(expRelacionado == null) {
                  expRelacionado = "no";
                } else {
                  String codMunicipioIni = request.getParameter("codMunicipioIni");
                  String ejercicioIni = request.getParameter("ejercicioIni");
                  String numeroIni = request.getParameter("numeroIni");
                  gVO.setAtributo("codMunExpIni",codMunicipioIni);
                  gVO.setAtributo("ejercicioExpIni",ejercicioIni);
                  gVO.setAtributo("numeroExpIni",numeroIni);
                }
                String deAdjuntar = request.getParameter("deAdjuntar");
                if(deAdjuntar == null) {
                  deAdjuntar = "no";
                }
                gVO.setAtributo("deAdjuntar",deAdjuntar);
                String desdeInformesGestion = request.getParameter("desdeInformesGestion");
                if(desdeInformesGestion == null ) {
                    desdeInformesGestion = "no";
                }
                gVO.setAtributo("desdeInformesGestion",desdeInformesGestion);
                String todos = request.getParameter("todos");
                if(todos == null ) {
                    todos = "";
                }
                gVO.setAtributo("todos",todos);
                gVO.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                if (m_Log.isDebugEnabled()) m_Log.debug("USUARIO " + gVO.getAtributo("usuario"));
                gVO.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                gVO.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                cargarRelacionExpedientes(fichaRelExpForm, gVO,usuario.getIdUsuario(), params);
                if ("cargarPestTram".equals(opcion) ) {
                    opcion = "cargar";
                    session.setAttribute("pestana", "tramites");
                }
            } else if("grabarExpediente".equals(opcion)) {
              GeneralValueObject gVO = new GeneralValueObject();
              gVO = fichaRelExpForm.getFichaRelExpVO();
              // Pestaña de documentos
              Vector docs = (Vector) fichaRelExpForm.getDocumentos();
              for (int i=0; i<docs.size(); i++) {
                GeneralValueObject dVO = (GeneralValueObject) docs.elementAt(i);
                String entregado = request.getParameter("documentoEntregado"+i);
                if (entregado==null)
                dVO.setAtributo("ENTREGADO","NO");
                else dVO.setAtributo("ENTREGADO","SI");
              }
              gVO.setAtributo("listaDocumentos", docs);
              int resultado = FichaRelacionExpedientesManager.getInstance().grabarRelacion(gVO, params);

              if(resultado >0) {
                  Vector expedientes = fichaRelExpForm.getExpedientes();
                  m_Log.debug("Expedientes  -->  "+expedientes.size());
                  for (int i=0; i<expedientes.size();i++) {
                      FichaExpedienteForm exp = new FichaExpedienteForm();
                      GeneralValueObject temp = (GeneralValueObject) expedientes.get(i);
                      m_Log.debug("Expediente  -->  "+temp.getAtributo("numExp"));
                      temp.setAtributo("codMunicipio", gVO.getAtributo("codMunicipio"));
                      temp.setAtributo("codProcedimiento", gVO.getAtributo("codProcedimiento"));
                      temp.setAtributo("ejercicio", gVO.getAtributo("ejercicio"));
                      temp.setAtributo("numero", temp.getAtributo("numExp"));
                      temp.setAtributo("listaDocumentos", docs);
                      //Documentos
                      m_Log.debug("Documentos");
                      int num = FichaExpedienteManager.getInstance().actualizaListaDocumentosExpediente(temp, params);
                      if (num >0) fichaRelExpForm.setDocumentos(docs);
                      //Cargar Expediente para grabar los datos suplementarios en cada uno
                      cargarExpediente(exp,temp,params);
                      exp.setEstructuraDatosSuplementarios(fichaRelExpForm.getEstructuraDatosSuplementarios());
                      exp.setListaFicheros(fichaRelExpForm.getListaFicheros());
                      exp.setListaTiposFicheros(fichaRelExpForm.getListaTiposFicheros());
                      //Datos suplementarios
                      //m_Log.debug("Datos Suplementarios");
                      //grabarDatosSuplementarios(exp,temp,request,params);
                      //m_Log.debug("Fin Datos Suplementarios");
                  }
              }
              String respOpcion = "";
              if(resultado >0) {
                respOpcion = "grabado";
              } else {
                respOpcion = "noGrabado";
              }
              fichaRelExpForm.setRespOpcion(respOpcion);
              opcion = "fichaRelacionExpedientes";
            } else if ("retroceder_relacion".equals(opcion)){
                Vector tramites= new Vector();
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",request.getParameter("codMun"));
                gVO.setAtributo("codProcedimiento",request.getParameter("codProc"));
                gVO.setAtributo("ejercicio",request.getParameter("eje"));
                gVO.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                gVO.setAtributo("nomUsuario",usuario.getNombreUsu());
                gVO.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                gVO.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                gVO.setAtributo("numeroRelacion",request.getParameter("numRelacion"));
                String codTramiteRetroceder = request.getParameter("codTramiteRetroceder");
                String tramiteRetroceder = request.getParameter("tramiteRetroceder");
                String ocurrenciaTramiteRetroceder = request.getParameter("ocurrenciaTramiteRetroceder");
                gVO.setAtributo("codTramiteRetroceder",codTramiteRetroceder);
                gVO.setAtributo("tramiteRetroceder",tramiteRetroceder);
                gVO.setAtributo("ocurrenciaTramiteRetroceder",ocurrenciaTramiteRetroceder);
                boolean mensajeNoFinalizado = false; //flag para mostrar msg
                Vector expedientes = fichaRelExpForm.getExpedientes();
                m_Log.debug("Expedientes  -->  "+expedientes.size());

                fichaRelExpForm.setRespOpcion("");
                RespuestaRetrocesoTramiteVO respuesta = null;

                for (int i=0; i<expedientes.size();i++) {
                    try {
                        GeneralValueObject temp = (GeneralValueObject) expedientes.get(i);
                        m_Log.debug("Expediente  -->  " + temp.getAtributo("numExp"));
                        gVO.setAtributo("numero", temp.getAtributo("numExp"));

                        String fechaInicioTramite = FichaExpedienteManager.getInstance().getFechaInicio(gVO, params);
                        gVO.setAtributo("fechaInicio",fechaInicioTramite);
                        gVO.setAtributo("codigoIdiomaUsuario",Integer.toString(usuario.getIdioma()));
                        //FichaExpedienteManager.getInstance().retrocederExpediente(gVO, params);
                        gVO.setAtributo(ConstantesDatos.ORIGEN_LLAMADA_NOMBRE_PARAMETRO, ConstantesDatos.ORIGEN_LLAMADA_INTERFAZ_WEB);
                        respuesta = FichaExpedienteManager.getInstance().retrocederExpedienteMetodoAtrasNuevo(gVO, params);

                        if(respuesta!=null){
                            if(ConstantesDatos.TRAMITE_FINALIZADO_CON_TRAMITES_POSTERIORES.equals(respuesta.getTipoRespuesta()) ||
                               ConstantesDatos.EXPEDIENTE_FINALIZADO_NO_RETROCEDER.equals(respuesta.getTipoRespuesta()) ||
                               ConstantesDatos.TRAMITE_ORIGEN_CON_TRAMITES_ABIERTOS.equals(respuesta.getTipoRespuesta())){
                                fichaRelExpForm.setTramitesDestino(respuesta.getTramitesDestino());
                                fichaRelExpForm.setRespOpcion(respuesta.getTipoRespuesta());
                            } else {
                                OperacionesExpedienteManager.getInstance().registrarRetrocederTramite(gVO, params);
                            }
                        }else
                            fichaRelExpForm.setRespOpcion(""); // Se pone a vacío el atributo respOpcion

                    } catch (EjecucionSWException e) {
                        e.printStackTrace();
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }

                /*
                //ini AHORA RETROCEDER LA RELACIÓN
                    gVO.setAtributo("codTramiteRetroceder",codTramiteRetroceder);
                    gVO.setAtributo("ocurrenciaTramiteRetroceder",ocurrenciaTramiteRetroceder);
                    resultado = FichaRelacionExpedientesManager.getInstance().retrocederRelacion(gVO,params);
                    String codTramiteRetroceder2 = request.getParameter("codTramiteRetroceder2");
                    m_Log.info("REL. codTramiteRetroceder  : "+codTramiteRetroceder);
                    m_Log.info("REL. codTramiteRetroceder2 : "+codTramiteRetroceder2);
                    if(codTramiteRetroceder2 != null && !"".equals(codTramiteRetroceder2)){
                        gVO.setAtributo("codTramiteRetroceder",request.getParameter("codTramiteRetroceder2"));
                        gVO.setAtributo("ocurrenciaTramiteRetroceder",request.getParameter("ocurrenciaTramiteRetroceder2"));
                        resultado = FichaRelacionExpedientesManager.getInstance().retrocederRelacion(gVO,params);
                    }
                    */
                 if(respuesta==null){
                    //ini AHORA RETROCEDER LA RELACIÓN
                    FichaRelacionExpedientesManager.getInstance().retrocederRelacion(gVO,params);

                    if(respuesta!=null && respuesta.isReabrirTramiteOrigen() && respuesta.getCodTramiteOrigenReabrir()>=0 && respuesta.getOcurrenciaTramiteOrigenReabrir()>=0){
                        m_Log.debug(" ===========> RETROCEDER RELACIÓN. HAY QUE RETROCEDER EL TRÁMITE DE ORIGEN DE LA RELACIÓN codTramiteOrigen: " + respuesta.getCodTramiteOrigenReabrir());
                        m_Log.debug(" ===========> RETROCEDER RELACIÓN. HAY QUE RETROCEDER EL TRÁMITE DE ORIGEN DE LA RELACIÓN ocurrenciaTramiteOrigen: " + respuesta.getOcurrenciaTramiteOrigenReabrir());
                        gVO.setAtributo("codTramiteRetroceder",respuesta.getCodTramiteOrigenReabrir());
                        gVO.setAtributo("ocurrenciaTramiteRetroceder",respuesta.getOcurrenciaTramiteOrigenReabrir());
                        FichaRelacionExpedientesManager.getInstance().retrocederRelacion(gVO,params);
                    }
                }else
                if(respuesta!=null && !ConstantesDatos.TRAMITE_FINALIZADO_CON_TRAMITES_POSTERIORES.equals(respuesta.getTipoRespuesta()) && !ConstantesDatos.EXPEDIENTE_FINALIZADO_NO_RETROCEDER.equals(respuesta.getTipoRespuesta()))
                {
                    //ini AHORA RETROCEDER LA RELACIÓN
                    gVO.setAtributo("codTramiteRetroceder",codTramiteRetroceder);
                    gVO.setAtributo("ocurrenciaTramiteRetroceder",ocurrenciaTramiteRetroceder);
                    FichaRelacionExpedientesManager.getInstance().retrocederRelacion(gVO,params);
                    if(respuesta.isReabrirTramiteOrigen() && respuesta.getCodTramiteOrigenReabrir()>=0 && respuesta.getOcurrenciaTramiteOrigenReabrir()>=0){
                        m_Log.debug(" ===========> RETROCEDER RELACIÓN. HAY QUE RETROCEDER EL TRÁMITE DE ORIGEN DE LA RELACIÓN codTramiteOrigen: " + respuesta.getCodTramiteOrigenReabrir());
                        m_Log.debug(" ===========> RETROCEDER RELACIÓN. HAY QUE RETROCEDER EL TRÁMITE DE ORIGEN DE LA RELACIÓN ocurrenciaTramiteOrigen: " + respuesta.getOcurrenciaTramiteOrigenReabrir());
                        gVO.setAtributo("codTramiteRetroceder",Integer.toString(respuesta.getCodTramiteOrigenReabrir()));
                        gVO.setAtributo("ocurrenciaTramiteRetroceder",Integer.toString(respuesta.getOcurrenciaTramiteOrigenReabrir()));
                        FichaRelacionExpedientesManager.getInstance().retrocederRelacion(gVO,params);
                    }
                } // if

           

                
                //fin AHORA RETROCEDER LA RELACIÓN
                if (mensajeNoFinalizado) {
                    fichaRelExpForm.setRespOpcion("noFinalizado");
                }
                m_Log.debug("Mensaje no finalizado --> " + mensajeNoFinalizado);

                GeneralValueObject gV1 = new GeneralValueObject();
                gV1.setAtributo("codMunicipio",request.getParameter("codMun"));
                gV1.setAtributo("codProcedimiento",request.getParameter("codProc"));
                gV1.setAtributo("ejercicio",request.getParameter("eje"));
                gV1.setAtributo("numero",request.getParameter("numRelacion"));
                gV1.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                gV1.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                gV1.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                tramites = FichaRelacionExpedientesManager.getInstance().cargaTramites(gV1, params);
                fichaRelExpForm.setTramites(tramites);

            } else if ("iniciar_tramitacion_manual".equals(opcion)){
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",request.getParameter("codMun"));
                gVO.setAtributo("codProcedimiento",request.getParameter("codProc"));
                gVO.setAtributo("ejercicio",request.getParameter("eje"));
                gVO.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                gVO.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                gVO.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                //gVO.setAtributo("codUOR",Integer.toString(usuarioVO.getUnidadOrgCod()));
                gVO.setAtributo("numero",request.getParameter("num"));
                gVO.setAtributo("numeroRelacion",request.getParameter("numRelacion"));
                cargarTramitesDisponibles(fichaRelExpForm, gVO, params);

            } else if("listaUnidadesUsuario".equals(opcion)) {
                GeneralValueObject g = new GeneralValueObject();
                g.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                g.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                g.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                Vector listaUnidadesUsuario = new Vector();
                listaUnidadesUsuario = FichaExpedienteManager.getInstance().getListaUnidadesUsuario(g, params);
                fichaRelExpForm.setListaUnidadesUsuario(listaUnidadesUsuario);

            } else if ("deshacer".equals(opcion)) {
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",request.getParameter("codMunicipio"));
                gVO.setAtributo("codProcedimiento",request.getParameter("codProcedimiento"));
                gVO.setAtributo("ejercicio",request.getParameter("ejercicio"));
                gVO.setAtributo("numero",request.getParameter("numero"));
                gVO.setAtributo("codUOR",request.getParameter("codUOR"));
                m_Log.debug("codUOR "+gVO.getAtributo("codUOR"));
                gVO.setAtributo("usuario",String.valueOf(usuario.getIdUsuario()));
                m_Log.debug("Bloqueos "+gVO.getAtributo("bloqueos"));
                gVO.setAtributo("bloqueos",request.getParameter("bloqueos"));
                int res = FichaRelacionExpedientesManager.getInstance().deshacerRelacionExpedientes(gVO, params);
                m_Log.debug("Resultado "+res);
                if (res < 0) {
                    fichaRelExpForm.setRespOpcion("noGrabado");
                } else {
                    if (res == 999) {
                        fichaRelExpForm.setRespOpcion("bloqueado");
                    } else {
                        fichaRelExpForm.setRespOpcion("grabado");
                    }
                }
            }
        }   else { // No hay usuario.
            m_Log.warn("FichaRelacionExpedienteAction --> no hay usuario");
            opcion = "no_usuario";
        }

        /* Redirigimos al JSP de salida*/
        return (mapping.findForward(opcion));

    }

    private void cargarTramitesDisponibles(FichaRelacionExpedientesForm fichaRelExpForm, GeneralValueObject gVO, String[] params) {
        Vector tramitesDisponibles = new Vector();
        tramitesDisponibles = FichaRelacionExpedientesManager.getInstance().cargaTramitesDisponibles(gVO, params);
        fichaRelExpForm.setTramitesDisponibles(tramitesDisponibles);
    }

    
    
    /**
    private void cargarRelacionExpedientes(FichaRelacionExpedientesForm relExpForm, GeneralValueObject gVO,int codUsuario, String[] params) {
        
      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaRelacionExpedientes");
      gVO = FichaRelacionExpedientesManager.getInstance().cargaRelacionExpedientes(gVO, params);
      relExpForm.setFichaRelExpVO(gVO);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaRelacionExpedientes");

      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaListaExpedientes");
      Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);
      relExpForm.setExpedientes(expedientes);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaListaExpedientes");

      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaTramites");
      //Cojo el primer expediente para mirar si hay bloqueos
      if (expedientes.size()>0) {
          gVO.setAtributo("numeroExpediente",((GeneralValueObject)(expedientes.get(0))).getAtributo("numExp"));
          m_Log.error("NUMERO EXPEDIENTE --> "+gVO.getAtributo("numeroExpediente"));
      }
      Vector tramites = FichaRelacionExpedientesManager.getInstance().cargaTramites(gVO, params);
      relExpForm.setTramites(tramites);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaTramites");


      GeneralValueObject gVO2 = new GeneralValueObject();
      if (expedientes.size()>0) {
          // Cojo el primer elemento de los expedientes, pues todos tienen la misma info
        String numero = (String)((GeneralValueObject)expedientes.get(0)).getAtributo("numExp");
        String ejercicio = (String)((GeneralValueObject)expedientes.get(0)).getAtributo("ejeExp");

        m_Log.error("NUMERO EXPEDIENTE --> "+numero);
        gVO2.setAtributo("codMunicipio",gVO.getAtributo("codMunicipio"));
        gVO2.setAtributo("codProcedimiento",gVO.getAtributo("codProcedimiento"));
        gVO2.setAtributo("ejercicio", ejercicio);
        gVO2.setAtributo("numero",numero);
        gVO2.setAtributo("usuario", gVO.getAtributo("usuario"));
        gVO2.setAtributo("codOrganizacion", gVO.getAtributo("codOrganizacion"));
        gVO2.setAtributo("codEntidad", gVO.getAtributo("codEntidad"));
      }

      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaPermisosTramites");
      Vector permisosTramites = FichaExpedienteManager.getInstance().cargaPermisosTramites(gVO2, params);
      relExpForm.setPermisosTramites(permisosTramites);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaPermisosTramites");

      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaListaDocumentosExpediente");
      Vector documentos= new Vector();
      documentos = FichaExpedienteManager.getInstance().cargaListaDocumentosExpediente(gVO2, params);
      relExpForm.setDocumentos(documentos);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaListaDocumentosExpediente");

      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaListaEnlaces");
      Vector enlaces = new Vector();
      enlaces = FichaExpedienteManager.getInstance().cargaListaEnlaces(gVO2, params);
      relExpForm.setEnlaces(enlaces);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaListaEnlaces");

      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaEstructuraDatosSuplementarios");
      Vector estructuraDatosSuplementarios = new Vector();
      gVO2.setAtributo("desdeJsp", "si");
      estructuraDatosSuplementarios = FichaExpedienteManager.getInstance().cargaEstructuraDatosSuplementarios(gVO2, params);
      estructuraDatosSuplementarios = filtrarEstructuraDatosRelaciones 
              (estructuraDatosSuplementarios,relExpForm.getNumeroRelacion(),params);
      relExpForm.setEstructuraDatosSuplementarios(estructuraDatosSuplementarios);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaEstructuraDatosSuplementarios");
      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaValoresDatosSuplementarios");
      Vector valoresDatosSuplementarios = new Vector();
      valoresDatosSuplementarios = FichaExpedienteManager.getInstance().cargaValoresDatosSuplementarios(gVO2,estructuraDatosSuplementarios, params);
      Vector valoresMostrados = filtrarDatosSuplementariosRelacion(estructuraDatosSuplementarios,valoresDatosSuplementarios,
              relExpForm.getNumeroRelacion(),params);
      relExpForm.setValoresDatosSuplementarios(valoresMostrados);
      //relExpForm.setValoresDatosSuplementarios(valoresDatosSuplementarios);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaValoresDatosSuplementarios");
      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaValoresFicheros");

      GeneralValueObject valoresFicheros = new GeneralValueObject();
      valoresFicheros = FichaExpedienteManager.getInstance().cargaValoresFicheros(gVO2,estructuraDatosSuplementarios, params);
      relExpForm.setListaFicheros(valoresFicheros);
      m_Log.info("VALORES FICHEROS ... "+valoresFicheros);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaValoresFicheros");
      m_Log.error("CARGAR RELACION EXPEDIENTES --> INI cargaTiposFicheros");

      GeneralValueObject tiposFicheros = new GeneralValueObject();
      tiposFicheros = FichaExpedienteManager.getInstance().cargaTiposFicheros(gVO2,estructuraDatosSuplementarios, params);
      relExpForm.setListaTiposFicheros(tiposFicheros);
      m_Log.info("VALORES FICHEROS ... "+tiposFicheros);
      m_Log.error("CARGAR RELACION EXPEDIENTES --> FIN cargaTiposFicheros");
      relExpForm.setNotificacionRealizada((String) gVO.getAtributo("notificacionRealizada"));

      ArrayList<ModuloIntegracionExterno> modulos = ModuloIntegracionExternoFactoria.getInstance().getImplClassModuloConPantallaExpediente(Integer.parseInt((String)gVO.getAtributo("codMunicipio")), (String)gVO.getAtributo("codProcedimiento"), true,codUsuario,params);
      m_Log.debug("NUMERO DE MÓDULOS RECUPERADOS: " + modulos.size());
      relExpForm.setModulosExternos(modulos);

    } */
    
    
    
    
     private void cargarRelacionExpedientes(FichaRelacionExpedientesForm relExpForm, GeneralValueObject gVO,int codUsuario, String[] params) {
         AdaptadorSQLBD adapt = null;
         Connection con = null;
         
         try{
             
             adapt = new AdaptadorSQLBD(params);
             con = adapt.getConnection();
             
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaRelacionExpedientes");
            //gVO = FichaRelacionExpedientesManager.getInstance().cargaRelacionExpedientes(gVO, params);
            gVO = FichaRelacionExpedientesDAO.getInstance().cargaRelacionExpedientes(gVO,adapt,con);
            relExpForm.setFichaRelExpVO(gVO);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaRelacionExpedientes");

            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaListaExpedientes");
            //Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);
            Vector expedientes = FichaRelacionExpedientesDAO.getInstance().cargaListaExpedientes(gVO,adapt,con);
            relExpForm.setExpedientes(expedientes);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaListaExpedientes");

            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaTramites");
            //Cojo el primer expediente para mirar si hay bloqueos
            if (expedientes.size()>0) {
                gVO.setAtributo("numeroExpediente",((GeneralValueObject)(expedientes.get(0))).getAtributo("numExp"));
                m_Log.debug("NUMERO EXPEDIENTE --> "+gVO.getAtributo("numeroExpediente"));
            }
            //Vector tramites = FichaRelacionExpedientesManager.getInstance().cargaTramites(gVO, params);
            Vector tramites = FichaRelacionExpedientesDAO.getInstance().cargaTramites(gVO,adapt,con);
            relExpForm.setTramites(tramites);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaTramites");


            GeneralValueObject gVO2 = new GeneralValueObject();
            if (expedientes.size()>0) {
                // Cojo el primer elemento de los expedientes, pues todos tienen la misma info
              String numero = (String)((GeneralValueObject)expedientes.get(0)).getAtributo("numExp");
              String ejercicio = (String)((GeneralValueObject)expedientes.get(0)).getAtributo("ejeExp");

              m_Log.debug("NUMERO EXPEDIENTE --> "+numero);
              gVO2.setAtributo("codMunicipio",gVO.getAtributo("codMunicipio"));
              gVO2.setAtributo("codProcedimiento",gVO.getAtributo("codProcedimiento"));
              gVO2.setAtributo("ejercicio", ejercicio);
              gVO2.setAtributo("numero",numero);
              gVO2.setAtributo("usuario", gVO.getAtributo("usuario"));
              gVO2.setAtributo("codOrganizacion", gVO.getAtributo("codOrganizacion"));
              gVO2.setAtributo("codEntidad", gVO.getAtributo("codEntidad"));
            }

            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaPermisosTramites");
            //Vector permisosTramites = FichaExpedienteManager.getInstance().cargaPermisosTramites(gVO2, params);            
            Vector permisosTramites = FichaExpedienteDAO.getInstance().cargaPermisosTramites(gVO2,con);
                        
            relExpForm.setPermisosTramites(permisosTramites);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaPermisosTramites");

            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaListaDocumentosExpediente");
            
            //documentos = FichaExpedienteManager.getInstance().cargaListaDocumentosExpediente(gVO2, params);            
            Vector documentos = FichaExpedienteDAO.getInstance().cargaListaDocumentosExpediente(gVO2, adapt,con);
            relExpForm.setDocumentos(documentos);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaListaDocumentosExpediente");

            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaListaEnlaces");            
            //Vector enlaces = FichaExpedienteManager.getInstance().cargaListaEnlaces(gVO2, params);
            Vector enlaces = FichaExpedienteDAO.getInstance().cargaListaEnlaces(gVO2,con);            
            relExpForm.setEnlaces(enlaces);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaListaEnlaces");
            

            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaEstructuraDatosSuplementarios");
            Vector estructuraDatosSuplementarios = new Vector();
            gVO2.setAtributo("desdeJsp", "si");
            //estructuraDatosSuplementarios = FichaExpedienteManager.getInstance().cargaEstructuraDatosSuplementarios(gVO2, params);
            estructuraDatosSuplementarios = FichaExpedienteDAO.getInstance().cargaEstructuraDatosSuplementarios(gVO2,adapt,con,params);
                        
            estructuraDatosSuplementarios = FichaRelacionExpedientesDAO.getInstance().filtrarEstructuraDatosRelaciones(estructuraDatosSuplementarios,relExpForm.getNumeroRelacion(),con);
            relExpForm.setEstructuraDatosSuplementarios(estructuraDatosSuplementarios);
            
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaEstructuraDatosSuplementarios");
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaValoresDatosSuplementarios");
            
            //valoresDatosSuplementarios = FichaExpedienteManager.getInstance().cargaValoresDatosSuplementarios(gVO2,estructuraDatosSuplementarios, params);            
            Vector valoresDatosSuplementarios = FichaExpedienteDAO.getInstance().cargaValoresDatosSuplementarios(gVO2,estructuraDatosSuplementarios,adapt,con);
            
            /*
            Vector valoresMostrados = filtrarDatosSuplementariosRelacion(estructuraDatosSuplementarios,valoresDatosSuplementarios,
                    relExpForm.getNumeroRelacion(),params); */
            
            Vector valoresMostrados = FichaRelacionExpedientesDAO.getInstance().filtrarDatosSuplementariosRelacion(estructuraDatosSuplementarios,valoresDatosSuplementarios,relExpForm.getNumeroRelacion(),con);            
            relExpForm.setValoresDatosSuplementarios(valoresMostrados);
            
            
            //relExpForm.setValoresDatosSuplementarios(valoresDatosSuplementarios);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaValoresDatosSuplementarios");
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaValoresFicheros");

            GeneralValueObject valoresFicheros = new GeneralValueObject();
            //valoresFicheros = FichaExpedienteManager.getInstance().cargaValoresFicheros(gVO2,estructuraDatosSuplementarios, params);
            valoresFicheros = FichaExpedienteDAO.getInstance().cargaValoresFicheros(gVO2,estructuraDatosSuplementarios,con);
            relExpForm.setListaFicheros(valoresFicheros);
            m_Log.debug("VALORES FICHEROS ... "+valoresFicheros);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaValoresFicheros");
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaTiposFicheros");

            
            //tiposFicheros = FichaExpedienteManager.getInstance().cargaTiposFicheros(gVO2,estructuraDatosSuplementarios, params);
            GeneralValueObject tiposFicheros = FichaExpedienteDAO.getInstance().cargaTiposFicheros(gVO2,estructuraDatosSuplementarios,con);
            relExpForm.setListaTiposFicheros(tiposFicheros);
            m_Log.debug("VALORES FICHEROS ... "+tiposFicheros);
            m_Log.debug("CARGAR RELACION EXPEDIENTES --> FIN cargaTiposFicheros");
            relExpForm.setNotificacionRealizada((String) gVO.getAtributo("notificacionRealizada"));

            ArrayList<ModuloIntegracionExterno> modulos = ModuloIntegracionExternoFactoria.getInstance().getImplClassModuloConPantallaExpediente(Integer.parseInt((String)gVO.getAtributo("codMunicipio")), (String)gVO.getAtributo("codProcedimiento"), true,codUsuario,con);
            m_Log.debug("NUMERO DE MÓDULOS RECUPERADOS: " + modulos.size());
            relExpForm.setModulosExternos(modulos);
            
            
         }catch(Exception e){
             e.printStackTrace();
         }finally{
             try{
                 SigpGeneralOperations.devolverConexion(adapt, con);
             } catch (TechnicalException ex) {
                 ex.printStackTrace();
             }
             
         }

    }
    
    
    
     /*
    private Vector filtrarDatosSuplementariosRelacion(Vector estructuraDatosSuplementarios, Vector valoresDatosSuplementarios, 
            String numeroRelacion, String[] params) {
        return FichaRelacionExpedientesManager.getInstance().filtrarDatosSuplementariosRelacion(estructuraDatosSuplementarios,
                valoresDatosSuplementarios,numeroRelacion,params);
        
        filtrarDatosSuplementariosRelacion
    } */

    /*
    private Vector filtrarEstructuraDatosRelaciones(Vector estructuraDatosSuplementarios, String numRel, String[] params) {
        return FichaRelacionExpedientesManager.getInstance().filtrarEstructuraDatosRelaciones(estructuraDatosSuplementarios,
                numRel,params);
    }
*/
private int grabarDatosSuplementarios(FichaExpedienteForm fEF,GeneralValueObject gVO,HttpServletRequest request,String[] params) throws IOException {
      int res = 0;
      Vector estructuraDatosSuplementarios = new Vector();
      estructuraDatosSuplementarios = fEF.getEstructuraDatosSuplementarios();
      Vector valoresDatosSuplementarios = new Vector();
      GeneralValueObject listaFicheros;
      listaFicheros = fEF.getListaFicheros();
      GeneralValueObject listaTiposFicheros;
      listaTiposFicheros = fEF.getListaTiposFicheros();
      Config m_Conf = ConfigServiceHelper.getConfig("common");
      String campo="E_PLT.CodigoPlantillaFichero";
      String tipoDatoFichero = m_Conf.getString(campo);
      campo = "E_PLT.CodigoCampoDesplegable";
      String tipoDatoDesplegable = m_Conf.getString(campo);
      for(int i=0;i<estructuraDatosSuplementarios.size();i++) {
        EstructuraCampo eC = (EstructuraCampo) estructuraDatosSuplementarios.elementAt(i);
        m_Log.debug("CODIGO ... "+eC.getCodCampo());
        //if (eC.getCodCampo().indexOf("FICHERO")!=-1) {
        if (eC.getCodTipoDato().equals(tipoDatoFichero)) { // 5 = FICHERO
            m_Log.debug("Procesado FICHERO ... ");
            if (listaFicheros.getAtributo(eC.getCodCampo())!="") {
                m_Log.debug("FICHERO ........................ NO VACIO ");
                byte[] fichero = (byte[]) listaFicheros.getAtributo(eC.getCodCampo());
                String tipoFichero = (String)listaTiposFicheros.getAtributo(eC.getCodCampo());
                gVO.setAtributo(eC.getCodCampo(),fichero);
                if (fichero != null) {
                    String aux = request.getParameter(eC.getCodCampo());
                    String[] matriz = aux.split("/");
                    aux = matriz[matriz.length-1];
                    gVO.setAtributo(eC.getCodCampo()+"_NOMBRE",aux);
                    gVO.setAtributo(eC.getCodCampo()+"_TIPO",tipoFichero);
                }
            } else {
                m_Log.debug("FICHERO ........................ VACIO ");
                gVO.setAtributo(eC.getCodCampo(),null);
                gVO.setAtributo(eC.getCodCampo()+"_NOMBRE","");
                gVO.setAtributo(eC.getCodCampo()+"_TIPO","");
            }
            m_Log.debug("lista FICHEROs ... "+listaFicheros);
        } else if (eC.getCodTipoDato().equals(tipoDatoDesplegable)) {
            m_Log.debug("Procesado DESPLEGABLE ... ");
            gVO.setAtributo(eC.getCodCampo(),request.getParameter("cod"+eC.getCodCampo()));
            m_Log.debug("DESPLEGABLE ........................ "+request.getParameter("cod"+eC.getCodCampo()));
        }
        else {
            gVO.setAtributo(eC.getCodCampo(),request.getParameter(eC.getCodCampo()));
            m_Log.debug("CAMPO ...... " + eC.getCodCampo() + " . VALOR ...... " + request.getParameter(eC.getCodCampo()));
        }
        valoresDatosSuplementarios.addElement(gVO);
      }
      res = DatosSuplementariosManager.getInstance().grabarDatosSuplementarios(estructuraDatosSuplementarios,valoresDatosSuplementarios,params);
      return res;
    }

    private void cargarExpediente(FichaExpedienteForm expForm, GeneralValueObject gVO, String[] params) {

      gVO = FichaExpedienteManager.getInstance().cargaExpediente(gVO, params);
      expForm.setExpedienteVO(gVO);
      Vector estructuraDatosSuplementarios = new Vector();
      gVO.setAtributo("desdeJsp", "si");
      estructuraDatosSuplementarios = FichaExpedienteManager.getInstance().cargaEstructuraDatosSuplementarios(gVO, params);
      expForm.setEstructuraDatosSuplementarios(estructuraDatosSuplementarios);
      Vector valoresDatosSuplementarios = new Vector();
      valoresDatosSuplementarios = FichaExpedienteManager.getInstance().cargaValoresDatosSuplementarios(gVO,estructuraDatosSuplementarios, params);
      expForm.setValoresDatosSuplementarios(valoresDatosSuplementarios);
      GeneralValueObject valoresFicheros = new GeneralValueObject();
      valoresFicheros = FichaExpedienteManager.getInstance().cargaValoresFicheros(gVO,estructuraDatosSuplementarios, params);
      expForm.setListaFicheros(valoresFicheros);
      m_Log.debug("VALORES FICHEROS ... "+valoresFicheros);
      GeneralValueObject tiposFicheros = new GeneralValueObject();
      tiposFicheros = FichaExpedienteManager.getInstance().cargaTiposFicheros(gVO,estructuraDatosSuplementarios, params);
      expForm.setListaTiposFicheros(tiposFicheros);
        m_Log.debug("VALORES FICHEROS ... "+tiposFicheros);
      expForm.setNotificacionRealizada((String) gVO.getAtributo("notificacionRealizada"));

    }

    /**
     * Pone en el VO el mensaje adecuado con el error que devuelve un servicio
     * web en una WSException
     * @param fichaRelExpForm
     * @param wse
     */
    private void ponerMensajeFalloSW(
            FichaRelacionExpedientesForm fichaRelExpForm, WSException wse) {
        String msg = "Fallo en ejecución de servicio web ";
        if (wse.isMandatoryExecution()) {
            msg += "obligatorio. ";
        } else {
            msg += "no obligatorio. ";
        }
        fichaRelExpForm.setMensajeSW(msg + wse.getMessage());
    }

   
}
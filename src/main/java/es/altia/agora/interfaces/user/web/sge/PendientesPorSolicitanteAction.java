  /* Generated by Together */
package es.altia.agora.interfaces.user.web.sge;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.registro.persistence.AnotacionRegistroManager;
import es.altia.agora.business.sge.PendientesPorSolicitanteValueObject;
import es.altia.agora.business.sge.persistence.PendientesPorSolicitanteManager;
import es.altia.agora.business.terceros.TercerosValueObject;
import es.altia.agora.business.terceros.persistence.TercerosManager;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

    public final class PendientesPorSolicitanteAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(PendientesPorSolicitanteAction.class.getName());

        public ActionForward performSession(	ActionMapping mapping,
                    ActionForm form,
                    HttpServletRequest request,
                    HttpServletResponse response) throws IOException, ServletException {

      m_Log.debug("perform");
      ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));


            // Validaremos los parametros del request especificados
      HttpSession session = request.getSession();
      String opcion ="";

      if ((session.getAttribute("usuario") != null)) {
        UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
        String[] params = usuario.getParamsCon();
        int cod_dep;
        int cod_uni;
        cod_dep= usuario.getDepCod();
        cod_uni= usuario.getUnidadOrgCod();

        // Si usuario en sesion es nulo --> error.

        ActionErrors errors = new ActionErrors();

        PendientesPorSolicitanteValueObject pendSolVO = new PendientesPorSolicitanteValueObject();
        PendientesPorSolicitanteForm pendSolForm = null;

        if (form == null) {
          m_Log.debug("Rellenamos el form de Pendientes por solicitente");
          form = new PendientesPorSolicitanteForm();
          if ("request".equals(mapping.getScope()))
            request.setAttribute(mapping.getAttribute(), form);
          else
            session.setAttribute(mapping.getAttribute(), form);
        }

        pendSolForm = (PendientesPorSolicitanteForm)form;

        opcion = request.getParameter("opcion");
        if (m_Log.isInfoEnabled()) m_Log.info("la opcion en el action es " + opcion);


      if (opcion.equals("inicio")){
        // Cargar listas.
        pendSolVO.setListaTiposDocumentos(AnotacionRegistroManager.getInstance().getListaTiposIdInteresado(params));

        pendSolForm.setPendientesPorSolicitante(pendSolVO);
        opcion = "inicio";
      } else if(opcion.equals("inicioF")){
        // Cargar listas.
        pendSolVO.setListaTiposDocumentos(AnotacionRegistroManager.getInstance().getListaTiposIdInteresado(params));

        pendSolForm.setPendientesPorSolicitante(pendSolVO);
        opcion = "inicioF";
      } else if(opcion.equals("buscarTercero")) {
        String tipoDocumento = request.getParameter("codTipoDoc");
        String documento = request.getParameter("txtDNI");
        TercerosValueObject tercVO = new TercerosValueObject();
        tercVO.setTipoDocumento(tipoDocumento);
        tercVO.setDocumento(documento);
        Vector resultado = TercerosManager.getInstance().getByDocumento(tercVO,params);
        if(resultado.size() != 0) {
          tercVO = (TercerosValueObject)resultado.firstElement();
          String nombre = tercVO.getNombre();
          String apellido1 = tercVO.getApellido1();
          String apellido2 = tercVO.getApellido2();
          String part1 = tercVO.getPartApellido1();
          String part2 = tercVO.getPartApellido2();
          String nombreCompleto ="";
          if(part1 != null) nombreCompleto = part1 + " ";
          if(apellido1 != null) nombreCompleto +=apellido1 + " ";
          if(part2 !=null) nombreCompleto += part2 + " ";
          if(apellido2 != null)nombreCompleto += apellido2 + ",";
          nombreCompleto += nombre;
          pendSolVO.setTxtNombre(nombreCompleto);
          String version = tercVO.getVersion();
          pendSolVO.setVersion(version);
          String identificador = tercVO.getIdentificador();
          pendSolVO.setIdentificadorTerc(identificador);
          pendSolForm.setPendientesPorSolicitante(pendSolVO);
          opcion="buscarTercero";
        } else {
          opcion="noTercero";
        }
      } else if(opcion.equals("consultarP")) {
        pendSolVO = pendSolForm.getPendientesPorSolicitante();
        Vector consulta = new Vector();
        consulta = PendientesPorSolicitanteManager.getInstance().consultarP(pendSolVO,params);
        for(int i=0;i<consulta.size();i++) {
          PendientesPorSolicitanteValueObject pSVO = new PendientesPorSolicitanteValueObject();
          pSVO = (PendientesPorSolicitanteValueObject) consulta.elementAt(i);
          String fechaFin = pSVO.getFechaFin();
          opcion = "consultarP";
        }
        if(consulta.size() !=0) {
          pendSolVO.setConsulta(consulta);
          pendSolForm.setPendientesPorSolicitante(pendSolVO);
        } else {
          opcion = "noConsulta";
        }
      } else if(opcion.equals("consultarF")) {
        pendSolVO = pendSolForm.getPendientesPorSolicitante();
        Vector consulta = new Vector();
        consulta = PendientesPorSolicitanteManager.getInstance().consultarF(pendSolVO,params);
        for(int i=0;i<consulta.size();i++) {
          PendientesPorSolicitanteValueObject pSVO = new PendientesPorSolicitanteValueObject();
          pSVO = (PendientesPorSolicitanteValueObject) consulta.elementAt(i);
          String fechaFin = pSVO.getFechaFin();
          opcion = "consultarF";
        }
        if(consulta.size() !=0) {
          pendSolVO.setConsulta(consulta);
          pendSolForm.setPendientesPorSolicitante(pendSolVO);
        } else {
          opcion = "noConsulta";
        }
      }
   } else { // No hay usuario.
              m_Log.debug("PendientesPorSolicitanteAction --> no hay usuario");
              opcion = "no_usuario";
   }

    /* Redirigimos al JSP de salida*/
        return (mapping.findForward(opcion));

  }
}
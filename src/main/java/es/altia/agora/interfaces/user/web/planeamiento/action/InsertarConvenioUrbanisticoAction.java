/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.RegistroValueObject;
import es.altia.agora.business.planeamiento.AnotacionRegistroValueObject;
import es.altia.agora.business.planeamiento.PromotorValueObject;
import es.altia.agora.business.planeamiento.persistence.RegistroPlaneamientoManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.ConvenioUrbanisticoForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.AnotacionForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.PromotorForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import es.altia.util.exceptions.InternalErrorException;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Collection;
import java.util.ArrayList;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class InsertarConvenioUrbanisticoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(InsertarConvenioUrbanisticoAction.class.getName());
    protected static Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        try {
            m_Log.info("InsertarConvenioUrbanisticoAction.perform");
            String[] params = null;
            HttpSession session = request.getSession();

            if (session.getAttribute("usuario") != null){
                UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
                params = usuarioVO.getParamsCon();
            }

            ConvenioUrbanisticoForm convenioForm = (ConvenioUrbanisticoForm) form;
            ConvenioUrbanisticoForm convenioSessionForm = (ConvenioUrbanisticoForm)
                    session.getAttribute("ConvenioUrbanisticoForm");
            Calendar fechaAlta = Calendar.getInstance();
            Calendar fechaAprobacion = Calendar.getInstance();
            Calendar fechaBaja = Calendar.getInstance();
            Calendar fechaPublicacion = Calendar.getInstance();

            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            try {
                String fecha = convenioForm.getFechaAprobacion();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaAprobacion = null;
                } else {
                    fechaAprobacion.setTime(format.parse(fecha));
                }
                fecha = convenioForm.getFechaBaja();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaBaja = null;
                } else {
                    fechaBaja.setTime(format.parse(fecha));
                }
                fecha = convenioForm.getFechaPublicacion();
                if ((fecha==null) || (fecha.equals(""))) {
                    fechaPublicacion = null;
                } else {
                    fechaPublicacion.setTime(format.parse(fecha));
                }
            } catch (Exception e) {//En principio nunca va a entrar
                e.printStackTrace();
                if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
            }
            Calendar fechaYear = Calendar.getInstance();
            SimpleDateFormat formatYear = new SimpleDateFormat("yyyy");
            RegistroValueObject registroVO = new RegistroValueObject(
                    new Character(convenioForm.getTipoRegistro().charAt(0)),
                    convenioForm.getCodigoSubseccion(),
                    null,
                    null, formatYear.format(fechaYear.getTime()),
                    convenioForm.getNumeroRegistro(), fechaAlta, fechaAprobacion, null, fechaBaja,
                    null, null, convenioForm.getCodigoAmbito(), convenioForm.getParcela(),
                    null, convenioForm.getCodigoOrganoAprobacion(),
                    convenioForm.getObjetoConvenio(), null, null, null, null, null, fechaPublicacion,
                    convenioForm.getNumeroPublicacion(),
                    convenioForm.getObservaciones(), convenioForm.getArchivo());

            Iterator anotacionesIt = convenioSessionForm.getAnotaciones().iterator();
            Collection anotaciones = new ArrayList();
            AnotacionRegistroValueObject anotacionVO = null;
            AnotacionForm anotacionForm = null;
            Calendar fechaAnotacion = null;
            String comentario = "";
            while (anotacionesIt.hasNext()) {
                anotacionForm = (AnotacionForm) anotacionesIt.next();
                fechaAnotacion = Calendar.getInstance();
                try {
                    String fecha = anotacionForm.getFechaAnotacion();
                    if ((fecha==null) || (fecha.equals(""))) {
                        fechaAnotacion = null;
                    } else {
                        fechaAnotacion.setTime(format.parse(fecha));
                    }
                } catch (Exception e) {//En principio nunca va a entrar
                    e.printStackTrace();
                    if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                }
                comentario = anotacionForm.getComentarioAnotacion().replaceAll("@intro@", "\r\n");
                anotacionVO = new AnotacionRegistroValueObject(new Character(convenioForm.getTipoRegistro().charAt(0)),
                        convenioForm.getCodigoSubseccion(),
                        null,
                        formatYear.format(fechaYear.getTime()), anotacionForm.getNumeroAnotacion(), fechaAnotacion,
                        comentario);
                anotaciones.add(anotacionVO);
            }

            Collection firmantes = new ArrayList();

            if (convenioSessionForm.getPartesFirmantes().isEmpty()) {
                return (mapping.findForward("firmantesNoExisten"));
            }
            Iterator firmantesIt = convenioSessionForm.getPartesFirmantes().iterator();
            PromotorValueObject promotorVO = null;
            PromotorForm promotorForm = null;
            while (firmantesIt.hasNext()) {
                promotorForm = (PromotorForm) firmantesIt.next();
                promotorVO = new PromotorValueObject(new Character(convenioForm.getTipoRegistro().charAt(0)),
                        convenioForm.getCodigoSubseccion(),
                        null,
                        formatYear.format(fechaYear.getTime()), new Integer(promotorForm.getCodigo()));
                firmantes.add(promotorVO);
            }

            Integer numero = RegistroPlaneamientoManager.getInstance().create(registroVO, anotaciones,
                    firmantes, params);
            convenioSessionForm.setNumero(numero.toString());
            convenioSessionForm.setNumeroRegistro(formatYear.format(fechaYear.getTime()) + "/" + numero.toString());
            convenioSessionForm.setAnho(formatYear.format(fechaYear.getTime()));
            convenioSessionForm.setTipoRegistro(convenioForm.getTipoRegistro());
            convenioSessionForm.setCodigoSubseccion(convenioForm.getCodigoSubseccion());
            convenioSessionForm.setFechaAprobacion(convenioForm.getFechaAprobacion());
            convenioSessionForm.setFechaBaja(convenioForm.getFechaBaja());
            convenioSessionForm.setCodigoAmbito(convenioForm.getCodigoAmbito());
            convenioSessionForm.setParcela(convenioForm.getParcela());
            convenioSessionForm.setCodigoOrganoAprobacion(convenioForm.getCodigoOrganoAprobacion());
            convenioSessionForm.setObjetoConvenio(convenioForm.getObjetoConvenio().replaceAll("\r\n", "@intro@"));
            convenioSessionForm.setFechaPublicacion(convenioForm.getFechaPublicacion());
            convenioSessionForm.setNumeroPublicacion(convenioForm.getNumeroPublicacion());
            convenioSessionForm.setObservaciones(convenioForm.getObservaciones());
            convenioSessionForm.setArchivo(convenioForm.getArchivo());

            session.setAttribute("ConvenioUrbanisticoForm", convenioSessionForm);

            Collection convenios = new ArrayList();
            convenios.add(convenioSessionForm);
            session.setAttribute("registrosConvenio", convenios);
            request.setAttribute("registroActual", "1");

            return (mapping.findForward("default"));
        } catch  (InternalErrorException e) {
            return (mapping.findForward("errorInsercion"));
        }
    }
}
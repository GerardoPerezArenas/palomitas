/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action.mantenimiento;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.persistence.MantProcedimientoManager;
import es.altia.agora.business.planeamiento.mantenimiento.MantProcedimientoValueObject;
import es.altia.agora.business.planeamiento.persistence.RegistroManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.mantenimiento.MantenimientoProcedimientosForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.mantenimiento.MantenimientoProcedimientoForm;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.Iterator;
import java.util.Collection;
import java.util.ArrayList;
import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class EliminarProcedimientoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(EliminarProcedimientoAction.class.getName());

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("EliminarProcedimientoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
        }

        MantenimientoProcedimientosForm procedimientosForm = (MantenimientoProcedimientosForm) form;

        //Comprobamos que el procedimiento no esta siendo utilizado
        Vector registros = RegistroManager.getInstance().findByProcedimiento(procedimientosForm.getCodigo(), params);
        if (!registros.isEmpty()) {
            request.setAttribute("procedimientos", ((MantenimientoProcedimientosForm)
                session.getAttribute("MantenimientoProcedimientosForm")).getProcedimientos());
            return (mapping.findForward("noDelete"));
        }
        
        MantProcedimientoValueObject procedimientoVO = new MantProcedimientoValueObject(procedimientosForm.getCodigo(), procedimientosForm.getDescripcion());
        MantProcedimientoManager.getInstance().delete(procedimientoVO, params);

        Iterator procedimientosIt = ((MantenimientoProcedimientosForm)
                session.getAttribute("MantenimientoProcedimientosForm")).getProcedimientos().iterator();
        Collection procedimientos = new ArrayList();
        while (procedimientosIt.hasNext()) {
            MantenimientoProcedimientoForm mantProcedimientoForm = (MantenimientoProcedimientoForm) procedimientosIt.next();
            if (!mantProcedimientoForm.getCodigo().equals(procedimientosForm.getCodigo())) {
                procedimientos.add(mantProcedimientoForm);
            }
        }

        procedimientosForm.setProcedimientos(procedimientos);

        session.setAttribute("MantenimientoProcedimientosForm", procedimientosForm);
        return (mapping.findForward("default"));
    }
}
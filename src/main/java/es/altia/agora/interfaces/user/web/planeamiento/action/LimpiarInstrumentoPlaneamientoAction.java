/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.InstrumentoPlaneamientoForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Collection;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class LimpiarInstrumentoPlaneamientoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(LimpiarInstrumentoPlaneamientoAction.class.getName());

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("LimpiarInstrumentoPlaneamientoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        InstrumentoPlaneamientoForm instrumentoForm = (InstrumentoPlaneamientoForm)
                session.getAttribute("InstrumentoPlaneamientoForm");

        Collection registrosPlaneamiento = (Collection) session.getAttribute("registrosPlaneamiento");
        Iterator registrosPlaneamientoIt = null;
        if (registrosPlaneamiento!=null) {
            registrosPlaneamientoIt = registrosPlaneamiento.iterator();
            registrosPlaneamiento = new ArrayList();
            Integer numRegistro = new Integer(request.getParameter("numeroRegistro"));
            int i = 1;
            while (registrosPlaneamientoIt.hasNext()) {
                InstrumentoPlaneamientoForm insForm = (InstrumentoPlaneamientoForm) registrosPlaneamientoIt.next();
                if (numRegistro.intValue() == i) {
                    InstrumentoPlaneamientoForm instForm = (InstrumentoPlaneamientoForm) insForm.clone();
                    registrosPlaneamiento.add(instForm);
                } else {
                    registrosPlaneamiento.add(insForm);
                }
                i++;
            }
            session.setAttribute("registrosPlaneamiento", registrosPlaneamiento);
        }

        instrumentoForm.setCodigosPromotor(new ArrayList());
        instrumentoForm.setAnotaciones(new ArrayList());
        instrumentoForm.setRectificaciones(new ArrayList());
        session.setAttribute("InstrumentoPlaneamientoForm", instrumentoForm);

        return (mapping.findForward("default"));
    }
}
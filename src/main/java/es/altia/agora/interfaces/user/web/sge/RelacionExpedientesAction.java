/* Generated by Together */
package es.altia.agora.interfaces.user.web.sge;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.sge.*;
import es.altia.agora.business.sge.exception.TramitacionException;
import es.altia.agora.business.sge.persistence.*;
import es.altia.agora.business.terceros.*;
import es.altia.agora.business.util.ElementoListaValueObject;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.technical.EstructuraNotificacion;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import es.altia.common.service.mail.MailHelper;
import es.altia.common.service.mail.exception.MailServiceNotActivedException;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import java.util.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class RelacionExpedientesAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(RelacionExpedientesAction.class.getName());
    String codPais = "";
    String codProvincia = "";
    String codMunicipio = "";

    public ActionForward performSession(	ActionMapping mapping,
                                            ActionForm form,
                                            HttpServletRequest request,
                                            HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("RelacionExpedientesAction.perform");
//        ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));


        // Validaremos los parametros del request especificados
        HttpSession session = request.getSession();
        String opcion ="";

        if ((session.getAttribute("usuario") != null)) {
            UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
            String[] params = usuario.getParamsCon();
            ParametrosTerceroValueObject paramsTercero = (ParametrosTerceroValueObject)session.getAttribute("parametrosTercero");
            codPais = paramsTercero.getPais();
            codProvincia = paramsTercero.getProvincia();
            codMunicipio = paramsTercero.getMunicipio();
            // Si usuario en sesion es nulo --> error.

            ActionErrors errors = new ActionErrors();

            RelacionExpedientesValueObject relExpVO = new RelacionExpedientesValueObject();
            RelacionExpedientesForm relExpForm = null;

            if (form == null) {
                m_Log.debug("Rellenamos el form de Relacion de Expedientes");
                form = new RelacionExpedientesForm();
                if ("request".equals(mapping.getScope()))
                    request.setAttribute(mapping.getAttribute(), form);
                else
                    session.setAttribute(mapping.getAttribute(), form);
            }

            relExpForm = (RelacionExpedientesForm)form;


            opcion = request.getParameter("opcion");
            if (m_Log.isInfoEnabled()) m_Log.info("la opcion en el action es " + opcion);

            if (opcion.equals("crear")){
                Vector listaProcedimientos = new Vector();
                //int sinTipoProcs = 1; // 0: Oficio; 1: Instancia de parte; 2:Ambos.
                int sinTipoProcs = -1; // 0: Oficio; 1: Instancia de parte; 2:Ambos, -1: Cualquier tipo de inicio
                try {
                  listaProcedimientos=TramitacionManager.getInstance().getListaProcedimientosUsuario2(usuario,sinTipoProcs, params);
                  if (m_Log.isDebugEnabled()) m_Log.debug("Procedimientos " + listaProcedimientos.size());                  
                } catch (TramitacionException te) {
                  listaProcedimientos = new Vector();
                }
                Vector listaTramites = new Vector();
                relExpVO.setListaTramites(listaTramites);
                relExpVO.setListaProcedimientos(listaProcedimientos);
                relExpForm.setRelacionExpedientes(relExpVO);
                opcion = "crear";
            } else if (opcion.equals("iniciar")){
                GeneralValueObject fichaRelExpVO = new GeneralValueObject();
                String codMunicipio = request.getParameter("codMunicipio");
                String codProcedimiento = request.getParameter("codProcedimiento");
                String codTramite = request.getParameter("codOcultoTramite");
                String uor = request.getParameter("codUOR");
                String utrTramite = request.getParameter("codOcultoUtr");
                fichaRelExpVO.setAtributo("codMunicipio",codMunicipio);
                fichaRelExpVO.setAtributo("codProcedimiento",codProcedimiento);
                fichaRelExpVO.setAtributo("tramiteIni",codTramite);
                fichaRelExpVO.setAtributo("usuarioIni",String.valueOf(usuario.getIdUsuario()));
                fichaRelExpVO.setAtributo("codUORIni",uor);
                // Recuperar listas de Expedientes
                String listaMunExp = request.getParameter("listaMunExped");
                String listaProExp = request.getParameter("listaProExped");
                String listaEjeExp = request.getParameter("listaEjeExped");
                String listaNumExp = request.getParameter("listaNumExped");
                m_Log.debug("LISTA EXPEDIENTES              ->   "+request.getParameter("listaNumExp"));
                FichaRelacionExpedientesForm fichaRelExpForm = new FichaRelacionExpedientesForm();
                fichaRelExpForm.setListaMunExp(listaTemasSeleccionados(listaMunExp));
                fichaRelExpForm.setListaProExp(listaTemasSeleccionados(listaProExp));
                fichaRelExpForm.setListaEjeExp(listaTemasSeleccionados(listaEjeExp));
                fichaRelExpForm.setListaNumExp(listaTemasSeleccionados(listaNumExp));
                fichaRelExpForm.setFichaRelExpVO(fichaRelExpVO);
                String bloqueo = request.getParameter("bloqueo");
                fichaRelExpForm.setBloqueo(bloqueo);
                int res = FichaRelacionExpedientesManager.getInstance().insertRelacionExpediente(fichaRelExpForm, params, utrTramite);
                m_Log.debug("NUMERO              ->   "+fichaRelExpForm.getNumeroRelacion());
                m_Log.debug("PROCEDIMIENTO       ->   "+fichaRelExpForm.getCodProcedimiento());
                m_Log.debug("EJERCICIO           ->   "+fichaRelExpForm.getEjercicio());
                relExpForm.setNumeroRelacion(fichaRelExpForm.getNumeroRelacion());
                relExpForm.setCodProcedimiento(fichaRelExpForm.getCodProcedimiento());
                relExpForm.setEjercicio(fichaRelExpForm.getEjercicio());
//                if (res>0) {
////                    if (notificar(usuario, fichaRelExpVO)) {
////                        fichaRelExpVO.setAtributo("notificacionRealizada","si");
////                    } else {
////                        fichaRelExpVO.setAtributo("notificacionRealizada","no");
////                    }
//                }
                opcion = "mostrarNumero";
            } else if (opcion.equals("cargarTramites")) {
                DefinicionProcedimientosValueObject defProcVO = new DefinicionProcedimientosValueObject();
                String codMunicipio = request.getParameter("codMunicipio");
                String codigo = request.getParameter("codProcedimiento");
                m_Log.debug("MUNICIPIO      ->   "+codMunicipio);
                m_Log.debug("PROCEDIMIENTO  ->   "+codigo);
                defProcVO.setCodMunicipio(codMunicipio);
                defProcVO.setTxtCodigo(codigo);
                defProcVO = DefinicionProcedimientosManager.getInstance().buscar(defProcVO,params);
                relExpVO.setListaTramites(defProcVO.getTramites());
                relExpForm.setRelacionExpedientes(relExpVO);
                
                String codigoProcedimiento = request.getParameter("codProcedimiento");          
                String codigoMunicipio = request.getParameter("codMunicipio");
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio", codigoMunicipio);
                gVO.setAtributo("codProcedimiento", codigoProcedimiento);
                
                Vector<ElementoListaValueObject> listaUnidadesProcedimiento = TramitacionManager.getInstance().getListaUORs_usuarioPorProc(usuario, codigoMunicipio, codigoProcedimiento,params);
                relExpVO.setListaUnidadesProcedimiento(listaUnidadesProcedimiento);
                relExpForm.setListaUnidadesProcedimiento(listaUnidadesProcedimiento);
            } else if (opcion.equals("cargarUnidadesTramitadoras")) {
                // Se realizará la carga de las unidades tramitadoras correspondientes.
                String strProcedimiento = request.getParameter("codProcedimiento");
                String strTramite = request.getParameter("codOcultoTramite");
                String strMunicipio = request.getParameter("codMunicipio");
                int codMun = Integer.parseInt(strMunicipio);
                int codTramite = Integer.parseInt(strTramite);                
                Vector<ElementoListaValueObject> listaUtrs = 
                        TramitacionExpedientesManager.getInstance().getUnidadesTramitadorasUsuario(
                        params, codMun, strProcedimiento, codTramite, usuario.getIdUsuario());
                relExpVO.setListaUnidadesTramitadoras(listaUtrs);
                relExpForm.setRelacionExpedientes(relExpVO);
                
                String codigoProcedimiento = request.getParameter("codProcedimiento");          
                String codigoMunicipio = request.getParameter("codMunicipio");

                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio", codigoMunicipio);
                gVO.setAtributo("codProcedimiento", codigoProcedimiento);
               
                Vector<ElementoListaValueObject> listaUnidadesProcedimiento = TramitacionManager.getInstance().getListaUORs_usuarioPorProc(usuario, codigoMunicipio, codigoProcedimiento,params);
                relExpVO.setListaUnidadesProcedimiento(listaUnidadesProcedimiento);
                relExpForm.setListaUnidadesProcedimiento(listaUnidadesProcedimiento); 
            } else if (opcion.equals("buscarExpedientes")) {
                try{
                    Config m_ConfigExp = ConfigServiceHelper.getConfig("Expediente");
                    Boolean seleccionarTodosSW = m_ConfigExp.getString(Integer.toString(usuario.getOrgCod())  + "/seleccionaTodosRelacionExpedientes").toUpperCase().equals("SI");
                    request.setAttribute("SeleccionarTodos",seleccionarTodosSW);
                    }
                catch(Exception e)
                    {
                    }
                
                String codProcedimiento = request.getParameter("codProcedimiento");
                String codTramite = request.getParameter("codOcultoTramite");
                String codUtr = request.getParameter("codOcultoUtr");
                Vector expedientes = RelacionExpedientesManager.getInstance().getExpedientesPendientes(usuario,codProcedimiento,codTramite,codUtr,params);
                session.setAttribute("RelacionExpedientes",expedientes);
            } else if (opcion.equals("buscarRelaciones")) {
                String codProcedimiento = request.getParameter("codProcedimiento");
                String codTramite = request.getParameter("codOcultoTramite");
                Vector relaciones = RelacionExpedientesManager.getInstance().getRelacionesPendientes(usuario,codProcedimiento,codTramite,params);
                m_Log.debug("RELACIONES  ->   "+relaciones.size());
                session.setAttribute("RelacionRelaciones",relaciones);
            } else if ("deshacer".equals(opcion)) {
                Vector listaProcedimientos = new Vector();
                //int sinTipoProcs = 1; // 0: Oficio; 1: Instancia de parte; 2:Ambos.
                int sinTipoProcs = -1; // 0: Oficio; 1: Instancia de parte; 2:Ambos,-1: Cualquier tipo de inicio
                try {
                  listaProcedimientos=TramitacionManager.getInstance().getListaProcedimientosUsuario2(usuario,sinTipoProcs, params);
                  if (m_Log.isDebugEnabled()) m_Log.debug("Procedimientos " + listaProcedimientos.size());
                } catch (TramitacionException te) {
                  listaProcedimientos = new Vector();
                }
                Vector listaTramites = new Vector();
                relExpVO.setListaTramites(listaTramites);
                relExpVO.setListaProcedimientos(listaProcedimientos);
                relExpForm.setRelacionExpedientes(relExpVO);
                opcion="deshacer";
            } else if(opcion.equals("mostrarNumero")) {
                opcion = "mostrarNumero";
            } else if(opcion.equals("pendientes")) {
                Vector consultaE = new Vector();
                consultaE = RelacionExpedientesManager.getInstance().getRelacionExpedientesPendientes(usuario,relExpVO,params);
                session.setAttribute("RelacionExpedientes",consultaE);
                session.setAttribute("RelacionExpedientesInicial",consultaE);
                opcion = "pendientes";
            } else if(opcion.equals("cargar_pagina_rel_pendientes")) {
                relExpVO = relExpForm.getRelacionExpedientes();
                relExpForm.setRelacionExpedientes(relExpVO);
            } else if (opcion.equals("fueraPlazo")) {
                Vector consultaE;
                Vector fueraPlazo = new Vector();
                consultaE = (Vector) session.getAttribute("RelacionExpedientesInicial");
                m_Log.debug("VECTOR              ->   "+consultaE.size());
                for (int i=0;i<consultaE.size();i++) {
                  relExpVO = (RelacionExpedientesValueObject) consultaE.elementAt(i);
                  if (relExpVO.getFueraDePlazo().equals("si")) {
                      fueraPlazo.addElement(relExpVO);
                  }
                }
                opcion="pendientes";
                session.setAttribute("RelacionExpedientes",fueraPlazo);
            } else if (opcion.equals("pendientesEstaUnidad")) {
                Vector consultaE;
                Vector pendientesEstaUnidad = new Vector();
                consultaE = (Vector) session.getAttribute("RelacionExpedientesInicial");
                for (int i=0;i<consultaE.size();i++) {
                  relExpVO = (RelacionExpedientesValueObject) consultaE.elementAt(i);
                  if (relExpVO.getPendiente().equals("si")) {
                      pendientesEstaUnidad.addElement(relExpVO);
                  }
                }
                opcion="pendientes";
                session.setAttribute("RelacionExpedientes",pendientesEstaUnidad);
            } else if (opcion.equals("pendientesOtraUnidad")) {
                Vector consultaE;
                Vector pendientesOtraUnidad = new Vector();
                consultaE = (Vector) session.getAttribute("RelacionExpedientesInicial");
                for (int i=0;i<consultaE.size();i++) {
                  relExpVO = (RelacionExpedientesValueObject) consultaE.elementAt(i);
                  if (relExpVO.getPendiente().equals("no")) {
                      pendientesOtraUnidad.addElement(relExpVO);
                  }
                }
                opcion="pendientes";
                session.setAttribute("RelacionExpedientes",pendientesOtraUnidad);
            }
        }   else { // No hay usuario.
            m_Log.warn("RelacionExpedienteAction --> no hay usuario");
            opcion = "no_usuario";
        }

        /* Redirigimos al JSP de salida*/
        return (mapping.findForward(opcion));

    }

    private Vector listaTemasSeleccionados(String listTemasSelecc) {
      Vector lista = new Vector();
      StringTokenizer valores = null;
      if (listTemasSelecc != null) {
        valores = new StringTokenizer(listTemasSelecc,"§¥",false);
        while (valores.hasMoreTokens()) {
          String valor = valores.nextToken();
          lista.addElement(valor);
        }
      }
      return lista;
    }

    public boolean notificar(UsuarioValueObject usuario, GeneralValueObject gVO) {
        boolean resultado = true;
        try {

                if (m_Log.isDebugEnabled()) m_Log.debug("ENTRA EN NOTIFICAR DE FICHARELACIONEXPEDIENTESACTION");
                EstructuraNotificacion estructuraNotificacion = (EstructuraNotificacion) gVO.getAtributo("mailsUsuariosAlIniciar");
                Config m_ConfigApplication = ConfigServiceHelper.getConfig("techserver");
                String asunto = m_ConfigApplication.getString("mail.subject");
                String contenido;
                Vector emailsUOR;
                Vector emailsUsusUOR;
                MailHelper mailHelper = new MailHelper();
                if (m_Log.isDebugEnabled()) m_Log.debug("UNIDAD TRAMITADORA DE tramite q se inicia en NOTIFICAR: "
                    + gVO.getAtributo("nombreUORTramiteIniciado"));

                // Reemplazos de campos en el asunto y el contenido del mensaje
                emailsUOR = estructuraNotificacion.getListaEMailsUOR();
                emailsUsusUOR = estructuraNotificacion.getListaEMailsUsusUOR();
                asunto = asunto.replaceAll("@expediente@", (String) gVO.getAtributo("numeroRelacion"));
                for (int j=0;j<emailsUOR.size();j++) {
                    contenido = m_ConfigApplication.getString("mail.contentTramiteInicioUOR");
                    contenido = contenido.replaceAll("@usuario@", usuario.getNombreUsu());
                    contenido = contenido.replaceAll("@expediente@", (String) gVO.getAtributo("numeroRelacion"));
                    contenido = contenido.replaceAll("@tramite@", estructuraNotificacion.getNombreTramite());
                    mailHelper.sendMail((String) emailsUOR.elementAt(j), asunto, contenido);
                    if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE DE INICIO ENVIADO A "+emailsUOR.elementAt(j));
                }
                for (int j=0;j<emailsUsusUOR.size();j++) {
                    contenido = m_ConfigApplication.getString("mail.contentTramiteInicioUsusUOR");
                    contenido = contenido.replaceAll("@expediente@", (String) gVO.getAtributo("numeroRelacion"));
                    contenido = contenido.replaceAll("@unidadTramitadora@", (String) gVO.getAtributo("nombreUORTramiteIniciado"));
                    contenido = contenido.replaceAll("@tramite@", estructuraNotificacion.getNombreTramite());
                    mailHelper.sendMail((String) emailsUsusUOR.elementAt(j), asunto, contenido);
                    if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE DE INICIO ENVIADO A "+emailsUsusUOR.elementAt(j));
                }
                if (m_Log.isDebugEnabled()) m_Log.debug("SALE DE NOTIFICAR DE FICHARELACIONEXPEDIENTESACTION");
        } catch (MailServiceNotActivedException e) {
                m_Log.error("Servicio de mail no activado");
                //Servicio de mail no activado, funcionamiento normal
                resultado = false;
        } catch (Exception e) {
                e.printStackTrace();
                if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                resultado = false;
        }
        return resultado;
    }

}
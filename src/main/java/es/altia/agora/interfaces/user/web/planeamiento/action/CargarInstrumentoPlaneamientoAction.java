/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.persistence.*;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.InstrumentoPlaneamientoForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.PromotorForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.Iterator;
import java.util.Collection;
import java.util.ArrayList;
import java.util.Calendar;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class CargarInstrumentoPlaneamientoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(CargarInstrumentoPlaneamientoAction.class.getName());
    protected static Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("CargarInstrumentoPlaneamientoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
        }

        if (form == null) {
            m_Log.debug("Rellenamos el form de InstrumentoPlaneamiento");
            form = new InstrumentoPlaneamientoForm();
            request.setAttribute(mapping.getAttribute(), form);
        }

        Character tipoRegistro = new Character(request.getParameter("tipoRegistro").charAt(0));
        ((InstrumentoPlaneamientoForm) form).setTipoRegistro(request.getParameter("tipoRegistro"));
        Collection subsecciones = MantSubseccionManager.getInstance().findByTipoRegistro(tipoRegistro, params);
        ((InstrumentoPlaneamientoForm) form).setSubsecciones(subsecciones);
        Collection tipos = MantTipoManager.getInstance().findByTipoRegistro(tipoRegistro, params);
        ((InstrumentoPlaneamientoForm) form).setTipos(tipos);
        Collection procedimientos = MantProcedimientoManager.getInstance().findAll(params);
        ((InstrumentoPlaneamientoForm) form).setProcedimientos(procedimientos);
        Collection ambitos = MantAmbitoManager.getInstance().findAll(params);
        ((InstrumentoPlaneamientoForm) form).setAmbitos(ambitos);
        Collection organosAprobacion = MantOrganoAprobacionManager.getInstance().findAll(params);
        ((InstrumentoPlaneamientoForm) form).setOrganosAprobacion(organosAprobacion);
        Collection codPromotores = m_ConfigTechnical.getCollection("Planeamiento.Promotores.Codigos");
        Collection descPromotores = m_ConfigTechnical.getCollection("Planeamiento.Promotores.Descripciones");
        Iterator codPromotoresIt = codPromotores.iterator();
        Iterator descPromotoresIt = descPromotores.iterator();
        PromotorForm promotorForm = null;
        Collection promotores = new ArrayList();
        while (codPromotoresIt.hasNext()) {
            promotorForm = new PromotorForm();
            promotorForm.setCodigo((String) codPromotoresIt.next());
            promotorForm.setDescripcion((String) descPromotoresIt.next());
            promotores.add(promotorForm);
        }
        ((InstrumentoPlaneamientoForm) form).setPromotores(promotores);
        ((InstrumentoPlaneamientoForm) form).setAnotaciones(new ArrayList());
        ((InstrumentoPlaneamientoForm) form).setRectificaciones(new ArrayList());
        ((InstrumentoPlaneamientoForm) form).setCodigosPromotor(new ArrayList());

        session.setAttribute("InstrumentoPlaneamientoForm", form);
        if (session.getAttribute("registrosPlaneamiento")!=null) {
            session.removeAttribute("registrosPlaneamiento");
        }

        //Chapucilla para permitir solo consultas sin modificacion
        String consultando = request.getParameter("consultando");
        if (consultando!=null && consultando.equals("true")) {
            session.setAttribute("modoConsulta", "true");
        } else {
            session.setAttribute("modoConsulta", "false");
        }

        return (mapping.findForward("default"));
    }
}
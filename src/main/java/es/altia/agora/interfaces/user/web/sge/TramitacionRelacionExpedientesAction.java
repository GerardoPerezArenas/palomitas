/* Generated by Together */
package es.altia.agora.interfaces.user.web.sge;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.sge.TramitacionExpedientesValueObject;
import es.altia.agora.business.sge.TramitacionValueObject;
import es.altia.agora.business.sge.ConsultaExpedientesValueObject;
import es.altia.agora.business.sge.exception.TramitacionException;
import es.altia.agora.technical.EstructuraCampo;
import es.altia.agora.business.sge.persistence.*;
import es.altia.agora.business.administracion.persistence.GestionManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.UsuariosGruposManager;
import es.altia.agora.business.documentos.helper.CodigoSeguroVerificacionHelper;
import es.altia.agora.business.terceros.*;
import es.altia.agora.business.terceros.mantenimiento.persistence.*;
import es.altia.agora.business.terceros.persistence.*;
import es.altia.agora.business.util.*;
import es.altia.agora.business.registro.exception.AnotacionRegistroException;
import es.altia.agora.business.integracionsw.exception.EjecucionSWException;
import es.altia.agora.business.sge.InteresadoExpedienteVO;
import es.altia.agora.business.sge.plugin.documentos.AlmacenDocumento;
import es.altia.agora.business.sge.plugin.documentos.AlmacenDocumentoTramitacionFactoria;
import es.altia.agora.business.sge.plugin.documentos.exception.AlmacenDocumentoTramitacionException;
import es.altia.agora.business.sge.plugin.documentos.vo.Documento;
import es.altia.agora.business.sge.plugin.documentos.vo.DocumentoTramitacionFactoria;
import es.altia.agora.interfaces.user.web.terceros.*;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.technical.ConstantesDatos;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import java.util.StringTokenizer;
import java.util.Vector;
import java.util.Calendar;
import es.altia.agora.technical.Fecha;
import es.altia.agora.technical.EstructuraNotificacion;
import es.altia.agora.webservice.tramitacion.servicios.WSException;
import es.altia.common.exception.TechnicalException;
import es.altia.common.service.mail.MailHelper;
import es.altia.common.service.mail.exception.MailServiceNotActivedException;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;

import es.altia.flexia.integracion.moduloexterno.plugin.ModuloIntegracionExterno;
import es.altia.flexia.integracion.moduloexterno.plugin.ModuloIntegracionExternoFactoria;
import es.altia.util.commons.MimeTypes;
import es.altia.util.documentos.DocumentOperations;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.ResourceBundle;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class TramitacionRelacionExpedientesAction extends ActionSession {

    Config m_Config = ConfigServiceHelper.getConfig("common");
    protected static Log m_Log =
            LogFactory.getLog(TramitacionRelacionExpedientesAction.class.getName());
    protected static Config registroConf = ConfigServiceHelper.getConfig("Registro");
    String codPais = "";
    String codProvincia = "";
    String codMunicipio = "";

    public ActionForward performSession(	ActionMapping mapping,
                                            ActionForm form,
                                            HttpServletRequest request,
                                            HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("TramitacionRelacionExpedientesAction.perform");


        // Validaremos los parametros del request especificados
        HttpSession session = request.getSession();
        String opcion ="";

        if ((session.getAttribute("usuario") != null)) {
            UsuarioValueObject usuario = (UsuarioValueObject)session.getAttribute("usuario");
            String[] params = usuario.getParamsCon();
            int cod_dep;
            int cod_uni;
            cod_dep= usuario.getDepCod();
            cod_uni= usuario.getUnidadOrgCod();
            ParametrosTerceroValueObject paramsTercero = (ParametrosTerceroValueObject)session.getAttribute("parametrosTercero");
            codPais = paramsTercero.getPais();
            codProvincia = paramsTercero.getProvincia();
            codMunicipio = paramsTercero.getMunicipio();
            // Si usuario en sesion es nulo --> error.

            ActionErrors errors = new ActionErrors();

            TramitacionExpedientesValueObject tramExpVO = new TramitacionExpedientesValueObject();
            tramExpVO.setOrigenLlamada(ConstantesDatos.ORIGEN_LLAMADA_INTERFAZ_WEB);
            TramitacionExpedientesForm tramExpForm = null;

            if (form == null) {
                m_Log.debug("Rellenamos el form de Tramitacion de Expedientes");
                form = new TramitacionExpedientesForm();
                if ("request".equals(mapping.getScope()))
                    request.setAttribute(mapping.getAttribute(), form);
                else
                    session.setAttribute(mapping.getAttribute(), form);
            }

            tramExpForm = (TramitacionExpedientesForm)form;
            tramExpForm.setHayTramPend(false);
            opcion = request.getParameter("opcion");
            if (m_Log.isInfoEnabled()) m_Log.info("la opcion en el action es " + opcion);

			FichaRelacionExpedientesForm fichaRelExpForm = (FichaRelacionExpedientesForm) session.getAttribute("FichaRelacionExpedientesForm");

            if (opcion.equals("inicio")){
                String numeroRelacion = request.getParameter("numeroRelacion");
                if (m_Log.isDebugEnabled()) m_Log.debug("NUMERO RELACION .................. " + numeroRelacion);

                //Extraer el numero del primer expediente de la relacion, pues todos tendrán los mismos datos,
                //para cargar el trámite indicado.
                Vector expedientes = fichaRelExpForm.getExpedientes();
                String numeroExpediente = "", ejercicioExpediente = "";
                if (expedientes != null) {
                    numeroExpediente = (String) ((GeneralValueObject) expedientes.get(0)).getAtributo("numExp"); // Cojo el primer elemento de los expedientes
                    ejercicioExpediente = (String) ((GeneralValueObject) expedientes.get(0)).getAtributo("ejeExp");
                    m_Log.debug("NUMERO EXPEDIENTE --> " + numeroExpediente);
                }
                //Fin

                String procedimiento = request.getParameter("procedimiento");
                String codMunicipio = request.getParameter("codMunicipio");
                String codProcedimiento = request.getParameter("codProcedimiento");
                String ejercicio = request.getParameter("ejercicio");
                String numero = request.getParameter("numero");
                String codTramite = request.getParameter("codTramite");
                String ocurrenciaTramite = request.getParameter("ocurrenciaTramite");
                String titular = request.getParameter("titular");
                String codUnidadOrganicaExp = request.getParameter("codUnidadOrganicaExp");
                String codUnidadTramitadoraTram = request.getParameter("codUnidadTramitadoraTram");
                String desdeInformesGestion = request.getParameter("desdeInformesGestion");
                String todos = request.getParameter("todos");
                tramExpVO.setNumeroRelacion(numeroRelacion);
                tramExpVO.setNumeroRelacionMostrar(m_Config.getString("constante.relacion")+numeroRelacion);
                tramExpVO.setNumeroExpediente(numeroExpediente);
                tramExpVO.setProcedimiento(procedimiento);
                tramExpVO.setCodMunicipio(codMunicipio);
                tramExpVO.setCodProcedimiento(codProcedimiento);
                tramExpVO.setEjercicio(ejercicio);
                tramExpVO.setNumero(numero);
                tramExpVO.setCodTramite(codTramite);
                tramExpVO.setOcurrenciaTramite(ocurrenciaTramite);
                tramExpVO.setTitular(titular);
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                tramExpVO.setCodOrganizacion(Integer.toString(usuario.getOrgCod()));
                tramExpVO.setCodEntidad(Integer.toString(usuario.getEntCod()));
                tramExpVO.setCodUnidadOrganicaExp(codUnidadOrganicaExp);
                tramExpVO.setCodUnidadTramitadoraTram(codUnidadTramitadoraTram);
                tramExpVO.setDesdeInformesGestion(desdeInformesGestion);
                tramExpVO.setTodos(todos);
                session.removeAttribute("RelacionDomicilios");
                String modoConsulta = request.getParameter("modoConsulta");
                if(modoConsulta == null) {
                    modoConsulta = "no";
                }
                tramExpVO.setModoConsulta(modoConsulta);
                String expRelacionado = request.getParameter("expRelacionado");
                if(expRelacionado == null) {
                    expRelacionado = "no";
                } else {
                    String codMunExpIni = request.getParameter("codMunExpIni");
                    String ejercicioExpIni = request.getParameter("ejercicioExpIni");
                    String numeroExpIni = request.getParameter("numeroExpIni");
                    tramExpVO.setCodMunicipioIni(codMunExpIni);
                    tramExpVO.setEjercicioIni(ejercicioExpIni);
                    tramExpVO.setNumeroIni(numeroExpIni);
                }
                tramExpVO.setExpRelacionado(expRelacionado);


                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",codMunicipio);
                gVO.setAtributo("codProcedimiento",codProcedimiento);
                gVO.setAtributo("numeroRelacion",numeroRelacion);
                gVO.setAtributo("ejercicio",ejercicio);

                m_Log.debug("CARGAR RELACION EXPEDIENTES SIN INTERESADOS --> INI cargaRelacionExpedientesSinInteresados");
                Vector listaExpedientesNoInteresados = TramitacionExpedientesManager.getInstance().getListaExpedientesNoInteresadosRelacion(gVO,params);
                tramExpVO.setListaExpedientesNoInteresados(listaExpedientesNoInteresados);

                String ejercicioRelacion = tramExpVO.getEjercicio();
                tramExpVO.setEjercicio(ejercicioExpediente);
                tramExpVO = TramitacionExpedientesManager.getInstance().cargarDatos(tramExpVO,params);

                tramExpVO = DocumentosRelacionExpedientesManager.getInstance().cargarDocumentos(tramExpVO,params);

                tramExpVO.setDesdeJsp("si");
                Vector estructuraDatosSuplementarios = TramitacionExpedientesManager.getInstance().cargaEstructuraDatosSuplementarios(tramExpVO, params);
                estructuraDatosSuplementarios=FichaRelacionExpedientesManager.getInstance().filtrarEstructuraDatosRelaciones
                        (estructuraDatosSuplementarios,numeroRelacion,params);
                tramExpVO.setEstructuraDatosSuplementarios(estructuraDatosSuplementarios);

                Vector valoresDatosSuplementarios = TramitacionExpedientesManager.getInstance().cargaValoresDatosSuplementarios(tramExpVO,estructuraDatosSuplementarios, params);
               
                valoresDatosSuplementarios=FichaRelacionExpedientesManager.getInstance().filtrarDatosSuplementariosRelacion
                        (estructuraDatosSuplementarios,valoresDatosSuplementarios,numeroRelacion,params);
                tramExpVO.setValoresDatosSuplementarios(valoresDatosSuplementarios);

                GeneralValueObject valoresFicheros = TramitacionExpedientesManager.getInstance().cargaValoresFicheros(tramExpVO,estructuraDatosSuplementarios, params);
                tramExpVO.setListaFicheros(valoresFicheros);
                
                GeneralValueObject nombresFicheros = TramitacionExpedientesManager.getInstance().cargaNombresFicheros(tramExpVO,estructuraDatosSuplementarios, params);
                tramExpVO.setListaNombresFicheros(nombresFicheros);

                GeneralValueObject tiposFicheros = TramitacionExpedientesManager.getInstance().cargaTiposFicheros(tramExpVO,estructuraDatosSuplementarios, params);
                tramExpVO.setListaTiposFicheros(tiposFicheros);

                String usu_bloqueo = tramExpVO.getBloqueo();
                if (!usu_bloqueo.equals("")) {
                    if (String.valueOf(usuario.getIdUsuario()).equals(usu_bloqueo)) {
                        tramExpVO.setBloqueo("1"); // Bloqueo por el usuario
                    } else {
                        tramExpVO.setBloqueo("2"); // Bloqueo por otro usuario
                    }
                } else {
                    tramExpVO.setBloqueo("0"); // Sin bloqueo
                }

                tramExpVO.setEjercicio(ejercicioRelacion);
                // fin COMPROBAR SI EXISTE BLOQUEO EN EL TRÁMITE DEL EXPEDIENTE

                tramExpForm.setTramitacionExpedientes(tramExpVO);

                
               /***************** MODULOS DE INTEGRACION EXTERNOS **********************/

                ArrayList<ModuloIntegracionExterno> modulosExternos = ModuloIntegracionExternoFactoria.getInstance().getImplClassModuloTramiteConPantallaTramitacion(usuario.getOrgCod(),codProcedimiento, Integer.parseInt(codTramite),true,usuario.getIdUsuario(),params);
                tramExpForm.setModulosExternos(modulosExternos);

                /***************** MODULOS DE INTEGRACION EXTERNOS **********************/

                opcion = "inicio";
            } else if(opcion.equals("bloquear")) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                gVO.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                gVO.setAtributo("ejercicio",tramExpVO.getEjercicio());
                gVO.setAtributo("numero",tramExpVO.getNumeroRelacion());
                if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));

                Vector expedientes = new Vector();
                expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);

                Vector expedientesFinalizados = new Vector();

                if (m_Log.isDebugEnabled()) m_Log.debug("EXPEDIENTES. : " + expedientes.size());
                for (int i=0; i < expedientes.size(); i++) {
                    if (m_Log.isDebugEnabled()) m_Log.debug("EXP. : " + ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumeroExpediente((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO = tramExpForm.getTramitacionExpedientes();
                    if (TramitacionExpedientesManager.getInstance().bloquearTramite(tramExpVO, usuario.getIdUsuario(), params)==-1) {
                        tramExpVO.setRespOpcion("noGrabado");
                    } else {
                        tramExpVO.setRespOpcion("grabado");
                        
                        // Registramos el movimiento de la operacion
                        GeneralValueObject paramMovimiento = new GeneralValueObject();
                        paramMovimiento.setAtributo("codMunicipio", tramExpVO.getCodMunicipio());
                        paramMovimiento.setAtributo("codProcedimiento", tramExpVO.getCodProcedimiento());
                        paramMovimiento.setAtributo("ejercicio", tramExpVO.getEjercicio());
                        paramMovimiento.setAtributo("numero", tramExpVO.getNumeroExpediente());
                        paramMovimiento.setAtributo("codTramite", tramExpVO.getCodTramite());
                        paramMovimiento.setAtributo("nomTramite", tramExpVO.getTramite());
                        paramMovimiento.setAtributo("ocurrTramite", tramExpVO.getOcurrenciaTramite());
                        paramMovimiento.setAtributo("fechaInicioTramite", tramExpVO.getFechaInicio());
                        paramMovimiento.setAtributo("usuario", Integer.toString(usuario.getIdUsuario()));
                        paramMovimiento.setAtributo("nombreUsuario", usuario.getNombreUsu());

                        OperacionesExpedienteManager.getInstance().registrarBloquearTramite(paramMovimiento, params);
                    }
                }
                tramExpVO.setBloqueo("1"); // Bloqueo por el usuario
                opcion = "inicio";
            } else if(opcion.equals("desbloquear")) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                gVO.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                gVO.setAtributo("ejercicio",tramExpVO.getEjercicio());
                gVO.setAtributo("numero",tramExpVO.getNumeroRelacion());
                if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));

                Vector expedientes = new Vector();
                expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);

                Vector expedientesFinalizados = new Vector();

                if (m_Log.isDebugEnabled()) m_Log.debug("EXPEDIENTES. : " + expedientes.size());
                for (int i=0; i < expedientes.size(); i++) {
                    if (m_Log.isDebugEnabled()) m_Log.debug("EXP. : " + ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumeroExpediente((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO = tramExpForm.getTramitacionExpedientes();
                    if (TramitacionExpedientesManager.getInstance().desbloquearTramite(tramExpVO, usuario.getIdUsuario(), params)==-1) {
                        tramExpVO.setRespOpcion("noGrabado");
                    } else {
                        tramExpVO.setRespOpcion("grabado");
                        
                        // Registramos el movimiento de la operacion
                        GeneralValueObject paramMovimiento = new GeneralValueObject();
                        paramMovimiento.setAtributo("codMunicipio", tramExpVO.getCodMunicipio());
                        paramMovimiento.setAtributo("codProcedimiento", tramExpVO.getCodProcedimiento());
                        paramMovimiento.setAtributo("ejercicio", tramExpVO.getEjercicio());
                        paramMovimiento.setAtributo("numero", tramExpVO.getNumeroExpediente());
                        paramMovimiento.setAtributo("codTramite", tramExpVO.getCodTramite());
                        paramMovimiento.setAtributo("nomTramite", tramExpVO.getTramite());
                        paramMovimiento.setAtributo("ocurrTramite", tramExpVO.getOcurrenciaTramite());
                        paramMovimiento.setAtributo("fechaInicioTramite", tramExpVO.getFechaInicio());
                        paramMovimiento.setAtributo("usuario", Integer.toString(usuario.getIdUsuario()));
                        paramMovimiento.setAtributo("nombreUsuario", usuario.getNombreUsu());

                        OperacionesExpedienteManager.getInstance().registrarDesbloquearTramite(paramMovimiento, params);
                    }
                }

                tramExpVO.setBloqueo("0"); // Bloqueo por el usuario
                opcion = "inicio";
            } else if(opcion.equals("listaDocumentosTramite")) {
                tramExpForm = (TramitacionExpedientesForm)form;
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setRelacion("S");
                tramExpVO = TramitacionExpedientesManager.getInstance().getListaDocumentosTramite(tramExpVO,params);
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                session.removeAttribute("RelacionDomicilios");

                opcion = "listaDocumentosTramite";
            } else if(opcion.equals("preguntaRelacion")) {
                opcion = "preguntaRelacion";
            } else if ("grabarTramite".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                tramExpVO.setNombreUsuario(usuario.getNombreUsu());
                if (m_Log.isDebugEnabled()) m_Log.debug("el codigo del tramite en grabarTramite es : " + tramExpVO.getCodTramite());
                tramExpVO.setBloqueo("no"); //Aki se utiliza para no eliminar el bloqueo, solo grabar


                m_Log.debug("CARGAR RELACION EXPEDIENTES --> INI cargaListaExpedientes");

                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                gVO.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                gVO.setAtributo("ejercicio",tramExpVO.getEjercicio());
                gVO.setAtributo("numero",tramExpVO.getNumeroRelacion());
                if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));
                Vector expedientes = new Vector();
                expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);
                for (int i=0; i < expedientes.size(); i++) {
                    if (m_Log.isDebugEnabled()) m_Log.debug("EXP. : " + ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumeroExpediente((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumero((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                     /*Hay que tener en cuenta qu el ejercicio de las relaciones no siempre
                     es el mismo que el ejercicio del expediente. Por ello, para cada expediente se actualiza
                     el ejercicio, dejando el que se recoge de la request solo para la relación.*/
                    tramExpVO.setEjercicio(tramExpVO.getNumeroExpediente().substring(0, 4));

                    Vector listaCodInteresados = new Vector();
                    tramExpVO.setVectorCodInteresados(listaCodInteresados);

                    if (TramitacionExpedientesManager.getInstance().grabarTramite(tramExpVO, params)==-1) {
                        tramExpVO.setRespOpcion("noGrabado");
                    } else {
                        int resultado = grabarDatosSuplementarios(tramExpForm,tramExpVO,request,params);
                        OperacionesExpedienteManager.getInstance().registrarGrabarTramite(tramExpVO, params);
                        
                        if (resultado == 1) {
                            
                            resultado = grabarDatosSuplementariosFichero(tramExpForm,tramExpVO,request,params);
                            if (resultado != 1)
                                request.setAttribute("errorGrabarDatosSuplFichero", "1");
                        }
                        tramExpVO.setRespOpcion("grabado");
                    }
                }


                // SE COMPRUEBA SI HAY QUE LLAMAR A ALGUNA OPERACION JAVASCRIPT DE LAS PESTAÑAS DE TRÁMITE DE LOS MÓDULOS EXTERNOS QUE PUEDAN ESTAR
                // CONFIGURADAS PARA EL TRÁMITE ACTUAL. ESTO ES NECESARIO PORQUE EL CONTENIDO DE ALGUNA DE ESTAS PESTAÑAS PUEDE DEPENDER DE ALGUNO
                // DE LOS CAMBIOS QUE SE HAYAN HECHO EN EL TRÁMITE COMO EN EL VALOR DE ALGÚN CAMPO SUPLEMENTARIO
                ArrayList<String> opsJavascript = ModuloIntegracionExternoFactoria.getInstance().getFuncionesJavascriptActualizarPantallaTramitacion(usuario.getOrgCod(),Integer.parseInt(tramExpVO.getCodTramite()),tramExpVO.getCodProcedimiento(),true);
                tramExpVO.setFuncionesJavascriptModulosExternos(opsJavascript);

                session.removeAttribute("RelacionDomicilios");

            }      /* ------------------------- FINALIZACION DE TRAMITES ----------------------------------*/
            else if ("finalizarSinCondicion".equals(opcion)) {
                // Sin condicion de salida.
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setListaEMailsAlIniciar(new Vector());
                tramExpVO.setListaEMailsAlFinalizar(new Vector());
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
              
               
               
                boolean mensajeNoFinalizado = false; //flag para mostrar msg
                try {
                    GeneralValueObject gVO = new GeneralValueObject();
                    gVO.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                    gVO.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                    gVO.setAtributo("ejercicio",tramExpVO.getEjercicio());
                    gVO.setAtributo("numero",tramExpVO.getNumeroRelacion());
                    if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));
                    Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);

                    String ejercicioRelacion = tramExpVO.getEjercicio();
                    for (int i=0; i < expedientes.size(); i++) {
                        if (m_Log.isDebugEnabled()) m_Log.debug("EXP. : " + ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                        tramExpVO.setNumeroExpediente((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                        tramExpVO.setNumero((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                        tramExpVO.setEjercicio((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("ejeExp"));

                        grabarDatosSuplementarios(tramExpForm,tramExpVO,request,params);
                        m_Log.debug("BLOQUEO : " + request.getParameter("bloqueo"));
                        tramExpVO.setBloqueo(request.getParameter("bloqueo"));
                        TramitacionExpedientesManager.getInstance().finalizarTramite(tramExpVO,params);
						tramExpVO.setNombreUsuario(usuario.getNombreUsu());
                      
                        OperacionesExpedienteManager.getInstance().registrarFinalizarTramite(tramExpVO, null, params);

                        if (notificar(usuario, tramExpVO)) {
                            tramExpVO.setNotificacionRealizada("si");
                        } else {
                            tramExpVO.setNotificacionRealizada("no");
                        }

                        if (i == expedientes.size() - 1) {
                            tramExpVO.setEjercicio(ejercicioRelacion);
                            TramitacionExpedientesManager.getInstance().actualizarTramiteRelacion(tramExpVO, params,true);
                        }
                    }

				} catch (WSException wse) {
					ponerMensajeFalloSW(tramExpVO, wse);
					if (wse.isMandatoryExecution()) {
						mensajeNoFinalizado = true;
					}
				} catch (EjecucionSWException eswe) {
                                    ponerMensajeFalloSW(tramExpVO, eswe);
                                    if (eswe.isStopEjecucion()) mensajeNoFinalizado = true;
				}

				if (mensajeNoFinalizado) {
						tramExpVO.setRespOpcion("noFinalizado");
				} else  {
					tramExpVO.setRespOpcion("finalizado");
				} 

                tramExpForm.setTramitacionExpedientes(tramExpVO);
                session.removeAttribute("RelacionDomicilios");
                opcion = "grabarTramite";

            } else if ("finalizarExpediente".equals(opcion)) {
                // Condicion de salida: Finalizacion
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setListaEMailsAlIniciar(new Vector());
                tramExpVO.setListaEMailsAlFinalizar(new Vector());
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                tramExpVO.setNombreUsuario(usuario.getNombreUsu());
                Vector listaTramitesNoFinalizados = TramitesExpedientesManager.getInstance().getTramitesRelacionSinFinalizar(tramExpVO, params);

                if (listaTramitesNoFinalizados.size() == 0) {
                    GeneralValueObject gVO = new GeneralValueObject();
                    gVO.setAtributo("codMunicipio", tramExpVO.getCodMunicipio());
                    gVO.setAtributo("codProcedimiento", tramExpVO.getCodProcedimiento());
                    gVO.setAtributo("ejercicio", tramExpVO.getEjercicio());
                    gVO.setAtributo("numero", tramExpVO.getNumeroRelacion());
                    gVO.setAtributo("bloqueos", request.getParameter("bloqueo"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));
                    Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);

                    String ejercicioRelacion = tramExpVO.getEjercicio();
                    int res = 1;
                    for (Object objExpediente : expedientes) {
                        GeneralValueObject expediente = (GeneralValueObject) objExpediente;
                        tramExpVO.setNumeroExpediente((String) expediente.getAtributo("numExp"));
                        tramExpVO.setNumero((String) expediente.getAtributo("numExp"));
                        tramExpVO.setEjercicio((String) expediente.getAtributo("ejeExp"));

                        grabarDatosSuplementarios(tramExpForm,tramExpVO,request,params);
                        m_Log.debug("BLOQUEO : " + request.getParameter("bloqueo"));
                        tramExpVO.setBloqueo(request.getParameter("bloqueo"));
                        res = TramitacionExpedientesManager.getInstance().finalizarExpediente(tramExpVO, params);

                        if (res <= 0) break;
                        else
                            OperacionesExpedienteManager.getInstance().registrarFinalizarExpediente(tramExpVO, params);
                        
                        // ini INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                        if (m_Log.isDebugEnabled())
                            m_Log.debug("______________PROCEDIMIENTO ASOCIADO: " + tramExpVO.getProcedimientoAsociado());
                        if (tramExpVO.getProcedimientoAsociado() != null) {
                            if (!tramExpVO.getProcedimientoAsociado().equals("")) {
                                fichaRelExpForm.setNumExpediente(tramExpVO.getNumeroExpediente());
                                String expAsociado = iniciarExpedienteAsociado(tramExpVO.getProcedimientoAsociado(), usuario, fichaRelExpForm, params);
                                tramExpVO.setExpAsociadoIniciado(expAsociado);
                            }
                        }
                        // fin INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                    }
                    tramExpVO.setEjercicio(ejercicioRelacion);

                    if (res > 0) {
                        TramitacionExpedientesManager.getInstance().actualizarTramiteRelacion(tramExpVO, params, true);
                        gVO.setAtributo("codUOR", "0"); //Cq porque no se va a volver a ver
                        gVO.setAtributo("usuario", String.valueOf(usuario.getIdUsuario()));
                        FichaRelacionExpedientesManager.getInstance().deshacerRelacionExpedientes(gVO, params);
                        tramExpVO.setRespOpcion("expedienteFinalizado");
                    } else {
                        tramExpVO.setRespOpcion("expedienteNoFinalizado");
                    }
                    if (notificar(usuario, tramExpVO)) {
                        tramExpVO.setNotificacionRealizada("si");
                    } else {
                        tramExpVO.setNotificacionRealizada("no");
                    }
                } else {
                    tramExpVO.setListaTramitesPendientes(listaTramitesNoFinalizados);
                    tramExpVO.setRespOpcion("tramitesSinFinalizar");
                }
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                session.removeAttribute("RelacionDomicilios");
                opcion = "grabarTramite";

            } else if ("finalizarConTramites".equals(opcion)) {
                Vector lpendientes = new Vector();
             // Condicion de salida: tramites.
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                String tramiteQueSeFinaliza = tramExpVO.getCodTramite();
                m_Log.debug ("************************TRAMITE***********"+tramiteQueSeFinaliza);
                tramExpVO.setListaEMailsAlIniciar(new Vector());
                tramExpVO.setListaEMailsAlFinalizar(new Vector());
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                tramExpVO.setInsertarCodUnidadTramitadoraTram("si");

                // Lista de tramites a iniciar
                String listaCodTramites = request.getParameter("listaCodTramites");
                String listaModoTramites = request.getParameter("listaModoTramites");
                String listaUtrTramites = request.getParameter("listaUtrTramites");
                String listaTramitesCondEntradaNoCumplidas = request.getParameter("listaTramSigNoCumplenCondEntrada");
                m_Log.debug("listaCodTramites : "+listaCodTramites );
                m_Log.debug("listaModoTramites : "+listaModoTramites );
                m_Log.debug("listaUtrTramites : "+listaUtrTramites );
                m_Log.debug("listaTramitesCondEntradaNoCumplidas : "+ listaTramitesCondEntradaNoCumplidas);
                Vector listaTramitesIniciar = listaTramitesIniciar(listaCodTramites, listaModoTramites, listaUtrTramites,listaTramitesCondEntradaNoCumplidas,true);
                if (m_Log.isDebugEnabled()) m_Log.debug("el tamao de la lista para finalizar es : "
                    + listaTramitesIniciar.size());
                tramExpVO.setListaTramitesIniciar(listaTramitesIniciar);

                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                gVO.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                gVO.setAtributo("ejercicio",tramExpVO.getEjercicio());
                gVO.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                gVO.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                gVO.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                gVO.setAtributo("numero",tramExpVO.getNumeroRelacion());
                if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));

                //Actualizamos cada expediente con los trámites
                Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);

                String ejercicioRelacion = tramExpVO.getEjercicio();

                if (m_Log.isDebugEnabled()) m_Log.debug("EXPEDIENTES. : " + expedientes.size());
                for (int i=0; i < expedientes.size(); i++) {
                    if (m_Log.isDebugEnabled()) m_Log.debug("EXP. : " + ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumeroExpediente((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumero((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setEjercicio((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("ejeExp"));

                    Vector listaTramitesNoIniciados = new Vector();

                    grabarDatosSuplementarios(tramExpForm,tramExpVO,request,params);
                    tramExpVO.setOcurrenciaTramite(TramitacionExpedientesManager.getInstance().getOcurrenciaTramiteAbierto(params, tramExpVO));
                    boolean mensajeNoFinalizado = false; //flag para mostrar msg
                    try {
                        m_Log.debug("BLOQUEO : " + request.getParameter("bloqueo"));
                        tramExpVO.setBloqueo(request.getParameter("bloqueo"));
                    tramExpVO.setInsertarCodUnidadTramitadoraTram("si");
                    m_Log.debug("$$$$$$ insertar codigo de la unidad tramitodora: " + tramExpVO.getInsertarCodUnidadTramitadoraTram());
                        listaTramitesNoIniciados = TramitacionExpedientesManager.getInstance().finalizarConTramites(tramExpVO, params);
                        tramExpVO.setListaTramitesPendientes(listaTramitesNoIniciados);
                        
                    } catch (WSException wse) {
                        ponerMensajeFalloSW(tramExpVO, wse);
                        if (wse.isMandatoryExecution()) {
                            mensajeNoFinalizado = true;
                        }
                    } catch (TramitacionException te) {
                        tramExpVO.setMensajeSW(te.getMessage());
                        mensajeNoFinalizado = true;
                } catch (EjecucionSWException eswe) {
                    ponerMensajeFalloSW(tramExpVO, eswe);
                    if (eswe.isStopEjecucion()) mensajeNoFinalizado = true;
                    }


                    if (listaTramitesNoIniciados == null){
                        tramExpVO.setRespOpcion("noGrabado");
                    }else{
                        tramExpVO.setNombreUsuario(usuario.getNombreUsu());

                        OperacionesExpedienteManager.getInstance().registrarFinalizarTramite(tramExpVO, null, params);

                        tramExpVO.setListaTramitesPendientes(listaTramitesNoIniciados);
                        if (mensajeNoFinalizado) {
                            tramExpVO.setRespOpcion("noFinalizado");
                        } else if(listaTramitesNoIniciados.size() == 0) {
                            tramExpVO.setRespOpcion("finalizado");
                        } else {
                            tramExpVO.setRespOpcion("tramitesPendientes");
                            // Comprobamos si se ha iniciado o no algun tramite.
                            // Para ello comparamos el tamaño de la lista de tramites a iniciar,
                            // con el tamaño de la lista de tramites no iniciados.
                            m_Log.debug(" ++++++++ listaTramitesNoIniciados: "+listaTramitesNoIniciados);
                            m_Log.debug(" ++++++++ listaTramitesIniciar: "+listaTramitesIniciar);
                            lpendientes = listaTramitesNoIniciados;                                   
                            listaTramitesIniciar = iniciarMenosNoIniciados(listaTramitesNoIniciados, listaTramitesIniciar);                            
                            tramExpVO.setListaTramitesIniciar(listaTramitesIniciar);
                            tramExpVO.setResultadoFinalizar("FinalizadoNormal");
                            tramExpForm.setRespOpcion("tramitesPendientes");
                            tramExpForm.setHayTramPend(true);
                        }

                       //int resultadoGrabarDatosSuplementarios = grabarDatosSuplementarios(tramExpForm,tramExpVO,request,params);
                    }
                    tramExpForm.setTramitacionExpedientes(tramExpVO);
                    boolean notificar = notificar(usuario, tramExpVO);
                    if (notificar) {
                        tramExpVO.setNotificacionRealizada("si");
                    } else {
                        tramExpVO.setNotificacionRealizada("no");
                    }
                    if (m_Log.isDebugEnabled()) m_Log.debug("-->Expedientes.size = " + expedientes.size());
                    if (i == (expedientes.size() - 1)) {
                        tramExpVO.setEjercicio(ejercicioRelacion);
                        tramExpVO.setCodTramite(tramiteQueSeFinaliza);
                        TramitacionExpedientesManager.getInstance().actualizarTramiteRelacion(tramExpVO, params,true);
                        if (listaTramitesNoIniciados != null) {
                                TramitacionExpedientesManager.getInstance().insertarTramiteRelacion(tramExpVO, params,true);                                                                
                                if (tramExpForm.isHayTramPend()) {
                                    tramExpVO.setResultadoFinalizar("FinalizadoNormal");
                                    tramExpForm.setRespOpcion("tramitesPendientes");                                          
                                    tramExpVO.setListaTramitesPendientes(lpendientes);
                                    tramExpForm.setTramitacionExpedientes(tramExpVO);
                                    
                                }
                        }
                    }
                }
                if (m_Log.isDebugEnabled()) m_Log.debug("-->Valor de RespOpcion =" + tramExpForm.getRespOpcion());
                if (m_Log.isDebugEnabled()) m_Log.debug("-->Valor de NotificacionRealizada  =" + tramExpForm.getNotificacionRealizada());
                if (m_Log.isDebugEnabled()) m_Log.debug("-->Valor de MensajeSW  =" + tramExpForm.getMensajeSW());
                
                session.removeAttribute("RelacionDomicilios");
                opcion = "grabarTramite";
            } else if ( ("finalizarConResolucionFavorable".equals(opcion)) || ("finalizarConResolucionDesfavorable".equals(opcion))){
                // Condicion de salida: Resolucion con finalizacion
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setListaEMailsAlIniciar(new Vector());
                tramExpVO.setListaEMailsAlFinalizar(new Vector());
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                tramExpVO.setNombreUsuario(usuario.getNombreUsu());
                Vector listaTramitesNoFinalizados = TramitesExpedientesManager.getInstance().getTramitesRelacionSinFinalizar(tramExpVO, params);

                if (listaTramitesNoFinalizados.size() == 0) {
                    GeneralValueObject gVO = new GeneralValueObject();
                    gVO.setAtributo("codMunicipio", tramExpVO.getCodMunicipio());
                    gVO.setAtributo("codProcedimiento", tramExpVO.getCodProcedimiento());
                    gVO.setAtributo("ejercicio", tramExpVO.getEjercicio());
                    gVO.setAtributo("numero", tramExpVO.getNumeroRelacion());
                    gVO.setAtributo("bloqueos", request.getParameter("bloqueo"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));
                    Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);

                    String ejercicioRelacion = tramExpVO.getEjercicio();
                    int res = 1;
                    for (Object objExpediente : expedientes) {
                        GeneralValueObject expediente = (GeneralValueObject) objExpediente;
                        tramExpVO.setNumeroExpediente((String) expediente.getAtributo("numExp"));
                        tramExpVO.setNumero((String) expediente.getAtributo("numExp"));
                        tramExpVO.setEjercicio((String) expediente.getAtributo("ejeExp"));

                        grabarDatosSuplementarios(tramExpForm,tramExpVO,request,params);
                        m_Log.debug("BLOQUEO : " + request.getParameter("bloqueo"));
                        tramExpVO.setBloqueo(request.getParameter("bloqueo"));
                        res = TramitacionExpedientesManager.getInstance().finalizarExpediente(tramExpVO, params);

                        if (res <= 0) break;
                        else
                            OperacionesExpedienteManager.getInstance().registrarFinalizarExpediente(tramExpVO, params);

                        // ini INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                        if (m_Log.isDebugEnabled())
                            m_Log.debug("______________PROCEDIMIENTO ASOCIADO: " + tramExpVO.getProcedimientoAsociado());
                        if (tramExpVO.getProcedimientoAsociado() != null) {
                            if (!tramExpVO.getProcedimientoAsociado().equals("")) {
                                fichaRelExpForm.setNumExpediente(tramExpVO.getNumeroExpediente());
                                String expAsociado = iniciarExpedienteAsociado(tramExpVO.getProcedimientoAsociado(), usuario, fichaRelExpForm, params);
                                tramExpVO.setExpAsociadoIniciado(expAsociado);
                            }
                        }
                        // fin INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                    }
                    tramExpVO.setEjercicio(ejercicioRelacion);
                    if (res > 0) {
                        TramitacionExpedientesManager.getInstance().actualizarTramiteRelacion(tramExpVO, params, true);
                        gVO.setAtributo("codUOR", "0"); //Cq porque no se va a volver a ver
                        gVO.setAtributo("usuario", String.valueOf(usuario.getIdUsuario()));
                        FichaRelacionExpedientesManager.getInstance().deshacerRelacionExpedientes(gVO, params);
                        tramExpVO.setRespOpcion("expedienteFinalizado");
                    } else {
                        tramExpVO.setRespOpcion("expedienteNoFinalizado");
                    }
                    if (notificar(usuario, tramExpVO)) {
                        tramExpVO.setNotificacionRealizada("si");
                    } else {
                        tramExpVO.setNotificacionRealizada("no");
                    }
                }

                session.removeAttribute("RelacionDomicilios");
                opcion = "grabarTramite";
            }else if ( ("finalizarConResolucionFavorableConTramites".equals(opcion)) || ("finalizarConResolucionDesfavorableConTramites".equals(opcion))) {
                // Condicion de salida: Resolucion con tramites

                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setListaEMailsAlIniciar(new Vector());
                tramExpVO.setListaEMailsAlFinalizar(new Vector());
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                // Lista de tramites a iniciar
                    String listaCodTramites = request.getParameter("listaCodTramites");
                String listaModoTramites = request.getParameter("listaModoTramites");
                String listaUtrTramites = request.getParameter("listaUtrTramites");
                String listaTramSigNoCumplenCondEntrada = request.getParameter("listaTramSigNoCumplenCondEntrada");
                m_Log.debug("listaCodTramites : "+listaCodTramites );
                m_Log.debug("listaModoTramites : "+listaModoTramites );
                m_Log.debug("listaUtrTramites : "+listaUtrTramites );
                m_Log.debug("listaTramSigNoCumplenCondEntrada : "+listaTramSigNoCumplenCondEntrada );
                Vector listaTramitesIniciar = listaTramitesIniciar(listaCodTramites, listaModoTramites, listaUtrTramites,listaTramSigNoCumplenCondEntrada,false);
                if (m_Log.isDebugEnabled()) m_Log.debug("el tamao de la lista para finalizar es : "
                        + listaTramitesIniciar.size());
                tramExpVO.setListaTramitesIniciar(listaTramitesIniciar);

                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                gVO.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                gVO.setAtributo("ejercicio",tramExpVO.getEjercicio());
                gVO.setAtributo("numero",tramExpVO.getNumeroRelacion());
                if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));

                Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);
                String ejercicioRelacion = tramExpVO.getEjercicio();

                for (int i=0; i < expedientes.size(); i++) {
                    if (m_Log.isDebugEnabled()) m_Log.debug("EXP. : " + ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumeroExpediente((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumero((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setEjercicio((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("ejeExp"));

                    grabarDatosSuplementarios(tramExpForm, tramExpVO, request, params);
                    boolean resPreg = !("finalizarConPreguntaFavorableConTramites".equals(opcion));

                    Vector listaTramitesNoIniciados = new Vector();

                    boolean mensajeNoFinalizado = false; //flag para mostrar msg
                    try {
                        m_Log.debug("BLOQUEO : " + request.getParameter("bloqueo"));
                        tramExpVO.setBloqueo(request.getParameter("bloqueo"));
                        listaTramitesNoIniciados = TramitacionExpedientesManager.getInstance().finalizarConResolucionConTramites(
                                tramExpVO, params, resPreg);
                        tramExpVO.setListaTramitesPendientes(listaTramitesNoIniciados);

                        // ini INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                        if (m_Log.isDebugEnabled()) m_Log.debug("______________PROCEDIMIENTO ASOCIADO: " + tramExpVO.getProcedimientoAsociado());
                        if (tramExpVO.getProcedimientoAsociado() != null) {
                            if (!tramExpVO.getProcedimientoAsociado().equals("")) {
                                String expAsociado = iniciarExpedienteAsociado(tramExpVO.getProcedimientoAsociado(),usuario,fichaRelExpForm,params);
                                tramExpVO.setExpAsociadoIniciado(expAsociado);
                            }
                        }
                        // fin INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                    } catch (EjecucionSWException eswe) {
                        ponerMensajeFalloSW(tramExpVO, eswe);
                        if (eswe.isStopEjecucion()) mensajeNoFinalizado = true;
                    } catch (WSException wse) {
                        ponerMensajeFalloSW(tramExpVO, wse);
                        if (wse.isMandatoryExecution()) {
                            mensajeNoFinalizado = true;
                        }
                    } catch (TramitacionException te) {
                        tramExpVO.setMensajeSW(te.getMessage());
                        mensajeNoFinalizado = true;
                    }


                    if (listaTramitesNoIniciados == null){
                        tramExpVO.setRespOpcion("noGrabado");
                    }else{
                        tramExpVO.setNombreUsuario(usuario.getNombreUsu());
                        OperacionesExpedienteManager.getInstance().registrarFinalizarTramite(tramExpVO, resPreg, params);

                        tramExpVO.setListaTramitesPendientes(listaTramitesNoIniciados);
                        
                        // Registrar la operacion
                        GeneralValueObject paramsRegistroOperacion = new GeneralValueObject();
                        paramsRegistroOperacion.setAtributo("codMunicipio", tramExpVO.getCodMunicipio());
                        paramsRegistroOperacion.setAtributo("codProcedimiento", tramExpVO.getCodProcedimiento());
                        paramsRegistroOperacion.setAtributo("ejercicio", tramExpVO.getEjercicio());
                        paramsRegistroOperacion.setAtributo("numero", tramExpVO.getNumeroExpediente());
                        paramsRegistroOperacion.setAtributo("usuario", tramExpVO.getUsuario());
                        paramsRegistroOperacion.setAtributo("codOrganizacion", tramExpVO.getCodOrganizacion());
                        paramsRegistroOperacion.setAtributo("codEntidad", tramExpVO.getCodEntidad());
                        Vector tramites = FichaExpedienteManager.getInstance().cargaTramites(paramsRegistroOperacion, params);
                        registrarOperacionInicioTramite(tramExpVO, listaTramitesIniciar, listaTramitesNoIniciados,
                                tramites, paramsRegistroOperacion, usuario, params, false);
                    
                        if (mensajeNoFinalizado) {
                            tramExpVO.setRespOpcion("noFinalizado");
                        } else if(listaTramitesNoIniciados.size() == 0) {
                            tramExpVO.setRespOpcion("finalizado");
                        } else {
                            tramExpVO.setRespOpcion("tramitesPendientes");
                            // Comprobamos si se ha iniciado o no algun tramite.
                            // Para ello comparamos el tamaño de la lista de tramites a iniciar,
                            // con el tamaño de la lista de tramites no iniciados.
                            m_Log.debug(" ++++++++ listaTramitesNoIniciados: "+listaTramitesNoIniciados);
                            m_Log.debug(" ++++++++ listaTramitesIniciar: "+listaTramitesIniciar);
                            tramExpVO.setResultadoFinalizar("FinalizadoNormal");
                        }
                    }

                    tramExpForm.setTramitacionExpedientes(tramExpVO);
                    boolean notificar = notificar(usuario, tramExpVO);
                    if (notificar) {
                        tramExpVO.setNotificacionRealizada("si");
                    } else {
                        tramExpVO.setNotificacionRealizada("no");
                    }
                    if (m_Log.isDebugEnabled()) m_Log.debug("-->Expedientes.size = " + expedientes.size());
                    if (i == (expedientes.size() - 1)) {
                        tramExpVO.setEjercicio(ejercicioRelacion);
                        TramitacionExpedientesManager.getInstance().actualizarTramiteRelacion(tramExpVO, params,true);
                        if (listaTramitesNoIniciados != null)
                            if (listaTramitesNoIniciados.size()==0)
                                TramitacionExpedientesManager.getInstance().insertarTramiteRelacion(tramExpVO, params,true);
                    }
                }

                session.removeAttribute("RelacionDomicilios");
                opcion = "grabarTramite";
            } else if ( ("finalizarConPreguntaFavorable".equals(opcion)) || ("finalizarConPreguntaDesfavorable".equals(opcion))){
                // Condicion de salida: Pregunta con finalizacion
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setListaEMailsAlIniciar(new Vector());
                tramExpVO.setListaEMailsAlFinalizar(new Vector());
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                tramExpVO.setNombreUsuario(usuario.getNombreUsu());
                Vector listaTramitesNoFinalizados = TramitesExpedientesManager.getInstance().getTramitesRelacionSinFinalizar(tramExpVO, params);

                if (listaTramitesNoFinalizados.size() == 0) {
                    GeneralValueObject gVO = new GeneralValueObject();
                    gVO.setAtributo("codMunicipio", tramExpVO.getCodMunicipio());
                    gVO.setAtributo("codProcedimiento", tramExpVO.getCodProcedimiento());
                    gVO.setAtributo("ejercicio", tramExpVO.getEjercicio());
                    gVO.setAtributo("numero", tramExpVO.getNumeroRelacion());
                    gVO.setAtributo("bloqueos", request.getParameter("bloqueo"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                    if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));
                    Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);

                    String ejercicioRelacion = tramExpVO.getEjercicio();
                    int res = 1;
                    for (Object objExpediente : expedientes) {
                        GeneralValueObject expediente = (GeneralValueObject) objExpediente;
                        tramExpVO.setNumeroExpediente((String) expediente.getAtributo("numExp"));
                        tramExpVO.setNumero((String) expediente.getAtributo("numExp"));
                        tramExpVO.setEjercicio((String) expediente.getAtributo("ejeExp"));

                        grabarDatosSuplementarios(tramExpForm,tramExpVO,request,params);
                        m_Log.debug("BLOQUEO : " + request.getParameter("bloqueo"));
                        tramExpVO.setBloqueo(request.getParameter("bloqueo"));
                         res = TramitacionExpedientesManager.getInstance().finalizarExpediente(tramExpVO, params);

                        if (res <= 0) break;
                        else
                            OperacionesExpedienteManager.getInstance().registrarFinalizarExpediente(tramExpVO, params);

                        // ini INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                        if (m_Log.isDebugEnabled())
                            m_Log.debug("______________PROCEDIMIENTO ASOCIADO: " + tramExpVO.getProcedimientoAsociado());
                        if (tramExpVO.getProcedimientoAsociado() != null) {
                            if (!tramExpVO.getProcedimientoAsociado().equals("")) {
                                fichaRelExpForm.setNumExpediente(tramExpVO.getNumeroExpediente());
                                String expAsociado = iniciarExpedienteAsociado(tramExpVO.getProcedimientoAsociado(), usuario, fichaRelExpForm, params);
                                tramExpVO.setExpAsociadoIniciado(expAsociado);
                            }
                        }
                        // fin INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                    }
                    tramExpVO.setEjercicio(ejercicioRelacion);
                    if (res > 0) {
                        TramitacionExpedientesManager.getInstance().actualizarTramiteRelacion(tramExpVO, params, true);
                        gVO.setAtributo("codUOR", "0"); //Cq porque no se va a volver a ver
                        gVO.setAtributo("usuario", String.valueOf(usuario.getIdUsuario()));
                        FichaRelacionExpedientesManager.getInstance().deshacerRelacionExpedientes(gVO, params);
                        tramExpVO.setRespOpcion("expedienteFinalizado");
                    } else {
                        tramExpVO.setRespOpcion("expedienteNoFinalizado");
                    }
                    if (notificar(usuario, tramExpVO)) {
                        tramExpVO.setNotificacionRealizada("si");
                    } else {
                        tramExpVO.setNotificacionRealizada("no");
                    }
                }

                session.removeAttribute("RelacionDomicilios");
                opcion = "grabarTramite";

            }else if ( ("finalizarConPreguntaFavorableConTramites".equals(opcion)) || ("finalizarConPreguntaDesfavorableConTramites".equals(opcion))) {
                // Condicion de salida: Resolucion con tramites
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setListaEMailsAlIniciar(new Vector());
                tramExpVO.setListaEMailsAlFinalizar(new Vector());
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                // Lista de tramites a iniciar
                    String listaCodTramites = request.getParameter("listaCodTramites");
                String listaModoTramites = request.getParameter("listaModoTramites");
                String listaUtrTramites = request.getParameter("listaUtrTramites");
                String listaTramSigNoCumplenCondEntrada = request.getParameter("listaTramSigNoCumplenCondEntrada");
                m_Log.debug("listaCodTramites : "+listaCodTramites );
                m_Log.debug("listaModoTramites : "+listaModoTramites );
                m_Log.debug("listaUtrTramites : "+listaUtrTramites );
                m_Log.debug("listaTramSigNoCumplenCondEntrada : "+listaTramSigNoCumplenCondEntrada );

                Vector listaTramitesIniciar = listaTramitesIniciar(listaCodTramites, listaModoTramites, listaUtrTramites,listaTramSigNoCumplenCondEntrada,true);
                if (m_Log.isDebugEnabled()) m_Log.debug("el tamao de la lista para inicar es : "
                        + listaTramitesIniciar.size());
                tramExpVO.setListaTramitesIniciar(listaTramitesIniciar);                

                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                gVO.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                gVO.setAtributo("ejercicio",tramExpVO.getEjercicio());
                gVO.setAtributo("numero",tramExpVO.getNumeroRelacion());
                if (m_Log.isDebugEnabled()) m_Log.debug("MUNICIPIO : " + gVO.getAtributo("codMunicipio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + gVO.getAtributo("codProcedimiento"));
                if (m_Log.isDebugEnabled()) m_Log.debug("EJERICIO : " + gVO.getAtributo("ejercicio"));
                if (m_Log.isDebugEnabled()) m_Log.debug("RELACION : " + gVO.getAtributo("numero"));

                Vector expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);
                String ejercicioRelacion = tramExpVO.getEjercicio();

                for (int i=0; i < expedientes.size(); i++) {
                    if (m_Log.isDebugEnabled()) m_Log.debug("EXP. : " + ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumeroExpediente((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setNumero((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("numExp"));
                    tramExpVO.setEjercicio((String) ((GeneralValueObject)expedientes.get(i)).getAtributo("ejeExp"));

                    grabarDatosSuplementarios(tramExpForm, tramExpVO, request, params);
                    boolean resPreg = !("finalizarConPreguntaFavorableConTramites".equals(opcion));

                    Vector listaTramitesNoIniciados = new Vector();

                    boolean mensajeNoFinalizado = false; //flag para mostrar msg
                    try {
                        m_Log.debug("BLOQUEO : " + request.getParameter("bloqueo"));
                        tramExpVO.setBloqueo(request.getParameter("bloqueo"));
                        listaTramitesNoIniciados = TramitacionExpedientesManager.getInstance().finalizarConPreguntaConTramites(
                                tramExpVO, params, resPreg);
                        tramExpVO.setListaTramitesPendientes(listaTramitesNoIniciados);

                        // ini INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                        if (m_Log.isDebugEnabled()) m_Log.debug("______________PROCEDIMIENTO ASOCIADO: " + tramExpVO.getProcedimientoAsociado());
                        if (tramExpVO.getProcedimientoAsociado() != null) {
                            if (!tramExpVO.getProcedimientoAsociado().equals("")) {
                                String expAsociado = iniciarExpedienteAsociado(tramExpVO.getProcedimientoAsociado(),usuario,fichaRelExpForm,params);
                                tramExpVO.setExpAsociadoIniciado(expAsociado);
                            }
                        }
                        // fin INSERTAR EXPEDIENTE DEL PROCEDIMIENTO RELACIONADO (si lo tiene)
                    } catch (EjecucionSWException eswe) {
                        ponerMensajeFalloSW(tramExpVO, eswe);
                        if (eswe.isStopEjecucion()) mensajeNoFinalizado = true;
                    } catch (WSException wse) {
                        ponerMensajeFalloSW(tramExpVO, wse);
                        if (wse.isMandatoryExecution()) {
                            mensajeNoFinalizado = true;
                        }
                    } catch (TramitacionException te) {
                        tramExpVO.setMensajeSW(te.getMessage());
                        mensajeNoFinalizado = true;
                    }


                    if (listaTramitesNoIniciados == null){
                        tramExpVO.setRespOpcion("noGrabado");
                    }else{
                        tramExpVO.setNombreUsuario(usuario.getNombreUsu());
                        OperacionesExpedienteManager.getInstance().registrarFinalizarTramite(tramExpVO, resPreg, params);
                        tramExpVO.setListaTramitesPendientes(listaTramitesNoIniciados);
                        if (mensajeNoFinalizado) {
                            tramExpVO.setRespOpcion("noFinalizado");
                        } else if(listaTramitesNoIniciados.size() == 0) {
                            tramExpVO.setRespOpcion("finalizado");
                        } else {
                            tramExpVO.setRespOpcion("tramitesPendientes");
                            // Comprobamos si se ha iniciado o no algun tramite.
                            // Para ello comparamos el tamaño de la lista de tramites a iniciar,
                            // con el tamaño de la lista de tramites no iniciados.
                            m_Log.debug(" ++++++++ listaTramitesNoIniciados: "+listaTramitesNoIniciados);
                            m_Log.debug(" ++++++++ listaTramitesIniciar: "+listaTramitesIniciar);
                            tramExpVO.setResultadoFinalizar("FinalizadoNormal");
                        }
                    }

                    tramExpForm.setTramitacionExpedientes(tramExpVO);
                    boolean notificar = notificar(usuario, tramExpVO);
                    if (notificar) {
                        tramExpVO.setNotificacionRealizada("si");
                    } else {
                        tramExpVO.setNotificacionRealizada("no");
                    }
                    if (m_Log.isDebugEnabled()) m_Log.debug("-->Expedientes.size = " + expedientes.size());
                    if (i == (expedientes.size() - 1)) {
                        tramExpVO.setEjercicio(ejercicioRelacion);
                        TramitacionExpedientesManager.getInstance().actualizarTramiteRelacion(tramExpVO, params,true);
                        if (listaTramitesNoIniciados != null)
                            if (listaTramitesNoIniciados.size()==0)
                                TramitacionExpedientesManager.getInstance().insertarTramiteRelacion(tramExpVO, params,true);
                    }
                }

                session.removeAttribute("RelacionDomicilios");
                opcion = "grabarTramite";
            } else if("abrirDomicilios".equals(opcion) ) {
                
                // Rellenamos un hashmap con los datos de pais, provincia y municipio por defecto.
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codPais", codPais);
                gVO.setAtributo("codProvincia", codProvincia);
                gVO.setAtributo("codMunicipio", codMunicipio);
                Vector listaCP = CodPostalesManager.getInstance().getListaCodPostales(params,gVO);

                // Anhadimos los listados de Entidades Colectivas y Singulares
                Vector listaECOs = EcosManager.getInstance().getListaEcos(gVO,params);
                Vector listaESIs = EntidadesSingularesManager.getInstance().getListaEntidadesSingulares(gVO,params);

                // Anhadimos las listas de provincias y municipios disponibles
                Vector listaProvincias = ProvinciasManager.getInstance().getListaProvincias(gVO, params);
                Vector listaMunicipios = MunicipiosManager.getInstance().getListaMunicipios(gVO, params);

                String ejercicio = request.getParameter("eje");
                String numeroExpediente = request.getParameter("num");
                String codLocalizacion = request.getParameter("codProc");
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setEjercicio(ejercicio);
                tramExpVO.setCodMunicipio(codMunicipio);
                tramExpVO.setNumeroExpediente(numeroExpediente);
                tramExpVO.setCodLocalizacion(codLocalizacion);

                BusquedaTercerosForm bTercerosForm = new BusquedaTercerosForm();
                bTercerosForm.setListaCodPostales(listaCP);
                bTercerosForm.setListaECOs(listaECOs);
                bTercerosForm.setListaESIs(listaESIs);
                bTercerosForm.setListaProvincias(listaProvincias);
                bTercerosForm.setListaMunicipios(listaMunicipios);

                session.removeAttribute("RelacionDomicilios");
                session.setAttribute("BusquedaTercerosForm", bTercerosForm);
                tramExpForm.setTramitacionExpedientes(tramExpVO);

                session.removeAttribute("RelacionDomicilios");
                session.setAttribute("BusquedaTercerosForm", bTercerosForm);
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                if (m_Log.isDebugEnabled()) m_Log.debug("TramitacionExpedientesAction: localización |" + codLocalizacion + "|");

                if(codLocalizacion != null && !"".equals(codLocalizacion) && !"null".equals(codLocalizacion)) {

                    TercerosManager terMan = TercerosManager.getInstance();
                    GeneralValueObject domicilioVO = new GeneralValueObject();
                    domicilioVO.setAtributo("codDomicilio",codLocalizacion);
                    Vector domicilios=terMan.getDomiciliosById(params,domicilioVO);
                    session.setAttribute("RelacionDomicilios",domicilios);
                    bTercerosForm.setListaDomicilios(domicilios);
                    tramExpVO.setIdDomicilio("0");
                    session.setAttribute("modoInicio","recargarDomicilioInicio");
                    tramExpForm.setTramitacionExpedientes(tramExpVO);
                }

                opcion = "abrirDomicilios";
            } else if("abrirDomiciliosConsulta".equals(opcion) ) {
                /* IGUAL A abrirDomicilios pero con menos trabajo... */
                Vector listaCP = new Vector();
                BusquedaTercerosForm bTercerosForm = new BusquedaTercerosForm();
                GeneralValueObject gVO = new GeneralValueObject();
                TercerosValueObject terVO = new TercerosValueObject();
                /* anadir ECO/ESI */
                Vector listaECOs = new Vector();
                Vector listaESIs = new Vector();
                //Vector listaVias = new Vector();
                /* Fin anadir ECO/ESI */
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                gVO.setAtributo("codPais",codPais);
                gVO.setAtributo("codProvincia",codProvincia);
                gVO.setAtributo("codMunicipio",codMunicipio);
                tramExpVO.setCodMunicipio(codMunicipio);
                listaCP = CodPostalesManager.getInstance().getListaCodPostales(params,gVO);
                bTercerosForm.setListaCodPostales(listaCP);
                /* anadir ECO/ESI */
                listaECOs = EcosManager.getInstance().getListaEcos(gVO,params);
                listaESIs = EntidadesSingularesManager.getInstance().getListaEntidadesSingulares(gVO,params);
                bTercerosForm.setListaECOs(listaECOs);
                bTercerosForm.setListaESIs(listaESIs);
                /* fin anadir ECO/ESI */
                session.setAttribute("BusquedaTercerosForm",bTercerosForm);
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                session.setAttribute("modoInicio","consultaLocalizacion");
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "abrirDomicilios";

            }else if("abrirDomic".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                Vector tiposVias = new Vector();
                Vector listaCP = new Vector();
                BusquedaTercerosForm bTercerosForm = new BusquedaTercerosForm();
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codPais",codPais);
                gVO.setAtributo("codProvincia",codProvincia);
                gVO.setAtributo("codMunicipio",codMunicipio);
                TercerosValueObject terVO = new TercerosValueObject();
                CodPostalesManager codPostalesManager = CodPostalesManager.getInstance();
                listaCP = codPostalesManager.getListaCodPostales(params,gVO);
                bTercerosForm.setListaCodPostales(listaCP);
                /* anadir ECO/ESI */
                Vector listaECOs = new Vector();
                Vector listaESIs = new Vector();
                Vector listaVias = new Vector();
                listaECOs = EcosManager.getInstance().getListaEcos(gVO,params);
                listaESIs = EntidadesSingularesManager.getInstance().getListaEntidadesSingulares(gVO,params);
                listaVias = ViasManager.getInstance().getListaViasSolas(params,gVO);
                bTercerosForm.setListaECOs(listaECOs);
                bTercerosForm.setListaESIs(listaESIs);
                bTercerosForm.setListaVias(listaVias);
                /* fin anadir ECO/ESI */
                session.removeAttribute("RelacionDomicilios");
                if ( tramExpVO.getCodLocalizacion()!=null){
                    if (!"".equals( tramExpVO.getCodLocalizacion())){
                        if (m_Log.isDebugEnabled()) m_Log.debug("TramitacionExpedientesAction: tenía localización |" +  tramExpVO.getCodLocalizacion()+ "|");
                        TercerosManager terMan = TercerosManager.getInstance();
                        GeneralValueObject domicilioVO = new GeneralValueObject();
                        domicilioVO.setAtributo("codDomicilio",tramExpVO.getCodLocalizacion());
                        Vector domicilios = new Vector();
                        domicilios=terMan.getDomiciliosById(params,domicilioVO);
                        session.setAttribute("RelacionDomicilios",domicilios);
                        bTercerosForm.setListaDomicilios(domicilios);
                        tramExpVO.setIdDomicilio("0");
                        session.setAttribute("modoInicio","recargarDomicilioInicio");
                    }
                }
                session.setAttribute("BusquedaTercerosForm",bTercerosForm);
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "abrirDomicilios";
            } else if("buscarDomicilio".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                GeneralValueObject domicilioVO = new GeneralValueObject();
                TercerosManager terMan = TercerosManager.getInstance();
                BusquedaTercerosForm bTercerosForm = new BusquedaTercerosForm();
                domicilioVO.setAtributo("codPais",request.getParameter("codPais"));
                domicilioVO.setAtributo("codProvincia",request.getParameter("codProvincia"));
                domicilioVO.setAtributo("codMunicipio",request.getParameter("codMunicipio"));
                /* anadir ECO/ESI */
                Vector listaECOs = new Vector();
                Vector listaESIs = new Vector();
                Vector listaVias = new Vector();
                listaECOs = EcosManager.getInstance().getListaEcos(domicilioVO,params);
                listaESIs = EntidadesSingularesManager.getInstance().getListaEntidadesSingulares(domicilioVO,params);
                listaVias = ViasManager.getInstance().getListaViasSolas(params,domicilioVO);
                bTercerosForm.setListaECOs(listaECOs);
                bTercerosForm.setListaESIs(listaESIs);
                bTercerosForm.setListaVias(listaVias);
                /* fin anadir ECO/ESI */
                domicilioVO.setAtributo("codVia",request.getParameter("txtCodVia"));
                String descVia = request.getParameter("txtNombreVia");
                String codTipoVia = request.getParameter("codTVia");
                String descTipoVia = request.getParameter("descTVia");
                String numDesde = request.getParameter("txtNumDesde");
                String letraDesde = request.getParameter("txtLetraDesde");
                String numHasta = request.getParameter("txtNumHasta");
                String letraHasta = request.getParameter("txtLetraHasta");
                String bloque = request.getParameter("txtBloque");
                String portal = request.getParameter("txtPortal");
                String escalera = request.getParameter("txtEsc");
                String planta = request.getParameter("txtPlta");
                String puerta = request.getParameter("txtPta");
                String km = request.getParameter("txtKm");
                String hm = request.getParameter("txtHm");
                String domicilio = request.getParameter("txtDomicilio");
                String poblacion = request.getParameter("txtPoblacion");
                String codPostal = request.getParameter("descPostal");
                String codECO = request.getParameter("codECO");
                String codESI = request.getParameter("codESI");
                domicilioVO.setAtributo("descVia",descVia);
                domicilioVO.setAtributo("codTipoVia",codTipoVia);
                domicilioVO.setAtributo("descTipoVia",descTipoVia);
                domicilioVO.setAtributo("numDesde",numDesde);
                domicilioVO.setAtributo("letraDesde",letraDesde);
                domicilioVO.setAtributo("numHasta",numHasta);
                domicilioVO.setAtributo("letraHasta",letraHasta);
                domicilioVO.setAtributo("bloque",bloque);
                domicilioVO.setAtributo("portal",portal);
                domicilioVO.setAtributo("escalera",escalera);
                domicilioVO.setAtributo("planta",planta);
                domicilioVO.setAtributo("puerta",puerta);
                domicilioVO.setAtributo("km",km);
                domicilioVO.setAtributo("hm",hm);
                domicilioVO.setAtributo("domicilio",domicilio);
                domicilioVO.setAtributo("poblacion",poblacion);
                domicilioVO.setAtributo("codECO", codECO);
                domicilioVO.setAtributo("codESI", codESI);
                domicilioVO.setAtributo("codPostal",codPostal);
                if (m_Log.isDebugEnabled()) m_Log.debug("TramitacionExpedientesAction. BuscarDomicilio: poblacion " + poblacion);
                Vector domicilios = new Vector();
                // Campo busqueda obligatorio para normalizados: Cod vía y nombre.
                boolean buscarNormalizado = false;
                if ( (domicilioVO.getAtributo("codVia")!= null) && (domicilioVO.getAtributo("descVia")!=null)){
                    if ( (!"".equals(domicilioVO.getAtributo("codVia"))) && (!"".equals(domicilioVO.getAtributo("descVia"))) ) {
                        buscarNormalizado = true;
                    }
                }
                if ( (domicilioVO.getAtributo("codECO")!= null)){
                    if (!"".equals(domicilioVO.getAtributo("codECO"))){
                        buscarNormalizado = true;
                    }
                }
                if ( (domicilioVO.getAtributo("codESI")!= null)){
                    if (!"".equals(domicilioVO.getAtributo("codESI"))){
                        buscarNormalizado = true;
                    }
                }

                if ( buscarNormalizado){
                    if (m_Log.isDebugEnabled()) m_Log.debug("TramitacionExpedientesAction. BuscarDomicilio: buscar normalizados ");
                    domicilios=terMan.getListaDomicilios(params,domicilioVO);
                }

                // Campo busqueda obligatorio para no normalizados.
                Vector domiciliosNoNormalizados = new Vector();
                domicilioVO.setAtributo("codVia",request.getParameter("txtCodViaOculto"));
                m_Log.debug("TramitacionExpedientesAction: txtCodViaOculto " + domicilioVO.getAtributo("codVia"));
                domiciliosNoNormalizados = terMan.getListaDomiciliosNoNormalizados(params,domicilioVO);
                for(int i=0;i<domiciliosNoNormalizados.size();i++) {
                    domicilios.addElement(domiciliosNoNormalizados.elementAt(i));
                }
                session.setAttribute("RelacionDomicilios",domicilios);
                bTercerosForm.setListaDomicilios(domicilios);
                session.setAttribute("BusquedaTercerosForm",bTercerosForm);
                if (m_Log.isDebugEnabled()) m_Log.debug("el codigo del tramite en buscarDomicilios es : " + tramExpVO.getCodTramite());
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "consultarListado";
            } else if("cargarVias".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                GeneralValueObject gVO = new GeneralValueObject();
                TercerosManager terMan = TercerosManager.getInstance();
                BusquedaTercerosForm bTercerosForm = new BusquedaTercerosForm();
                String codPais = request.getParameter("nCS");
                String codMunicipio = request.getParameter("codMun");
                String codProvincia = request.getParameter("codProc");
                gVO.setAtributo("codPais",codPais);
                gVO.setAtributo("codProvincia",codProvincia);
                gVO.setAtributo("codMunicipio",codMunicipio);
                Vector vias = new Vector();
                vias = terMan.getListaVias(params,gVO);
                bTercerosForm.setListaVias(vias);
                session.removeAttribute("RelacionDomicilios");
                session.setAttribute("BusquedaTercerosForm",bTercerosForm);
                if (m_Log.isDebugEnabled()) m_Log.debug("el codigo del tramite en cargarVias es : " + tramExpVO.getCodTramite());
                tramExpForm.setTramitacionExpedientes(tramExpVO);
            } else if ( "cargar_pagina".equals(opcion) ) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                if (m_Log.isDebugEnabled()) m_Log.debug("el codigo del tramite en cargar_pagina es : " + tramExpVO.getCodTramite());
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "cargar_pagina";
            } else if("recargaDomicilio".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                String idDomicilio = request.getParameter("idDomicilio");
                tramExpVO.setIdDomicilio(idDomicilio);
                session.setAttribute("modoInicio","recargarDomicilio");
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "abrirDomicilios";
            } else if("grabarDomicilioNoNormalizado".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                GeneralValueObject gVO = new GeneralValueObject();
                TercerosManager terMan = TercerosManager.getInstance();
                gVO.setAtributo("codPais",request.getParameter("codPais"));
                gVO.setAtributo("codProvincia",request.getParameter("codProvincia"));
                gVO.setAtributo("codMunicipio",request.getParameter("codMunicipio"));
                gVO.setAtributo("codUsuario",Integer.toString(usuario.getIdUsuario()));
                String codVia = request.getParameter("txtCodViaOculto");
                String descVia = request.getParameter("txtNombreVia");
                String codTipoVia = request.getParameter("codTVia");
                String descTipoVia = request.getParameter("descTVia");
                String numDesde = request.getParameter("txtNumDesde");
                String letraDesde = request.getParameter("txtLetraDesde");
                String numHasta = request.getParameter("txtNumHasta");
                String letraHasta = request.getParameter("txtLetraHasta");
                String bloque = request.getParameter("txtBloque");
                String portal = request.getParameter("txtPortal");
                String escalera = request.getParameter("txtEsc");
                String planta = request.getParameter("txtPlta");
                String puerta = request.getParameter("txtPta");
                String km = request.getParameter("txtKm");
                String hm = request.getParameter("txtHm");
                String domicilio = request.getParameter("txtDomicilio");
                String poblacion = request.getParameter("txtPoblacion");
                String codPostal = request.getParameter("descPostal");
                gVO.setAtributo("codVia",codVia);
                gVO.setAtributo("descVia",descVia);
                gVO.setAtributo("codTipoVia",codTipoVia);
                gVO.setAtributo("descTipoVia",descTipoVia);
                gVO.setAtributo("numDesde",numDesde);
                gVO.setAtributo("letraDesde",letraDesde);
                gVO.setAtributo("numHasta",numHasta);
                gVO.setAtributo("letraHasta",letraHasta);
                gVO.setAtributo("bloque",bloque);
                gVO.setAtributo("portal",portal);
                gVO.setAtributo("escalera",escalera);
                gVO.setAtributo("planta",planta);
                gVO.setAtributo("puerta",puerta);
                gVO.setAtributo("km",km);
                gVO.setAtributo("hm",hm);
                gVO.setAtributo("domicilio",domicilio);
                gVO.setAtributo("poblacion",poblacion);
                gVO.setAtributo("codPostal",codPostal);
                /* anadir ECO/ESI */
                String codECO = request.getParameter("codECO");
                String codESI = request.getParameter("codESI");
                gVO.setAtributo("codECO", codECO);
                gVO.setAtributo("codESI", codESI);
                /* fin anadir ECO/ESI */
                int codLocalizacion = 0;
                codLocalizacion = terMan.grabarDomiciliosNoNormalizados(gVO,params);
                if (m_Log.isDebugEnabled()) m_Log.debug("el codigo de la localizacion es : " + codLocalizacion);
                String codLoc = "";
                codLoc = Integer.toString(codLocalizacion);
                if (m_Log.isDebugEnabled()) m_Log.debug("el codigo de la localizacion es : " + codLoc);
                tramExpVO.setCodLocalizacion(codLoc);
                tramExpVO.setListaDocumentos(new Vector());
                if(codLocalizacion == 0) {
                    tramExpVO.setRespOpcion("domicilioNoGrabado");
                } else if(codLocalizacion > 0) {
                    tramExpVO.setRespOpcion("domicilioGrabado");
                }
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";

            }  else if (opcion.equals("iniciarTramitesManual")){

                String numeroRelacion = request.getParameter("numeroRelacion");
                String numeroExpediente = request.getParameter("numExpediente");
                String procedimiento = request.getParameter("procedimiento");
                String codMunicipio = request.getParameter("codMunicipio");
                String codProcedimiento = request.getParameter("codProcedimiento");
                String ejercicio = request.getParameter("ejercicio");
                String numero = request.getParameter("numero");
                String codTramite = request.getParameter("codTramite");
                String listaCodTramites = request.getParameter("listaCodTramites");
                String codUORTramiteManual = request.getParameter("codUORTramiteManual");
                
                //Si es inicio manual solo se puede iniciar uno, por lo que listaTramitesIniciar
                //tendrá longitud 1.
                if (m_Log.isDebugEnabled()) m_Log.debug("NUMERO RELACION : " + numeroRelacion);
                if (m_Log.isDebugEnabled()) m_Log.debug("NUMERO EXPEDIENTE : " + numeroExpediente);
                if (m_Log.isDebugEnabled()) m_Log.debug("PROCEDIMIENTO : " + procedimiento);
                if (m_Log.isDebugEnabled()) m_Log.debug("COD MUNICIPIO : " + codMunicipio);
                if (m_Log.isDebugEnabled()) m_Log.debug("COD PROCEDIMIENTO : " + codProcedimiento);
                if (m_Log.isDebugEnabled()) m_Log.debug("EJERCICIO : " + ejercicio);
                if (m_Log.isDebugEnabled()) m_Log.debug("NUMERO : " + numero);
                if (m_Log.isDebugEnabled()) m_Log.debug("COD TRAMITE : " + codTramite);
                if (m_Log.isDebugEnabled()) m_Log.debug("LISAT COD TRAMITES : " + listaCodTramites);
                
                String codUnidadTramitadoraUsu = request.getParameter("codUnidadTramitadoraUsu");
                if (m_Log.isDebugEnabled()) m_Log.debug("UOR DE INICIO MANUAL : " + codUORTramiteManual);
                Vector listaTramitesIniciar = listaTramitesSeleccionados
                        (listaCodTramites,codUORTramiteManual,codUnidadTramitadoraUsu);
                if (m_Log.isDebugEnabled()) m_Log.debug("UOR DE INICIO SELECCIONADA USUARIO: " + codUnidadTramitadoraUsu);
                if (m_Log.isDebugEnabled()) m_Log.debug("LISTA TRAMITES INICIAR : " + listaTramitesIniciar);
                if (m_Log.isDebugEnabled()) m_Log.debug("el tamaño de la lista para finalizar es : "
                        + listaTramitesIniciar.size());

                Vector expedientes = fichaRelExpForm.getExpedientes();
                tramExpVO.setVectorCodInteresados(tramExpForm.getVectorCodInteresados());
                tramExpVO.setListaEMailsAlIniciar(new Vector());
                tramExpVO.setListaEMailsAlFinalizar(new Vector());
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                tramExpVO.setNumero((String)((GeneralValueObject) expedientes.get(0)).getAtributo("numExp"));
                tramExpVO.setNumeroRelacion(numeroRelacion);
                tramExpVO.setNumeroExpediente(numeroExpediente);
                tramExpVO.setProcedimiento(procedimiento);
                tramExpVO.setCodMunicipio(codMunicipio);
                tramExpVO.setCodProcedimiento(codProcedimiento);
                tramExpVO.setEjercicio(ejercicio);
                tramExpVO.setCodTramite(codTramite);
                tramExpVO.setCodUsuario(Integer.toString(usuario.getIdUsuario()));
                tramExpVO.setCodOrganizacion(Integer.toString(usuario.getOrgCod()));
                tramExpVO.setCodEntidad(Integer.toString(usuario.getEntCod()));
                tramExpVO.setListaTramitesIniciar(convertListaTramitesIniciarManualmente(listaTramitesIniciar));                
                tramExpVO.setCodUnidadTramitadoraUsu(codUnidadTramitadoraUsu);
                tramExpVO.setCodUnidadTramitadoraManual(codUORTramiteManual);

                Vector listaTramitesNoIniciados = new Vector();
                
                m_Log.debug("Expedientes  -->  "+expedientes.size());
                boolean bienFinalizado = true; //flag para mostrar msg

                Vector expedientesFinalizados = new Vector();
                for (int i=0; i<expedientes.size();i++) {
                    GeneralValueObject temp = (GeneralValueObject) expedientes.get(i);
                    m_Log.debug("Expediente  -->  "+temp.getAtributo("numExp"));
                    tramExpVO.setNumeroExpediente((String)temp.getAtributo("numExp"));
                    /*Hay que tener en cuenta qu el ejercicio de las relaciones no siempre
                     es el mismo que el ejercicio del expediente. Por ello, para cada expediente se actualiza
                     el ejercicio, dejando el que se recoge de la request solo para la relación.*/
                    tramExpVO.setEjercicio(tramExpVO.getNumeroExpediente().substring(0, 4));

                    if (bienFinalizado) {
                        
                        Vector DS = TramitacionExpedientesManager.getInstance().cargarDatosSuplementariosExpediente(tramExpVO,params);	
              	
                        tramExpVO.setEstructuraDatosSuplExpediente((Vector) DS.elementAt(0));	
                        tramExpVO.setValoresDatosSuplExpediente((Vector) DS.elementAt(1));	
                        tramExpVO.setEstructuraDatosSuplTramites((Vector) DS.elementAt(2));	
                        tramExpVO.setValoresDatosSuplTramites((Vector) DS.elementAt(3));
                        tramExpVO.setEstructuraDatosSuplementarios((Vector) DS.elementAt(4));	
                        tramExpVO.setValoresDatosSuplementarios((Vector) DS.elementAt(5));
                        listaTramitesNoIniciados = TramitacionExpedientesManager.getInstance().iniciarTramitesManual(tramExpVO, params);
                        tramExpVO.setListaTramitesPendientes(listaTramitesNoIniciados);
                    }
                    if(listaTramitesNoIniciados.size() == 0) {
                        tramExpVO.setRespOpcion("iniciado");
                        Vector tramites= new Vector();
                        GeneralValueObject gVO = new GeneralValueObject();
                        gVO.setAtributo("codMunicipio",codMunicipio);
                        gVO.setAtributo("codProcedimiento",codProcedimiento);
                        gVO.setAtributo("ejercicio",ejercicio);
                        gVO.setAtributo("numero",temp.getAtributo("numExp"));
                        gVO.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                        gVO.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                        gVO.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                        tramites = FichaExpedienteManager.getInstance().cargaTramites(gVO, params);
                        tramExpVO.setListaTramitesExpediente(tramites);
                        expedientesFinalizados.add(expedientes.get(i));
                        
                        // Registrar la operacion
                        registrarOperacionInicioTramite(tramExpVO,
                                listaTramitesIniciar, listaTramitesNoIniciados,
                                tramites, gVO, usuario, params, true);
                    }
                    else {
                        tramExpVO.setRespOpcion("tramitesPendientes");
                        bienFinalizado = false;
                    }

                    if (m_Log.isDebugEnabled()) m_Log.debug("LISTA TRAMITE NO INICIADOS. : " + listaTramitesNoIniciados.size());
                    if (m_Log.isDebugEnabled()) m_Log.debug("BIEN FINALIZADO. : " + bienFinalizado);
                    //Ahora vamos a actualizar la relación con los mismos trámites
                    //Sólo lo hago una vez, y con el ultimo expediente(son todos iguales)
                    if (bienFinalizado && (i == (expedientes.size() - 1))) {
                        tramExpVO.setEjercicio(request.getParameter("ejercicio"));
                        TramitacionExpedientesManager.getInstance().insertarTramiteRelacion(tramExpVO, params,true);
                    }

                    if (bienFinalizado) {
                        boolean notificar = notificar(usuario, tramExpVO);
                        if (notificar) {
                            tramExpVO.setNotificacionRealizada("si");
                        } else {
                            tramExpVO.setNotificacionRealizada("no");
                        }
                    }
                    Vector listaTramitesRelacion = new Vector();
                    GeneralValueObject gVO = new GeneralValueObject();
                    gVO.setAtributo("codMunicipio",request.getParameter("codMunicipio"));
                    gVO.setAtributo("codProcedimiento",request.getParameter("codProcedimiento"));
                    gVO.setAtributo("ejercicio",request.getParameter("ejercicio"));
                    gVO.setAtributo("numero",numeroRelacion);
                    gVO.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                    gVO.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                    gVO.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                    listaTramitesRelacion = FichaRelacionExpedientesManager.getInstance().cargaTramites(gVO, params);
                    tramExpVO.setListaTramitesExpediente(listaTramitesRelacion);
                    tramExpVO.setListaDocumentos(new Vector());
                    tramExpForm.setTramitacionExpedientes(tramExpVO);
                    if (listaTramitesNoIniciados.size()!=0) break;
                }

                if (m_Log.isDebugEnabled()) m_Log.debug("EXPEDIENTES FINALIZADOS. : " + expedientesFinalizados.size());
                //Retroceder los expedientes finalizados antes de q un expediente no se pudiese finalizar

                if (!bienFinalizado) {
                    for (int i=0; i < expedientesFinalizados.size(); i++) {
                        try {
                        GeneralValueObject temp = (GeneralValueObject) expedientesFinalizados.get(i);
                        m_Log.debug("Expediente Finalizado -->  "+temp.getAtributo("numExp"));
                        GeneralValueObject gVO = new GeneralValueObject();
                        gVO.setAtributo("codMunicipio",codMunicipio);
                        gVO.setAtributo("codProcedimiento",codProcedimiento);
                        gVO.setAtributo("ejercicio",ejercicio);
                        gVO.setAtributo("numero",numero);
                        gVO.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
                        gVO.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
                        gVO.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
                        gVO.setAtributo("numero",temp.getAtributo("numExp"));

                        Vector tramites= new Vector();
                        tramites = FichaExpedienteManager.getInstance().cargaTramites(gVO, params);
                        String tramiteRetroceder = "";
                        String codTramiteRetroceder = "";
                        String ocurrenciaTramiteRetroceder = "";
                        if (tramites.size()>0) {
                            GeneralValueObject tramiteVO = (GeneralValueObject) tramites.get(0);
                            tramiteRetroceder = (String)tramiteVO.getAtributo("codTramite");
                            codTramiteRetroceder = (String)tramiteVO.getAtributo("codTramite");
                            ocurrenciaTramiteRetroceder = (String)tramiteVO.getAtributo("ocurrenciaTramite");
                        }
                        gVO.setAtributo("tramiteRetroceder",tramiteRetroceder);
                        gVO.setAtributo("codTramiteRetroceder",codTramiteRetroceder);
                        gVO.setAtributo("ocurrenciaTramiteRetroceder",ocurrenciaTramiteRetroceder);
                        FichaExpedienteManager.getInstance().retrocederExpediente(gVO,params);
                        gVO.setAtributo("nomUsuario", usuario.getNombreUsu());
                        OperacionesExpedienteManager.getInstance().registrarRetrocederTramite(gVO, params);
                        m_Log.debug("Expediente Finalizado codTramiteRetroceder  : "+codTramiteRetroceder);

                        String tramiteRetroceder2 = "";
                        String codTramiteRetroceder2 = "";
                        String ocurrenciaTramiteRetroceder2 = "";
                        if (tramites.size()>1 && (i!=(expedientesFinalizados.size()-1))) {
                            GeneralValueObject tramiteVO = (GeneralValueObject) tramites.get(1);
                            tramiteRetroceder2 = (String)tramiteVO.getAtributo("tramite");
                            codTramiteRetroceder2 = (String)tramiteVO.getAtributo("codTramite");
                            ocurrenciaTramiteRetroceder2 = (String)tramiteVO.getAtributo("ocurrenciaTramite");
                        }
                        if(codTramiteRetroceder2 != null && !"".equals(codTramiteRetroceder2)) {
                            gVO.setAtributo("tramiteRetroceder",tramiteRetroceder2);
                            gVO.setAtributo("codTramiteRetroceder",codTramiteRetroceder2);
                            gVO.setAtributo("ocurrenciaTramiteRetroceder",ocurrenciaTramiteRetroceder2);
                            FichaExpedienteManager.getInstance().retrocederExpediente(gVO,params);
                            OperacionesExpedienteManager.getInstance().registrarRetrocederTramite(gVO, params);
                            m_Log.info("Expediente Finalizado codTramiteRetroceder  : "+codTramiteRetroceder2);
                        }
                        } catch (EjecucionSWException e) {
                            e.printStackTrace();
                        }

                    }
                }
                if (m_Log.isDebugEnabled()) m_Log.debug("RESP OPCION. : " + tramExpForm.getRespOpcion());
                opcion = "grabarTramite";

            } else if("grabarLocalizacion".equals(opcion)) {

                tramExpVO = tramExpForm.getTramitacionExpedientes();
                GeneralValueObject gVO = new GeneralValueObject();
                String ejercicio = request.getParameter("ejercicio");
                String numeroExpediente = request.getParameter("numeroExpediente");
                String codLocalizacionVieja = request.getParameter("codLocalizacion");
                String localizacion = request.getParameter("descLocalizacionNueva");
                String referencia = request.getParameter("txtRefCatastral");
                gVO.setAtributo("codMunicipio",codMunicipio);
                gVO.setAtributo("ejercicio",ejercicio);
                gVO.setAtributo("numeroExpediente",numeroExpediente);
                gVO.setAtributo("codLocalizacion",codLocalizacionVieja);
                gVO.setAtributo("localizacion",localizacion);
                gVO.setAtributo("referencia",referencia);
                gVO.setAtributo("codPais",request.getParameter("codPais"));
                gVO.setAtributo("codProvincia",request.getParameter("codProvincia"));
                gVO.setAtributo("codMunicipio",request.getParameter("codMunicipio"));
                gVO.setAtributo("codUsuario",Integer.toString(usuario.getIdUsuario()));

                int resultado = 0;
                TercerosManager terMan = TercerosManager.getInstance();
                if (m_Log.isDebugEnabled()) m_Log.debug("TramitacionExpedientesAction. Grabar localizacion: codLocalizacion /" + codLocalizacionVieja +"/");

                if (!"".equals(codLocalizacionVieja)) {
                    m_Log.debug("TramitacionExpedientesAction. Borrar localizacion");
                    //Borrar
                    resultado = TramitacionExpedientesManager.getInstance().eliminarLocalizacion(gVO,params);
                    if(resultado == 0) {
                        tramExpVO.setRespOpcion("localizacionNoEliminado");
                    } else if(resultado > 0) {

                        // Borrar domicilio
                        boolean eliminado = false;
                        eliminado = terMan.eliminarDomiciliosNoNormalizado(gVO, params);
                    }
                } else m_Log.debug("TramitacionExpedientesAction. No Borrar localizacion");


                // Grabar localizacion como domicilio no normalizado
                String codVia = request.getParameter("txtCodViaOculto");
                String descVia = request.getParameter("txtNombreVia");
                String codTipoVia = request.getParameter("codTVia");
                String descTipoVia = request.getParameter("descTVia");
                String numDesde = request.getParameter("txtNumDesde");
                String letraDesde = request.getParameter("txtLetraDesde");
                String numHasta = request.getParameter("txtNumHasta");
                String letraHasta = request.getParameter("txtLetraHasta");
                String bloque = request.getParameter("txtBloque");
                String portal = request.getParameter("txtPortal");
                String escalera = request.getParameter("txtEsc");
                String planta = request.getParameter("txtPlta");
                String puerta = request.getParameter("txtPta");
                String km = request.getParameter("txtKm");
                String hm = request.getParameter("txtHm");
                String domicilio = request.getParameter("txtDomicilio");
                String refCatastral = request.getParameter("txtRefCatastral");
                String codPostal = request.getParameter("descPostal");
                gVO.setAtributo("codVia",codVia);
                gVO.setAtributo("descVia",descVia);
                gVO.setAtributo("codTipoVia",codTipoVia);
                gVO.setAtributo("descTipoVia",descTipoVia);
                gVO.setAtributo("numDesde",numDesde);
                gVO.setAtributo("letraDesde",letraDesde);
                gVO.setAtributo("numHasta",numHasta);
                gVO.setAtributo("letraHasta",letraHasta);
                gVO.setAtributo("bloque",bloque);
                gVO.setAtributo("portal",portal);
                gVO.setAtributo("escalera",escalera);
                gVO.setAtributo("planta",planta);
                gVO.setAtributo("puerta",puerta);
                gVO.setAtributo("km",km);
                gVO.setAtributo("hm",hm);
                gVO.setAtributo("domicilio",domicilio);
                gVO.setAtributo("refCatastral",refCatastral);
                gVO.setAtributo("codPostal",codPostal);
                /* anadir ECO/ESI */
                String codECO = request.getParameter("codECO");
                String codESI = request.getParameter("codESI");
                gVO.setAtributo("codECO", codECO);
                gVO.setAtributo("codESI", codESI);
                /* fin anadir ECO/ESI */
		        if (m_Log.isDebugEnabled()) m_Log.debug("TramitacionExpedientesAction. codECO: " + codECO + " , codESI: " + codESI + " , codVia: "  + codVia);
                boolean grabarLoc = true;
                if ((descVia == null && domicilio == null) || ("".equals(descVia) && "".equals(domicilio))){
                    grabarLoc = false;
                    m_Log.warn("No se esta grabando la localizacion. Es necesario especificar via o domicilio");
                }
                if (grabarLoc) {
                    int codLocalizacion = 0;
                    codLocalizacion = terMan.grabarDomiciliosNoNormalizados(gVO,params);

			    if (m_Log.isDebugEnabled()) m_Log.debug("El codigo de la localizacion es : " + codLocalizacion);
                    String codLoc = "";
                    codLoc = Integer.toString(codLocalizacion);
			    if (m_Log.isDebugEnabled()) m_Log.debug("El codigo de la localizacion es : " + codLoc);
                    tramExpVO.setCodLocalizacion(codLoc);

                // Grabar la nueva localizacion.
                gVO.setAtributo("codLocalizacion",codLoc);
                resultado = 0;
                resultado = TramitacionExpedientesManager.getInstance().grabarLocalizacion(gVO,params);
                if(resultado == 0) {
                    tramExpVO.setRespOpcion("localizacionNoGrabado");
                } else if(resultado > 0) {
                    tramExpVO.setRespOpcion("localizacionGrabado");
                }
                }  else {
                    m_Log.warn("No se esta grabando la localizacion.");
                    tramExpVO.setCodLocalizacion("");
                    tramExpVO.setRespOpcion("localizacionNoGrabado");
                }

                tramExpVO.setListaDocumentos(new Vector());
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";

            } else if("eliminarLocalizacion".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                GeneralValueObject gVO = new GeneralValueObject();
                String codMunicipio = request.getParameter("codMunicipio");
                String ejercicio = request.getParameter("ejercicio");
                String numeroExpediente = request.getParameter("numeroExpediente");
                String codLocalizacion = request.getParameter("codLocalizacion");
                String localizacion = request.getParameter("txtDomicilio");
                if (!"".equals(codLocalizacion)) { // Tenia localizacion

                    gVO.setAtributo("codMunicipio",codMunicipio);
                    gVO.setAtributo("ejercicio",ejercicio);
                    gVO.setAtributo("numeroExpediente",numeroExpediente);
                    gVO.setAtributo("codLocalizacion",codLocalizacion);
                    gVO.setAtributo("localizacion",localizacion);
                    int resultado = 0;
                    resultado = TramitacionExpedientesManager.getInstance().eliminarLocalizacion(gVO,params);
                    if(resultado == 0) {
                        tramExpVO.setRespOpcion("localizacionNoEliminado");
                    } else if(resultado > 0) {
                        // Borrar domicilio
                        boolean eliminado = false;
                        eliminado = TercerosManager.getInstance().eliminarDomiciliosNoNormalizado(gVO, params);
                        tramExpVO.setRespOpcion("localizacionEliminado");
                    }
                }
                tramExpVO.setListaDocumentos(new Vector());
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";
            } else if("diasHabiles".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                String fechaInicio = tramExpVO.getFechaInicioPlazo();
                String ano = fechaInicio.substring(6,10);
                Vector diasFestivos = new Vector();
                diasFestivos = GestionManager.getInstance().obtenerFestivosPorAno(ano,params);
                String plazo = tramExpVO.getPlazo();
                String fechaLimite = obtenerFechaLimite(fechaInicio,diasFestivos,plazo);
                tramExpVO.setFechaLimite(fechaLimite);
                tramExpVO.setRespOpcion("diasHabiles");
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";
            } else if("irAlAction".equals(opcion)) {
                m_Log.debug("Estamos en la opcion irAlAction de TramitacionRelacionExpedientesAction");
                
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setRespOpcion("volverAlJSP");
                tramExpVO.setListaDocumentos(new Vector());
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                tramExpForm.setMapa(tramExpVO.getMapa());
               
                // ISSUE #104866
                //Para cada expediente necesito conocer su lista de interesados...
                HashMap mapa=new HashMap();
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                gVO.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                gVO.setAtributo("ejercicio",tramExpVO.getEjercicio());
                gVO.setAtributo("numero",tramExpVO.getNumeroRelacion());
                
                Vector expedientes = new Vector();
                expedientes = FichaRelacionExpedientesManager.getInstance().cargaListaExpedientes(gVO, params);
                
                
                for (int i=0; i < expedientes.size(); i++) {
                    GeneralValueObject temp = (GeneralValueObject) expedientes.get(i);
                    GeneralValueObject gVO2 = new GeneralValueObject();
                    gVO2.setAtributo("codMunicipio",tramExpVO.getCodMunicipio());
                    gVO2.setAtributo("codProcedimiento",tramExpVO.getCodProcedimiento());
                    gVO2.setAtributo("ejercicio",tramExpVO.getEjercicio());
                    String numeroExpediente=(String)temp.getAtributo("numExp");
                    gVO2.setAtributo("numero",numeroExpediente);
                    if (m_Log.isDebugEnabled()) m_Log.debug("Numero de expediente:"+numeroExpediente);      
        
                    Vector listaInteresados = InteresadosManager.getInstance().getListaInteresados(gVO2,params);
                    for(int k=0; k<listaInteresados.size(); k++){
                        InteresadoExpedienteVO interesado=(InteresadoExpedienteVO) listaInteresados.get(k);
                        if (m_Log.isDebugEnabled()) m_Log.debug("Numero de expediente:"+numeroExpediente);    
                        if (m_Log.isDebugEnabled()) m_Log.debug("Interesado:"+interesado.getCodTercero());    
                    
                    }
                    
                    
                    mapa.put(numeroExpediente,listaInteresados);
                }        
                 tramExpVO.setMapa(mapa);
                 tramExpForm.setMapa(mapa);
               
                 //
             
                 opcion = "grabarTramite";
            } else if("irAlAction2".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                tramExpVO.setRespOpcion("volverAlJSP2");
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";
            } else if("eliminarDocumentoCRD".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();

                 Hashtable<String,Object> datos = new Hashtable<String,Object>();
                datos.put("codMunicipio",tramExpVO.getCodMunicipio());
                datos.put("codProcedimiento",tramExpVO.getCodProcedimiento());
                datos.put("ejercicio",tramExpVO.getEjercicio());
                datos.put("numeroRelacion",tramExpVO.getNumeroRelacion());
                datos.put("codTramite",tramExpVO.getCodTramite());
                datos.put("ocurrenciaTramite",tramExpVO.getOcurrenciaTramite());
                datos.put("codDocumento",tramExpVO.getCodDocumento());
                datos.put("perteneceRelacion","true");
                datos.put("params",params);
                datos.put("nombreDocumento",request.getParameter("nombreDocumento"));
                
                AlmacenDocumento almacen = AlmacenDocumentoTramitacionFactoria.getInstance(tramExpVO.getCodMunicipio()).getImplClassPluginProcedimiento(tramExpVO.getCodMunicipio(),tramExpVO.getCodProcedimiento());                            
                Documento doc = null;
                int tipoDocumento = -1;
                if(!almacen.isPluginGestor())
                    tipoDocumento = DocumentoTramitacionFactoria.TIPO_DOCUMENTO_BBDD;
                else{
                    String codigoVisibleTramite = DefinicionTramitesManager.getInstance().getCodigoVisibleTramite(tramExpVO.getCodMunicipio(), tramExpVO.getCodProcedimiento(), tramExpVO.getCodTramite(), params);
                    String nombreProcedimiento = DefinicionProcedimientosManager.getInstance().getDescripcionProcedimiento(tramExpVO.getCodProcedimiento(), params);
                    datos.put("codificacion",ConstantesDatos.CODIFICACION_UTF_8);
                    
                    String tipoMime = DocumentOperations.determinarTipoMimePlantilla(
                            tramExpVO.getEditorTexto(), request.getParameter("nombreDocumento"));
                    datos.put("extension", MimeTypes.guessExtensionFromMimeType(tipoMime));
                    datos.put("tipoMime", tipoMime);
                    
                    //datos.put("nombreOrganizacion",usuario.getOrg());
                    //datos.put("nombreProcedimiento",nombreProcedimiento);
                    datos.put("codigoVisibleTramite",codigoVisibleTramite);
                    datos.put("numeroDocumento",tramExpVO.getCodDocumento());


                     /** SE INDICA POR ORDEN CUALES SERÁN LAS CARPETAS EN LAS QUE SE ALOJARÁN EL DOCUMENTO EN EL GESTOR DOCUMENTAL **/
                    ResourceBundle bundleDocumentos = ResourceBundle.getBundle("documentos");             
                    String carpetaRaiz   = bundleDocumentos.getString(ConstantesDatos.PREFIJO_PROPIEDAD_ALMACENAMIENTO + usuario.getOrgCod() + ConstantesDatos.BARRA + almacen.getNombreServicio() + ConstantesDatos.SUFIJO_PLUGIN_GESTOR_CARPETA_RAIZ);
                    

                    String descripcionOrganizacion = usuario.getOrg();
                    ArrayList<String> listaCarpetas = new ArrayList<String>();
                    listaCarpetas.add(carpetaRaiz);
                    listaCarpetas.add(usuario.getOrgCod() + ConstantesDatos.GUION + descripcionOrganizacion);
                    listaCarpetas.add(tramExpVO.getCodProcedimiento() + ConstantesDatos.GUION + nombreProcedimiento);
                    listaCarpetas.add(ConstantesDatos.PREFIJO_DOCUMENTO_RELACION + tramExpVO.getNumeroRelacion().replaceAll(ConstantesDatos.BARRA,ConstantesDatos.GUION));
                    datos.put("listaCarpetas",listaCarpetas);
                    /** FIN **/

                    tipoDocumento = DocumentoTramitacionFactoria.TIPO_DOCUMENTO_GESTOR;
                }

                doc = DocumentoTramitacionFactoria.getInstance().getDocumento(datos, tipoDocumento);
                
                boolean documentoEliminado = false;
                try{
                    documentoEliminado = almacen.eliminarDocumento(doc);
                    doc.setNumeroExpediente(tramExpVO.getNumeroExpediente());
                    OperacionesExpedienteManager.getInstance().registrarEliminacionDocumentoTramite(doc,usuario.getNombreUsu(),params);
                }catch(AlmacenDocumentoTramitacionException e){
                    e.printStackTrace();
                    m_Log.error(this.getClass().getName() + ": " + e.getMessage());
                }

                if(documentoEliminado)
                    tramExpVO.setRespOpcion("eliminadoCRD");
                else
                    tramExpVO.setRespOpcion("noEliminadoCRD");

                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";
              

            } else if("cambiarEstadoFirmaDocumentoCRD".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                int resultado = TramitacionExpedientesManager.getInstance().cambiarEstadoFirmaDocumentoRelacion(tramExpVO, params);
                if (resultado > 0) {
                    tramExpVO.setRespOpcion("cambiadoEstadoFirmaDocumentoCRD");
                    boolean enviado = mailToUsuarioNoTramitador(tramExpVO, params);
                    if (!enviado) {
                        tramExpVO.setRespOpcion("cambiadoEstadoFirmaDocumentoCRDNoEnviadoMail");
                        tramExpForm.setRespOpcion("cambiadoEstadoFirmaDocumentoCRDNoEnviadoMail");
                    }
                } else {
                    tramExpVO.setRespOpcion("noCambiadoEstadoFirmaDocumentoCRD");
                }
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";
            } else if("actualizarTablaDocumentos".equals(opcion)) {
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                TramitacionExpedientesManager.getInstance().getListaDocumentosRelacionCronologia(tramExpVO,params);
                tramExpVO.setRespOpcion("actualizarTablaDocumentos");
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";
                                
            }else if("verInteresados".equals(opcion)) {
                String codMunicipio = request.getParameter("codMun");
                String codProcedimiento = request.getParameter("codProc");
                String numeroRelacion = request.getParameter("nCS");
                String ejercicio = request.getParameter("eje");
                GeneralValueObject g = new GeneralValueObject();
                g.setAtributo("codMunicipio",codMunicipio);
                g.setAtributo("codProcedimiento",codProcedimiento);
                g.setAtributo("numeroRelacion",numeroRelacion);
                g.setAtributo("numero",numeroRelacion);
                g.setAtributo("ejercicio",ejercicio);
                g.setAtributo("codRol","");
                Vector listaInteresados = TramitacionExpedientesManager.getInstance().getListaInteresadosRelacion(g, params);
                // Si no se realiza esto se está perdiendo información, hay que obtener datos de la tramitacion y volverlos a poner
                tramExpVO = tramExpForm.getTramitacionExpedientes();
                // Fin de la linea añadida
                tramExpVO.setListaInteresados(listaInteresados);
                Vector listaRoles = new Vector();
                listaRoles = InteresadosManager.getInstance().getListaRoles(g,params);
                tramExpVO.setListaRoles(listaRoles);
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                
            } else if("actualizarTablaInteresados".equals(opcion)) {
                String codMunicipio = request.getParameter("codMunicipio");
                String codProcedimiento = request.getParameter("codProcedimiento");
                String numeroRelacion = request.getParameter("numeroRelacion");
                String ejercicio = request.getParameter("ejercicio");
                String codRol = request.getParameter("codRol");
                GeneralValueObject g = new GeneralValueObject();
                g.setAtributo("codMunicipio",codMunicipio);
                g.setAtributo("codProcedimiento",codProcedimiento);
                g.setAtributo("numeroRelacion",numeroRelacion);
                g.setAtributo("numero",numeroRelacion);
                g.setAtributo("ejercicio",ejercicio);
                g.setAtributo("codRol",codRol);
                Vector listaInteresados = TramitacionExpedientesManager.getInstance().getListaInteresadosRelacion(g,params);
                tramExpVO.setListaInteresados(listaInteresados);
                tramExpVO.setListaDocumentos(new Vector());
                tramExpVO.setRespOpcion("actualizarTablaInteresados");
                tramExpForm.setTramitacionExpedientes(tramExpVO);
                opcion = "grabarTramite";
            }
        }   else { // No hay usuario.
            m_Log.warn("MantAnotacionRegistroAction --> no hay usuario");
            opcion = "no_usuario";
        }

        /* Redirigimos al JSP de salida*/
        return (mapping.findForward(opcion));

    }

	/**
	 * Pone en el VO el mensaje adecuado con el error que devuelve un servicio
	 * web en una WSException
	 * @param tramExpVO
	 * @param wse
	 */
	private void ponerMensajeFalloSW(
			TramitacionExpedientesValueObject tramExpVO, WSException wse) {
		String msg = "Fallo en ejecución de servicio web ";
		if (wse.isMandatoryExecution()) {
			msg += "obligatorio. ";
		} else {
			msg += "no obligatorio. ";
		}
		tramExpVO.setMensajeSW(msg + wse.getMessage());
	}

    private void ponerMensajeFalloSW(TramitacionExpedientesValueObject tramExpVO, EjecucionSWException eswe) {
		String msg = "Fallo en ejecución de servicio web obligatorio.";
		tramExpVO.setMensajeSW(msg + eswe.getMessage());
	}

	private String obtenerFechaLimite(String fechaInicio,Vector diasFestivos,String plazo) {
		Vector dF = new Vector();
		for(int j=0;j<diasFestivos.size();j++) {
			Fecha f_fecha = new Fecha();
			String f_string = new String();
			f_string = (String) diasFestivos.elementAt(j);
			java.util.Date d_date = f_fecha.obtenerDate(f_string);
			dF.addElement(d_date);
		}
		Calendar fecha = Calendar.getInstance();
		Fecha f = new Fecha();
		java.util.Date d = f.obtenerDate(fechaInicio);
		fecha.setTime(d);
		int i = 0;
	if (m_Log.isDebugEnabled()) m_Log.debug("el plazo es : " + plazo);
		while(i<Integer.parseInt(plazo)) {
			String incremento = "si";
			fecha.add(Calendar.DATE , 1);
			d = fecha.getTime();
			if(d.getDay() == 0) {
				incremento = "no";
			}
			for(int j=0;j<dF.size();j++) {
				java.util.Date diasFest = (java.util.Date) dF.elementAt(j);
				if(d.equals(diasFest)) {
					incremento = "no";
				}
			}
			if("si".equals(incremento)) {
				i++;
			}
		}
		String fechaLimite = f.construirFecha(d);
		m_Log.debug(fechaLimite + " limite como String");
		return fechaLimite;
	}

    

   private int grabarDatosSuplementarios(TramitacionExpedientesForm tEF,TramitacionExpedientesValueObject t,HttpServletRequest request,String[] params) {

        String prefijoCampo = "T_" + t.getCodTramite() + "_" + t.getOcurrenciaTramite() + "_";
        String sufijoFichero = "_" + t.getOcurrenciaTramite();

        int res = 0;
        GeneralValueObject gVO = new GeneralValueObject();
        Vector estructuraDatosSuplementarios = new Vector();
        estructuraDatosSuplementarios = tEF.getEstructuraDatosSuplementarios();
        GeneralValueObject listaFicheros;
        listaFicheros = tEF.getListaFicheros();
        GeneralValueObject listaTiposFicheros;
        listaTiposFicheros = tEF.getListaTiposFicheros();
        Config m_Conf = ConfigServiceHelper.getConfig("common");
        String campo="E_PLT.CodigoPlantillaFichero";
        String tipoDatoFichero = m_Conf.getString(campo);
        m_Log.debug("Dato common.properties (fichero)... "+tipoDatoFichero);
        campo = "E_PLT.CodigoCampoDesplegable";
        String tipoDatoDesplegable = m_Conf.getString(campo);
        
        
        for(int i=0;i<estructuraDatosSuplementarios.size();i++) {
            EstructuraCampo eC = (EstructuraCampo) estructuraDatosSuplementarios.elementAt(i);
            
             m_Log.debug("CODIGO ... " + eC.getCodCampo()); 
            m_Log.debug("NOMBRE ... " + eC.getDescCampo());
            m_Log.debug("TIPO DATO ... " + eC.getCodTipoDato());
            eC.setCampoActivo("activar" + prefijoCampo + eC.getCodCampo()); 
            m_Log.debug("ACTIVAR/DESACTIVAR ... " + eC.getCampoActivo());
            
            gVO.setAtributo("codOrganizacion", tEF.getCodMunicipio());
            
            if (eC.getCodTipoDato().equals(tipoDatoFichero)) { // 5 = FICHERO
                m_Log.debug("Procesado FICHERO ... "+eC.getCodCampo());
                if (listaFicheros.getAtributo(eC.getCodCampo() + sufijoFichero) != ""
                        && listaFicheros.getAtributo(eC.getCodCampo() + sufijoFichero) != null){
                    m_Log.debug("FICHERO ........................ NO VACIO "); 
                    byte[] fichero = (byte[]) listaFicheros.getAtributo(eC.getCodCampo()+ sufijoFichero);
                    String tipoFichero = (String)listaTiposFicheros.getAtributo(eC.getCodCampo()+ sufijoFichero);
                    gVO.setAtributo(eC.getCodCampo(),fichero);
                    if (fichero != null) {
                        String aux = request.getParameter(eC.getCodCampo()+ sufijoFichero);
                        String[] matriz = aux.split("/");
                        aux = matriz[matriz.length-1];
                        gVO.setAtributo(eC.getCodCampo()+"_NOMBRE",aux);
                        gVO.setAtributo(eC.getCodCampo()+"_TIPO",tipoFichero);
                    }
                } else {
                    m_Log.debug("FICHERO ........................ VACIO ");
                    gVO.setAtributo(eC.getCodCampo(), null);
                    gVO.setAtributo(eC.getCodCampo() + "_NOMBRE", "");
                    gVO.setAtributo(eC.getCodCampo() + "_TIPO", "");
                }
                m_Log.debug("lista FICHEROs ... "+listaFicheros);
            } else if (eC.getCodTipoDato().equals(tipoDatoDesplegable)) {
                m_Log.debug("Procesado DESPLEGABLE ... ");
                gVO.setAtributo(eC.getCodCampo(),request.getParameter("cod"+prefijoCampo+eC.getCodCampo()));
                m_Log.debug("DESPLEGABLE ........................ "+request.getParameter("cod"+eC.getCodCampo()));
            } else if (eC.getCodTipoDato().equals("3")){
                m_Log.debug("Busqueda del tipo FECHA:" + eC.getCodTipoDato());
                //if ((request.getParameter("activar" + eC.getCodCampo())!=null) ||(request.getParameter("activar" + eC.getCodCampo()).equals(""))){
                    
                        m_Log.debug("Valor activar/desactivar:" + request.getParameter("activar" + prefijoCampo + eC.getCodCampo()));
                        gVO.setAtributo(eC.getCampoActivo(), request.getParameter("activar" + prefijoCampo + eC.getCodCampo()));
                //}
                        m_Log.debug("Valor fecha::" + request.getParameter(prefijoCampo + eC.getCodCampo()));
                gVO.setAtributo(eC.getCodCampo(), request.getParameter(prefijoCampo + eC.getCodCampo()));

			} else {
                gVO.setAtributo(eC.getCodCampo(),request.getParameter(prefijoCampo + eC.getCodCampo()));
            }
        }

        gVO.setAtributo("estDatosSuplementarios", estructuraDatosSuplementarios);
        t.setCamposSuplementarios(gVO);

        res = DatosSuplementariosManager.getInstance().grabarDatosSuplementariosTramite(estructuraDatosSuplementarios,gVO,params,t);
        return res; 
    }


   private int grabarDatosSuplementariosFichero(TramitacionExpedientesForm tEF,TramitacionExpedientesValueObject t,HttpServletRequest request,String[] params) {

        String prefijoCampo = "T_" + t.getCodTramite() + "_" + t.getOcurrenciaTramite() + "_";
        String sufijoFichero = "_" + t.getOcurrenciaTramite();

        int res = 0;
        GeneralValueObject gVO = new GeneralValueObject();
        Vector estructuraDatosSuplementarios = new Vector();
        estructuraDatosSuplementarios = tEF.getEstructuraDatosSuplementarios();
        Vector valoresDatosSuplementarios = new Vector();
        GeneralValueObject listaFicheros;
        listaFicheros = tEF.getListaFicheros();
        GeneralValueObject listaTiposFicheros;
        listaTiposFicheros = tEF.getListaTiposFicheros();
        Config m_Conf = ConfigServiceHelper.getConfig("common");
        String campo="E_PLT.CodigoPlantillaFichero";
        String tipoDatoFichero = m_Conf.getString(campo);
        m_Log.debug("Dato common.properties (fichero)... "+tipoDatoFichero);
        campo = "E_PLT.CodigoCampoDesplegable";
        String tipoDatoDesplegable = m_Conf.getString(campo);
        
        boolean generarCSV = true;
        if (t.getCodMunicipio() != null) {
            generarCSV = CodigoSeguroVerificacionHelper.incrustarCSVenJustificante(Integer.parseInt(t.getCodMunicipio().trim()), registroConf);
        }
 
        for(int i=0;i<estructuraDatosSuplementarios.size();i++) {
            EstructuraCampo eC = (EstructuraCampo) estructuraDatosSuplementarios.elementAt(i);
            
            m_Log.debug("CODIGO ... " + eC.getCodCampo()); 
            m_Log.debug("NOMBRE ... " + eC.getDescCampo());
            m_Log.debug("TIPO DATO ... " + eC.getCodTipoDato());
            eC.setCampoActivo("activar" + prefijoCampo + eC.getCodCampo()); 
            m_Log.debug("ACTIVAR/DESACTIVAR ... " + eC.getCampoActivo());
            
            gVO.setAtributo("codOrganizacion", tEF.getCodMunicipio());
            
            if (eC.getCodTipoDato().equals(tipoDatoFichero)) { // 5 = FICHERO
                m_Log.debug("Procesado FICHERO ... "+eC.getCodCampo());
                if (listaFicheros.getAtributo(eC.getCodCampo() + sufijoFichero) != ""
                        && listaFicheros.getAtributo(eC.getCodCampo() + sufijoFichero) != null){
                    m_Log.debug("FICHERO ........................ NO VACIO "); 
                     byte[] fichero = (byte[]) listaFicheros.getAtributo(eC.getCodCampo()+ sufijoFichero);
                    String tipoFichero = (String)listaTiposFicheros.getAtributo(eC.getCodCampo()+ sufijoFichero);
                    gVO.setAtributo(eC.getCodCampo(),fichero);
                    if (fichero != null) {
                        String aux = request.getParameter(eC.getCodCampo()+ sufijoFichero);
                        String[] matriz = aux.split("/");
                        aux = matriz[matriz.length-1];
                        gVO.setAtributo(eC.getCodCampo()+"_NOMBRE",aux);
                        gVO.setAtributo(eC.getCodCampo()+"_TIPO",tipoFichero);
                    }
                } else {
                    m_Log.debug("FICHERO ........................ VACIO ");
                    gVO.setAtributo(eC.getCodCampo(),null);
                    gVO.setAtributo(eC.getCodCampo()+"_NOMBRE","");
                    gVO.setAtributo(eC.getCodCampo()+"_TIPO","");
                } 
                m_Log.debug("lista FICHEROs ... "+listaFicheros);
            } 
            valoresDatosSuplementarios.addElement(gVO);
        }
        
        res = DatosSuplementariosManager.getInstance().grabarDatosSuplementariosFicheroTramite(estructuraDatosSuplementarios,valoresDatosSuplementarios,params,t);
        return res; 
    }
   
    private GeneralValueObject tramitacionExpedientesVO(TramitacionExpedientesValueObject teVO) {
        GeneralValueObject gVO = new GeneralValueObject();
        gVO.setAtributo("codMunicipio", teVO.getCodMunicipio());
        gVO.setAtributo("codProcedimiento", teVO.getCodProcedimiento());
        gVO.setAtributo("ejercicio", teVO.getEjercicio());
        gVO.setAtributo("numero", teVO.getNumero());
        gVO.setAtributo("ocurrenciaTramite", teVO.getOcurrenciaTramite());
        gVO.setAtributo("usuario", teVO.getCodUsuario());
        gVO.setAtributo("codEntidad", teVO.getCodEntidad());
        gVO.setAtributo("codOrganizacion", teVO.getCodOrganizacion());
        //gVO.setAtributo("codUOR", teVO.getCodUOR());
        gVO.setAtributo("codTramite", teVO.getCodTramite());
        gVO.setAtributo("fechaInicio", teVO.getFechaInicio());
        gVO.setAtributo("fechaInicioPlazo", teVO.getFechaInicioPlazo());
        gVO.setAtributo("fechaFinPlazo", teVO.getFechaFinPlazo());
        gVO.setAtributo("fechaLimite", teVO.getFechaLimite());
        gVO.setAtributo("fechaFinTramite", teVO.getFechaFin());
        gVO.setAtributo("observaciones", teVO.getObservaciones());
        gVO.setAtributo("codUnidadOrganicaExp", teVO.getCodUnidadOrganicaExp());
        gVO.setAtributo("codUnidadTramitadoraTram", teVO.getCodUnidadTramitadoraTram());
        if (m_Log.isDebugEnabled()) m_Log.debug("el codigo de la unidad organica del expediente en el cambio a general : " + teVO.getCodUnidadOrganicaExp());
        if (m_Log.isDebugEnabled()) m_Log.debug("el codigo de la unidad tramitadora del tramite en el cambio a general : " + teVO.getCodUnidadTramitadoraTram());
        gVO.setAtributo("codUnidadTramitadoraUsu", teVO.getCodUnidadTramitadoraUsu());
        gVO.setAtributo("codUnidadOrganica", teVO.getCodUOR());
        gVO.setAtributo("codInteresados", teVO.getVectorCodInteresados());
        gVO.setAtributo("usuario", teVO.getCodUsuario());


        return gVO;
    }



    private Vector listaTemasSeleccionados(String listTemasSelecc) {
        Vector lista = new Vector();
        StringTokenizer valores = null;
        if (listTemasSelecc != null) {
          valores = new StringTokenizer(listTemasSelecc,"§¥",false);
          while (valores.hasMoreTokens()) {
            String valor = valores.nextToken();
            lista.addElement(valor);
          }
        }
        return lista;
      }

    private Vector listaTramitesSeleccionados(String listSelecc, String codUORTramiteManual, String codUnidadTramitadoraUsu) {
        Vector lista = new Vector();
        StringTokenizer codigos = null;

        if (listSelecc != null) {
            codigos = new StringTokenizer(listSelecc,"§¥",false);

            while (codigos.hasMoreTokens()) {
                String cod = codigos.nextToken();
                TramitacionExpedientesValueObject tEVO = new TramitacionExpedientesValueObject();
                tEVO.setCodigoTramiteFlujoSalida(cod);
                tEVO.setCodUnidadTramitadoraManual(codUORTramiteManual);
                tEVO.setCodUnidadTramitadoraUsu(codUnidadTramitadoraUsu);
                lista.addElement(tEVO);
                m_Log.debug("-->" + cod);
            }

        }
        return lista;
    }


    /**
     * Convierte el vector de objeto TramitacionExpedientesValueObject en otro .
     * Necesario para poder iniciar trámites de forma manual.
     * @param tramitesIniciarManualmente
     * @return
     */
    private Vector convertListaTramitesIniciarManualmente(Vector tramitesIniciarManualmente) {
        Vector lista = new Vector();

        for(int i=0;i<tramitesIniciarManualmente.size();i++){
            TramitacionExpedientesValueObject traIniciar = (TramitacionExpedientesValueObject)tramitesIniciarManualmente.get(i);            
            traIniciar.setCodTramite(traIniciar.getCodigoTramiteFlujoSalida());
            lista.add(i,traIniciar);
        }
        return lista;
    }



    /**
     * A partir de las listas de trámites a iniciar genera el correspondiente colección de objetos TramitacionExpedientesValueObject para
     * pasar a la capa modelo
     * @param listaCodTramites: Códigos de los trámites a iniciar
     * @param listaModoTramites: Módo de cada trámite a iniciar
     * @param listaUtrTramites: Unidad tramitadora con la que se iniciará cada trámite
     * @param listaCumpleCondicion: Contiene un si o un no para cada trámite indicando si cumple o no sus condiciones de entrada
     * @param insertarUtr
     * @return Vector<TramitacionExpedientesValueObject>
     */
    private Vector<TramitacionExpedientesValueObject> listaTramitesIniciar(
            String listaCodTramites, String listaModoTramites, String listaUtrTramites,String listaCumpleCondicion,boolean insertarUtr) {

        Vector<TramitacionExpedientesValueObject> lista =
                new Vector<TramitacionExpedientesValueObject>();
        StringTokenizer codigos = null;
        StringTokenizer modos = null;
        StringTokenizer utrs = null;
        StringTokenizer condiciones = null;


        if (listaCodTramites != null) {

            m_Log.debug("TramitacionExpedienteAction.listaTramitesIniciar listaCodTramites: " + listaCodTramites);
            m_Log.debug("TramitacionExpedienteAction.listaTramitesIniciar listaModoTramites: " + listaModoTramites);
            m_Log.debug("TramitacionExpedienteAction.listaTramitesIniciar listaUtrTramites: " + listaUtrTramites);
            m_Log.debug("TramitacionExpedienteAction.listaTramitesIniciar listaCumpleCondicion: " + listaCumpleCondicion);
            codigos = new StringTokenizer(listaCodTramites,"§¥",false);
            modos = new StringTokenizer(listaModoTramites,"§¥",false);
            utrs = new StringTokenizer(listaUtrTramites,"§¥",false);


            condiciones = new StringTokenizer(listaCumpleCondicion,"§¥",false);

            while (codigos.hasMoreTokens()) {
                String cod = codigos.nextToken();
                String modo = modos.nextToken();
                String utr = "";
                if(utrs.hasMoreTokens())
                     utr = utrs.nextToken();
                m_Log.debug("utr: " + utr);
                m_Log.debug("insertarUtr: " + insertarUtr);
                TramitacionExpedientesValueObject tEVO = new TramitacionExpedientesValueObject();
                tEVO.setCodTramite(cod);
                tEVO.setModoSeleccionUnidad(modo);
                tEVO.setCodUnidadTramitadoraTram(utr);
                if(utr!="_" && insertarUtr)
                    tEVO.setInsertarCodUnidadTramitadoraTram("si");

                String condicion = condiciones.nextToken();
                if("si".equals(condicion) || "SI".equals(condicion)) // si cumple sus condiciones de entrada no se guarda en la lista de tramites a iniciar
                {
                    lista.addElement(tEVO);
                    m_Log.debug("-->Tramite a iniciar: " + cod + ", modo " + modo + ", unidad de tramite " + utr + " cumple condiciones entrada: " + condicion);
                }
                else{
                    m_Log.debug("-->Tramite a iniciar: " + cod + ", modo " + modo + ", unidad de tramite " + utr + " no cumple condiciones entrada: " + condicion + " => NO SE INICIA");
                }

            }
        }
        return lista;
                }


    /**
     * Funcion que envia un mail a un usuario no tramitador que debe firmar un documento pendiente de firma,
     * a su usuario delegado en caso de que exista, al usuario delegado de este y asi sucesivamente
     * @param tramExpVO Con la información relativa a la relacion
     * @param params Con la información de conexion a la BBDD.
     * @return true si se han enviado correctamente los correos | false en caso contrario.
     */
    private boolean mailToUsuarioNoTramitador(TramitacionExpedientesValueObject tramExpVO, String[] params) {
        try {
            String requiereFirma = TramitacionExpedientesManager.getInstance().getFirmaDocumentoRelacion(tramExpVO, params);
            if (requiereFirma.equals("O")){//Si el documento requiere firma de otro usuario
                int codigoUsuario = TramitacionExpedientesManager.getInstance().getUsuarioFirmaRelacion(tramExpVO, params);

                Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");
                String asunto = m_ConfigTechnical.getString("mail.subject");
                String contenido = m_ConfigTechnical.getString("mail.content");
                MailHelper mailHelper = new MailHelper();

                /* Reemplazos de campos en el asunto y el contenido del mensaje*/
                asunto = asunto.replaceAll("@expediente@", tramExpVO.getNumeroRelacionMostrar());
                String documento = null;
                if (asunto.indexOf("@documento@")!=-1) {
                    Vector documentos = tramExpVO.getListaDocumentos();
                    for (Object objDocumento : documentos) {
                        TramitacionExpedientesValueObject tramitacionExpedientesVO = (TramitacionExpedientesValueObject) objDocumento;
                        if (tramitacionExpedientesVO.getCodDocumento().equals(tramExpVO.getCodDocumento())) {
                            documento = tramitacionExpedientesVO.getDescDocumento();
                            break;
                        }
                    }
                    asunto = asunto.replaceAll("@documento@", documento);
                }
                contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroRelacionMostrar());
                if (contenido.indexOf("@documento@")!=-1) {
                    if (documento==null) {
                        Vector documentos = tramExpVO.getListaDocumentos();
                        for (Object objDocumento : documentos) {
                            TramitacionExpedientesValueObject tramitacionExpedientesVO = (TramitacionExpedientesValueObject) objDocumento;
                            if (tramitacionExpedientesVO.getCodDocumento().equals(tramExpVO.getCodDocumento())) {
                                documento = tramitacionExpedientesVO.getDescDocumento();
                                break;
                            }
                        }
                    }
                    contenido = contenido.replaceAll("@documento@", documento);
                }

                /* Realizamos el proceso para el usuario en cuestion y para los delegados */
                while (codigoUsuario != -1) {//codigoUsuario == -1 -> no existe usuario delegado
                    //enviamos mail
                    String email = UsuariosGruposManager.getInstance().getMailByUsuario(codigoUsuario, params);
                    if ((email!=null) && (!email.equalsIgnoreCase(""))) {
                        mailHelper.sendMail(email, asunto, contenido);
                    }

                    //recuperamos usuariodelegado
                    codigoUsuario = UsuariosGruposManager.getInstance().getUsuarioDelegado(codigoUsuario, params);
                }
            }
        } catch (MailServiceNotActivedException e) {
            m_Log.error("Servicio de mail no activado");
            //Servicio de mail no activado, funcionamiento normal
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
            return false;
        }
        return true;
    }

    public boolean notificar(UsuarioValueObject usuario, TramitacionExpedientesValueObject tramExpVO) {
        boolean resultado = true;
        try {

            if (m_Log.isDebugEnabled()) m_Log.debug("ENTRA EN NOTIFICAR");
            Vector listaEMailsAlIniciar = tramExpVO.getListaEMailsAlIniciar();
            Vector listaEMailsAlFinalizar = tramExpVO.getListaEMailsAlFinalizar();
            Config m_ConfigApplication = ConfigServiceHelper.getConfig("techserver");
            String asunto = m_ConfigApplication.getString("mail.subject");
            String contenido;
            Vector emailsUOR;
            Vector emailsUsusUOR;
            Vector emailsInteresados;
            String emailUsuarioIniciaTramite;
            String emailUsuarioIniciaExped;
            MailHelper mailHelper = new MailHelper();
            if (m_Log.isDebugEnabled()) m_Log.debug("UNIDAD TRAMITADORA DEL USUARIO: " + tramExpVO.getUnidadTramitadora());
            if (m_Log.isDebugEnabled()) m_Log.debug("UNIDAD TRAMITADORA DEL TRAMITE Q SE INICIA: "
                + tramExpVO.getUnidadTramitadoraTramiteIniciado());
            if (m_Log.isDebugEnabled()) m_Log.debug("TRAMITE Q FINALIZA: " + tramExpVO.getTramite());

//          Comprobacion
            if (m_Log.isDebugEnabled()) m_Log.debug("-->Tamanho listaEMailsAlIniciar"+listaEMailsAlIniciar.size() );
            if (m_Log.isDebugEnabled()) m_Log.debug("-->Tamanho listaEMailsAlFinalizar"+listaEMailsAlFinalizar.size() );
            
            
            // Reemplazos de campos en el asunto y el contenido del mensaje
            asunto = asunto.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
            for (int i=0;i<listaEMailsAlFinalizar.size();i++) {
                emailsUOR = ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getListaEMailsUOR();
                emailsUsusUOR = ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getListaEMailsUsusUOR();
                emailsInteresados = ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getListaEMailsInteresados();
                emailUsuarioIniciaTramite = ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getListaEmailsUsuInicioTramite();
                emailUsuarioIniciaExped = ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getListaEmailsUsuInicioExped();
                
                if (m_Log.isDebugEnabled()) m_Log.debug("emailsUOR "+emailsUOR);
                try {
                	
                    if (m_Log.isDebugEnabled()) m_Log.debug("emailsUOR "+emailsUOR.size());
                    for (int j=0;j<emailsUOR.size();j++) {
                        contenido = m_ConfigApplication.getString("mail.contentFinalizacionTramiteUOR");
                        contenido = contenido.replaceAll("@usuario@", usuario.getNombreUsu());
                        contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                        contenido = contenido.replaceAll("@tramite@",
                                ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getNombreTramite());
                        mailHelper.sendMail((String) emailsUOR.elementAt(j), asunto, contenido);
                        if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE FINALIZADO ENVIADO A "+emailsUOR.elementAt(j));
                    }
                } catch (NullPointerException e) {
                    if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                }
                try {
                    if (m_Log.isDebugEnabled()) m_Log.debug("emailsUsusUOR "+emailsUsusUOR.size());
                    for (int j=0;j<emailsUsusUOR.size();j++) {
                        contenido = m_ConfigApplication.getString("mail.contentFinalizacionTramiteUsusUOR");
                        contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                        contenido = contenido.replaceAll("@unidadTramitadora@", tramExpVO.getUnidadTramitadora());
                        contenido = contenido.replaceAll("@tramite@",
                                ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getNombreTramite());
                        mailHelper.sendMail((String) emailsUsusUOR.elementAt(j), asunto, contenido);
                        if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE FINALIZADO ENVIADO A "+emailsUsusUOR.elementAt(j));
                    }
                } catch (NullPointerException e) {
                    if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                }
                try {
                    if (m_Log.isDebugEnabled()) m_Log.debug("emailsInteresados "+emailsInteresados.size());
                    for (int j=0;j<emailsInteresados.size();j++) {
                        contenido = m_ConfigApplication.getString("mail.contentFinalizacionTramiteInteresados");
                        contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                        contenido = contenido.replaceAll("@tramite@",
                                ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getNombreTramite());
                        mailHelper.sendMail((String) emailsInteresados.elementAt(j), asunto, contenido);
                        if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE FINALIZADO ENVIADO A "+emailsInteresados.elementAt(j));
                    }
                } catch (NullPointerException e) {
                    if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
                }
                
                if(m_Log.isDebugEnabled()) m_Log.debug("emailUsuarioInicioTramite"+emailUsuarioIniciaTramite);

                if(emailUsuarioIniciaTramite!=null && !emailUsuarioIniciaTramite.equals("")){
                   contenido = m_ConfigApplication.getString("mail.contentFinalizacionTramiteUsuarioInicio");
                   contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                   contenido = contenido.replaceAll("@tramite@",((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getNombreTramite());

                   mailHelper.sendMail((String) emailUsuarioIniciaTramite, asunto, contenido);
                   
                   if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE FINALIZADO ENVIADO A "+emailUsuarioIniciaTramite);
                }

                if(m_Log.isDebugEnabled()) m_Log.debug("emailUsuarioInicioExpediente"+emailUsuarioIniciaExped);

                if(emailUsuarioIniciaTramite!=null && !emailUsuarioIniciaExped.equals("")){
                   contenido = m_ConfigApplication.getString("mail.contentFinalizacionTramiteUsuarioInicioExped");
                   contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                   contenido = contenido.replaceAll("@tramite@",((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getNombreTramite());

                   mailHelper.sendMail((String) emailUsuarioIniciaExped, asunto, contenido);
                   
                   if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE FINALIZADO ENVIADO A "+emailUsuarioIniciaExped);
                   
                }
            }
            for (int i=0;i<listaEMailsAlIniciar.size();i++) {
                emailsUOR = ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getListaEMailsUOR();
                emailsUsusUOR = ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getListaEMailsUsusUOR();
                emailsInteresados = ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getListaEMailsInteresados();
                emailUsuarioIniciaTramite = ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getListaEmailsUsuInicioTramite();
                emailUsuarioIniciaExped = ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getListaEmailsUsuInicioExped();
                
                try {
                    for (int j=0;j<emailsUOR.size();j++) {
                        contenido = m_ConfigApplication.getString("mail.contentInicioTramiteUOR");
                        contenido = contenido.replaceAll("@usuario@", usuario.getNombreUsu());
                        contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                        contenido = contenido.replaceAll("@tramite@",
                                ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getNombreTramite());

                        if (m_Log.isDebugEnabled()) m_Log.debug("PLAZO TRÁMITE : "+tramExpVO.getPlazo());
                        if (!tramExpVO.getPlazo().equals("")) {
                            if (m_Log.isDebugEnabled()) m_Log.debug("TIPO PLAZO TRÁMITE : "+tramExpVO.getTipoPlazo());
                            if(tramExpVO.getTipoPlazo().equals("DÍAS HÁBILES"))
                                contenido += m_ConfigApplication.getString("mail.contentInicioTramitePlazoH");
                            else if(tramExpVO.getTipoPlazo().equals("DÍAS NATURALES"))
                                contenido += m_ConfigApplication.getString("mail.contentInicioTramitePlazoN");
                            else if(tramExpVO.getTipoPlazo().equals("MESES"))
                                contenido += m_ConfigApplication.getString("mail.contentInicioTramitePlazoM");
                            contenido = contenido.replaceAll("@plazo@", tramExpVO.getPlazo());
                        }

                        mailHelper.sendMail((String) emailsUOR.elementAt(j), asunto, contenido);
                        if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE INICIADO . CONTENIDO : "+contenido);
                        if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE INICIADO ENVIADO A "+emailsUOR.elementAt(j));
                    }
                } 
                catch (NullPointerException npe) {
                    if (m_Log.isErrorEnabled()) m_Log.error(npe.getMessage());
                }
                try {
                    for (int j=0;j<emailsUsusUOR.size();j++) {
                        contenido = m_ConfigApplication.getString("mail.contentInicioTramiteUsusUOR");
                        contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                        contenido = contenido.replaceAll("@unidadTramitadora@", tramExpVO.getUnidadTramitadoraTramiteIniciado());
                        contenido = contenido.replaceAll("@tramite@",
                                ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getNombreTramite());

                        if (m_Log.isDebugEnabled()) m_Log.debug("PLAZO TRÁMITE : "+tramExpVO.getPlazo());
                        if (!tramExpVO.getPlazo().equals("")) {
                            if (m_Log.isDebugEnabled()) m_Log.debug("TIPO PLAZO TRÁMITE : "+tramExpVO.getTipoPlazo());
                            if(tramExpVO.getTipoPlazo().equals("DÍAS HÁBILES"))
                                contenido += m_ConfigApplication.getString("mail.contentInicioTramitePlazoH");
                            else if(tramExpVO.getTipoPlazo().equals("DÍAS NATURALES"))
                                contenido += m_ConfigApplication.getString("mail.contentInicioTramitePlazoN");
                            else if(tramExpVO.getTipoPlazo().equals("MESES"))
                                contenido += m_ConfigApplication.getString("mail.contentInicioTramitePlazoM");
                            contenido = contenido.replaceAll("@plazo@", tramExpVO.getPlazo());
                        }

                        mailHelper.sendMail((String) emailsUsusUOR.elementAt(j), asunto, contenido);
                        if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE INICIADO . CONTENIDO : "+contenido);
                        if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE INICIADO ENVIADO A "+emailsUsusUOR.elementAt(j));
                    }
                } catch (NullPointerException npe) {
                    if (m_Log.isErrorEnabled()) m_Log.error(npe.getMessage());
                }
                try {
                    for (int j=0;j<emailsInteresados.size();j++) {
                        contenido = m_ConfigApplication.getString("mail.contentInicioTramiteInteresados");
                        contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                        contenido = contenido.replaceAll("@tramite@",
                                ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getNombreTramite());
                        mailHelper.sendMail((String) emailsInteresados.elementAt(j), asunto, contenido);
                        if (m_Log.isDebugEnabled()) m_Log.debug("MAIL DE TRAMITE INICIADO ENVIADO A "+emailsInteresados.elementAt(j));
                    }
                } catch (NullPointerException npe) {
                    if (m_Log.isErrorEnabled()) m_Log.error(npe.getMessage());
                }
            
                if (m_Log.isDebugEnabled()) {
                    m_Log.debug("emailUsuarioInicioTramite" + emailUsuarioIniciaTramite);
                }

                if (emailUsuarioIniciaTramite != null && !emailUsuarioIniciaTramite.equals("")) {
                    contenido = m_ConfigApplication.getString("mail.contentInicioTramiteUsuarioInicio");
                    contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                    contenido = contenido.replaceAll("@tramite@", ((EstructuraNotificacion) listaEMailsAlFinalizar.elementAt(i)).getNombreTramite());

                    mailHelper.sendMail((String) emailUsuarioIniciaTramite, asunto, contenido);

                    if (m_Log.isDebugEnabled()) {
                        m_Log.debug("MAIL DE TRAMITE INICIADO ENVIADO A " + emailUsuarioIniciaTramite);
                    }

                }

                if (m_Log.isDebugEnabled()) {
                    m_Log.debug("emailUsuarioInicioExpediente" + emailUsuarioIniciaExped);
                }

                if (emailUsuarioIniciaTramite != null && !emailUsuarioIniciaExped.equals("")) {
                    contenido = m_ConfigApplication.getString("mail.contentInicioTramiteUsuarioInicioExped");
                    contenido = contenido.replaceAll("@expediente@", tramExpVO.getNumeroExpediente());
                    contenido = contenido.replaceAll("@tramite@", ((EstructuraNotificacion) listaEMailsAlIniciar.elementAt(i)).getNombreTramite());

                    mailHelper.sendMail((String) emailUsuarioIniciaExped, asunto, contenido);

                    if (m_Log.isDebugEnabled()) {
                        m_Log.debug("MAIL DE TRAMITE INICIADO ENVIADO A " + emailUsuarioIniciaExped);
                    }

                }
            
            }
            if (m_Log.isDebugEnabled()) m_Log.debug("SALE DE NOTIFICAR");
        } catch (MailServiceNotActivedException e) {
            m_Log.error("Servicio de mail no activado");
            //Servicio de mail no activado, funcionamiento normal
            resultado = false;
        } catch (Exception e) {
            e.printStackTrace();
            if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
            resultado = false;
        }
        if (m_Log.isDebugEnabled()) m_Log.debug("-->Valor de RESULTADO en notificar = " + resultado);
        return resultado;
    }

    private String iniciarExpedienteAsociado (String procedimiento, UsuarioValueObject usuario, FichaRelacionExpedientesForm fichaRelExpForm, String[] params) {
        String numero="";
        try {
            m_Log.debug("ini INICIO DE EXPEDIENTE .......................................... ");
            // INI Cargar los datos para iniciar el expediente
            GeneralValueObject gVO = new GeneralValueObject();
            gVO.setAtributo("codMunicipio",fichaRelExpForm.getCodMunicipio());
            gVO.setAtributo("usuario",Integer.toString(usuario.getIdUsuario()));
            gVO.setAtributo("codOrganizacion",Integer.toString(usuario.getOrgCod()));
            gVO.setAtributo("codEntidad",Integer.toString(usuario.getEntCod()));
            gVO.setAtributo("codAplicacion", Integer.toString(usuario.getAppCod()));
            gVO.setAtributo("codUOR", fichaRelExpForm.getCodUnidadOrganicaExp());
            String ejercicioExpOrigen = fichaRelExpForm.getEjercicio();
            String procedimientoExpOrigen = fichaRelExpForm.getCodProcedimiento();
            String numeroExpOrigen = fichaRelExpForm.getNumExpediente();

            gVO.setAtributo("ejercicio",ejercicioExpOrigen); //Solo utilizado AKI para buscar los interesados
            gVO.setAtributo("codProcedimiento",procedimientoExpOrigen); //Solo utilizado AKI para buscar los interesados
            gVO.setAtributo("numero",numeroExpOrigen); //Solo utilizado AKI para buscar los interesados
            gVO.setAtributo("numExpedienteOriginal",numeroExpOrigen); //Solo utilizado AKI para buscar los interesados
            gVO = FichaExpedienteManager.getInstance().cargaExpediente(gVO, params);
            Vector lTerceros = InteresadosManager.getInstance().getListaInteresados(gVO,params);
            // FIN Cargar los datos para iniciar el expediente

            // INI Calcular el nuevo numero de expediente
            TramitacionValueObject tramVO = new TramitacionValueObject();
            tramVO.setCodProcedimiento(procedimiento);
            TramitacionManager.getInstance().getNuevoExpediente(usuario,tramVO,params);
            gVO.setAtributo("ejercicio",tramVO.getEjercicio());
            gVO.setAtributo("codProcedimiento",procedimiento);
            numero = tramVO.getNumero();
            gVO.setAtributo("numero", numero);
            gVO.setAtributo(ConstantesDatos.ORIGEN_LLAMADA_NOMBRE_PARAMETRO, ConstantesDatos.ORIGEN_LLAMADA_INTERFAZ_WEB);
            // FIN Calcular el nuevo numero de expediente

            int res = FichaExpedienteManager.getInstance().iniciarExpediente(gVO,params);

            if (res >0){
                gVO.setAtributo("nomUsuario",usuario.getNombreUsu());
                
                // INI Cargar los otros datos para grabar en el expediente
                if (lTerceros == null) lTerceros = new Vector();
                Vector listaCodTercero = new Vector();
                Vector listaVersionTercero = new Vector();
                Vector listaCodDomicilio = new Vector();
                Vector listaRol = new Vector();
                for (int i=0; i<lTerceros.size(); i++) {
                    GeneralValueObject t = (GeneralValueObject) lTerceros.elementAt(i);
                    listaCodTercero.addElement(t.getAtributo("codigoTercero"));
                    listaVersionTercero.addElement(t.getAtributo("versionTercero"));
                    listaCodDomicilio.addElement(t.getAtributo("domicilio"));
                    listaRol.addElement(t.getAtributo("rol"));
                }
                gVO.setAtributo("listaCodTercero",listaCodTercero);
                gVO.setAtributo("listaVersionTercero",listaVersionTercero);
                gVO.setAtributo("listaCodDomicilio",listaCodDomicilio);
                gVO.setAtributo("listaRol",listaRol);
                
                gVO.setAtributo("tipoAlta", ConstantesDatos.TIPO_ALTA_EXP_ASOCIADO);
                OperacionesExpedienteManager.getInstance().registrarAltaExpediente(gVO, params);

                int res2 = FichaExpedienteManager.getInstance().grabarExpediente(gVO, params);
                // FIN Cargar los otros datos para grabar en el expediente
                if (res2>0) {
                    ConsultaExpedientesValueObject consExpVO = new ConsultaExpedientesValueObject();
                    consExpVO.setCodMunicipioIni((String) gVO.getAtributo("codMunicipio"));
                    consExpVO.setEjercicioIni(ejercicioExpOrigen);
                    consExpVO.setNumeroExpedienteIni(numeroExpOrigen);
                    consExpVO.setCodMunicipio((String) gVO.getAtributo("codMunicipio"));
                    consExpVO.setEjercicio((String) gVO.getAtributo("ejercicio"));
                    consExpVO.setNumeroExpediente((String) gVO.getAtributo("numero"));
                    int resultado = ConsultaExpedientesManager.getInstance().insertExpedientesRelacionados(consExpVO,params);

                    if (resultado > 0){
                        consExpVO.setUsuario(Integer.toString(usuario.getIdUsuario()));
                        consExpVO.setNombreUsuario(usuario.getNombreUsu());
                        OperacionesExpedienteManager.getInstance().registrarAnhadirRelacion(consExpVO, params);
                    }
                }
            }
            m_Log.debug("fin INICIO DE EXPEDIENTE .......................................... ");
        } catch (TramitacionException te) {
            if (m_Log.isErrorEnabled()) m_Log.error(te.getMessage());
            return "";
        } catch (AnotacionRegistroException re) {
            if (m_Log.isErrorEnabled()) m_Log.error(re.getMessage());
            return "";
        } catch (TechnicalException teche) {
            if (m_Log.isErrorEnabled()) m_Log.error(teche.getMessage());
            return "";
        }
        return numero;
    }
    
    private Vector iniciarMenosNoIniciados(Vector listaTramitesNoIniciados, Vector listaTramitesIniciar) {
        Vector listaTramites = new Vector();
        for(Iterator it = listaTramitesNoIniciados.iterator();it.hasNext();){
            GeneralValueObject tramGVO = (GeneralValueObject)it.next();
            String codTramNoIniciado = (String)tramGVO.getAtributo("codTramite") ;
            listaTramitesIniciar = suprimirTramiteLista(codTramNoIniciado, listaTramitesIniciar);
        }
        
        return listaTramitesIniciar;
    }
    
    private Vector suprimirTramiteLista(String codTramNoIniciado, Vector listaTramitesIniciar) {
        Vector aux = listaTramitesIniciar;
        for(int i = 0;i<listaTramitesIniciar.size();i++) {
            TramitacionExpedientesValueObject tram = (TramitacionExpedientesValueObject)listaTramitesIniciar.get(i);
            if(codTramNoIniciado.equals(tram.getCodTramite())) {
                aux.removeElementAt(i);
                return aux;
            }
        }
        return listaTramitesIniciar;
    }
    /**
     * Registra la operacion de inicio de tramite
     * 
     * @param tramExpVO
     * @param listaTramitesIniciados
     * @param listaTramitesNoIniciados
     * @param listadoTramitesExpediente
     * @param paramsRegistroOperacion
     * @param usuario
     * @param params
     * @param manual
     * @throws TechnicalException 
     */
    private void registrarOperacionInicioTramite(TramitacionExpedientesValueObject tramExpVO,
            Vector<TramitacionExpedientesValueObject> listaTramitesIniciados, Vector<TramitacionExpedientesValueObject> listaTramitesNoIniciados,
            Vector<GeneralValueObject> listadoTramitesExpediente, GeneralValueObject paramsRegistroOperacion,
            UsuarioValueObject usuario, String[] params, boolean manual)
            throws TechnicalException {
        
        List<TramitacionExpedientesValueObject> listaTramitesCorrectos = 
                extraerTramitesIniciadosCorrectamente(listaTramitesIniciados, listaTramitesNoIniciados);
        
        TramitacionExpedientesValueObject tramiteIniciado = null;
        String codTramiteIniciado = null;
        GeneralValueObject tramite = null;
        for (int i = 0; i < listaTramitesCorrectos.size(); i++) {
            tramiteIniciado = listaTramitesIniciados.get(i);
            codTramiteIniciado = tramiteIniciado.getCodTramite();

            tramite = new GeneralValueObject();
            // Pueden existir varios tramites con el mismo codTramite, por lo que se busca
            // al reves, ya que la lista esta ordenada del tramite mas antiguo al mas reciente
            for (int j = listadoTramitesExpediente.size() - 1; j >= 0; j--) {
                tramite = listadoTramitesExpediente.get(j);
                if (codTramiteIniciado.equals(tramite.getAtributo("codTramite"))) {
                    break;
                }
            }
            
            paramsRegistroOperacion.setAtributo("codTramite", tramite.getAtributoONulo("codTramite"));
            paramsRegistroOperacion.setAtributo("nomTramite", tramite.getAtributoONulo("tramite"));
            paramsRegistroOperacion.setAtributo("ocurrTramite", tramite.getAtributoONulo("ocurrenciaTramite"));
            paramsRegistroOperacion.setAtributo("nombreUsuario", usuario.getNombreUsu());
            paramsRegistroOperacion.setAtributo("fechaInicioTramite", tramite.getAtributoONulo("fehcaInicio"));

            OperacionesExpedienteManager.getInstance().registrarIniciarTramite(paramsRegistroOperacion, manual, params);
        }
    }

    /**
     * Devuelve una lista de tramites que han sido iniciados correctamente
     * 
     * @param listaTramitesIniciados
     * @param listaTramitesNoIniciados
     * @return 
     */
    private List<TramitacionExpedientesValueObject> extraerTramitesIniciadosCorrectamente(
            Vector<TramitacionExpedientesValueObject> listaTramitesIniciados, Vector<TramitacionExpedientesValueObject> listaTramitesNoIniciados) {
        
        List<TramitacionExpedientesValueObject> lista = new ArrayList<TramitacionExpedientesValueObject>();
        boolean anadir = true;
        
        for (TramitacionExpedientesValueObject tramiteIniciado: listaTramitesIniciados) {
            String codTramiteIniciado = tramiteIniciado.getCodTramite();
            anadir = true;
            
            for (TramitacionExpedientesValueObject tramiteNoIniciado: listaTramitesNoIniciados) {
                String codTramiteNoIniciado = tramiteNoIniciado.getCodTramite();
                if (codTramiteIniciado.equals(codTramiteNoIniciado)) {
                    anadir = false;
                    break;
                }
            }
            
            if (anadir) {
                lista.add(tramiteIniciado);
            }
        }
        
        return lista;
    }
}


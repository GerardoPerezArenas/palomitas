/* Generated by Together */

package es.altia.agora.interfaces.user.web.util;

import es.altia.agora.business.administracion.mantenimiento.persistence.UsuariosGruposManager;
import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.select.SelectJoinValueObject;
import es.altia.agora.business.select.SelectValueObject;
import es.altia.agora.business.select.persistence.SelectManager;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.technical.ConstantesDatos;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;

import java.util.StringTokenizer;
import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
// fin esquema BD.
public final class CargarSelectAction extends Action {
    protected static Log m_Log = LogFactory.getLog(CargarSelectAction.class.getName());

    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
        throws IOException, ServletException {
            ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));
            HttpSession session = request.getSession();
            // Validaremos los parametros del request especificados
            ActionErrors errors = new ActionErrors();
            //BolsaEmpleoValueObject laBolsa = null;

              	    // Rellenamos el form de BolsaEmpleo
            if (form == null) {
                m_Log.debug("Rellenamos el form de Select");
                form = new SelectForm();
                if ("request".equals(mapping.getScope()))
                    request.setAttribute(mapping.getAttribute(), form);
                else
                    session.setAttribute(mapping.getAttribute(), form);
            }

            SelectForm selectForm = (SelectForm)form;
			// ---> Esquema BD
			UsuarioValueObject usuarioVO=null;
			String[] params;
			usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
			if (usuarioVO!= null)
				params = usuarioVO.getParamsCon();
			else params=null;

			// fin Esquema BD

            String tipo_select = request.getParameter("tipo_select");

            try{
                //SelectServicesRemote remote = BeanHelper.getSelectServices();   ----manuel
                m_Log.debug("Obtenido remote");

                if ("listaJoin".equals(tipo_select)){
                    String col_cod1_tabla1 = request.getParameter("col_cod1_tabla1");
                    String col_cod2_tabla1 = request.getParameter("col_cod2_tabla1");
                    String nom_tabla1 = request.getParameter("nom_tabla1");
                    String col_cod_tabla2 = request.getParameter("col_cod_tabla2");
                    String col_desc_tabla2 = request.getParameter("col_desc_tabla2");
                    String nom_tabla2 = request.getParameter("nom_tabla2");
                    String valor_where = request.getParameter("valor_where");
                    String input_cod_join = request.getParameter("input_cod_join");
                    String input_desc_join = request.getParameter("input_desc_join");

                    SelectJoinValueObject laSelectJoin = new SelectJoinValueObject();

                    laSelectJoin.setCol_cod1_tabla1(col_cod1_tabla1);
                    laSelectJoin.setCol_cod2_tabla1(col_cod2_tabla1);
                    laSelectJoin.setNom_tabla1(nom_tabla1);
                    laSelectJoin.setCol_cod_tabla2(col_cod_tabla2);
                    laSelectJoin.setCol_desc_tabla2(col_desc_tabla2);
                    laSelectJoin.setNom_tabla2(nom_tabla2);
                    laSelectJoin.setValor_where(valor_where);
                    laSelectJoin.setInput_cod_join(input_cod_join);
                    laSelectJoin.setInput_desc_join(input_desc_join);

                    //laSelectJoin = remote.getSelectJoinValue(laSelectJoin);    ----manuel
                    //Pasamos los valores a la pagina
                    selectForm.setSelectJoin(laSelectJoin);
                }
                else{
                    String input_cod = "";
                    String input_desc = "";
                    String col_cod = "";

                    input_cod  = request.getParameter("input_cod");
                    input_desc = request.getParameter("input_desc");

                    if ("lista".equals(tipo_select) || "listaCodigos".equals(tipo_select))
                    {
                        col_cod = request.getParameter("col_cod");
                    }

                    String col_desc    = request.getParameter("col_desc");
                    String nom_tabla   = request.getParameter("nom_tabla");

					SelectValueObject laSelect = new SelectValueObject();
					Vector paresAtribValor = new Vector();

                    String column_valor_where = request.getParameter("column_valor_where");
					if (column_valor_where != null)
					{
						StringTokenizer condiciones = new StringTokenizer(column_valor_where,"§¥,",false);

						while (condiciones.hasMoreTokens()) {
								String e =condiciones.nextToken();
								paresAtribValor.addElement(e);
						}

					}
					// Condicion más compleja.
					String parteWhereCompleja = null;
					if (request.getParameter("whereComplejo") != null)
						if (!"".equals(request.getParameter("whereComplejo").trim()))						    
							parteWhereCompleja = request.getParameter("whereComplejo");
                                        
                                        /*** prueba *****/ 
                                        // Si el nombre de la tabla sobre el que se hace la consulta es A_UOR, y además, el usuario
                                        // actual tiene permiso sobre la directiva de registro, que permite visualizar sólo sus unidades tramitadores,
                                        // sin incluir la de registro, entonces se modifica la parte where de la consulta para que no se recuperen
                                        // las unidades de registro. De este modo se evita que pueda crear salidas dirigidas a dicha unidad de destino,
                                        // algo que en SSR no desean
                                        if((!"".equals(parteWhereCompleja)) && (parteWhereCompleja!=null)){
                                            if(nom_tabla!=null && "A_UOR".equalsIgnoreCase(nom_tabla) && UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.REGISTRO_S_SOLO_UORS_USUARIO,usuarioVO.getIdUsuario(), params)){
                                            parteWhereCompleja += " AND (UOR_TIP IS NULL OR UOR_TIP=0) ";
                                            }
                                        }
                                            
                                        laSelect.setParteWhereCompleja(parteWhereCompleja);
                                        
                                        /*** prueba ****/

					laSelect.setColumn_valor_where(paresAtribValor);

	                laSelect.setCol_cod(col_cod);
					laSelect.setCol_desc_c(col_desc);
					laSelect.setNom_tabla(nom_tabla);
					laSelect.setInput_desc(input_desc);
					laSelect.setInput_cod(input_cod);
					if (request.getParameter("target1") != null)
						laSelect.setTarget1(request.getParameter("target1"));
					//laSelect = remote.getSelectValue(laSelect);  ----manuel

					// laSelect = SelectManager.getInstance().getSelectValue(laSelect);
					laSelect = SelectManager.getInstance().getSelectValue(laSelect,params);

					//Pasamos los valores a la pagina
					selectForm.setSelect(laSelect);
				}

                m_Log.debug("Select ejecutada");
            }
            //catch (SelectException se) {   --- manuel
            catch (Exception se) {
               errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("index.error.technicalProblem"));
               se.printStackTrace();
            }
			if (m_Log.isDebugEnabled()) m_Log.debug("El tipo select es: "+tipo_select);

            return (mapping.findForward(tipo_select));

    }
}

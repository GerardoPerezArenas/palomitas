/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.RegistroValueObject;
import es.altia.agora.business.planeamiento.AnotacionRegistroValueObject;
import es.altia.agora.business.planeamiento.AnotacionRectificacionRegistroValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantCatalogacionValueObject;
import es.altia.agora.business.planeamiento.persistence.*;
import es.altia.agora.business.terceros.persistence.TercerosManager;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.BienAndEspacioCatalogadoForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.AnotacionForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.RectificacionForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.*;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

public final class BuscarBienAndEspacioCatalogadoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(BuscarBienAndEspacioCatalogadoAction.class.getName());
    protected static Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("BuscarBienAndEspacioCatalogadoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
        }

        BienAndEspacioCatalogadoForm bienForm = (BienAndEspacioCatalogadoForm) form;
        BienAndEspacioCatalogadoForm bienSessionForm = (BienAndEspacioCatalogadoForm)
                session.getAttribute("BienAndEspacioCatalogadoForm");
        Calendar fechaAprobacion = Calendar.getInstance();
        Calendar fechaBaja = Calendar.getInstance();
        Calendar fechaPublicacion = Calendar.getInstance();

        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        try{
            String fecha = bienForm.getFechaAprobacion();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaAprobacion = null;
            } else {
                fechaAprobacion.setTime(format.parse(fecha));
            }
            fecha = bienForm.getFechaBaja();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaBaja = null;
            } else {
                fechaBaja.setTime(format.parse(fecha));
            }
            fecha = bienForm.getFechaPublicacion();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaPublicacion = null;
            } else {
                fechaPublicacion.setTime(format.parse(fecha));
            }
        } catch (Exception e) {//En principio nunca va a entrar
            e.printStackTrace();
            if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
        }
        Integer numero = null;
        if (bienForm.getNumero()!=null && !bienForm.getNumero().equals("")) {
            numero = new Integer(bienForm.getNumero());
        }
        Integer codigoDomicilio = null;
        if (bienForm.getCodigoDomicilio()!=null && !bienForm.getCodigoDomicilio().equals("")) {
            codigoDomicilio = new Integer(bienForm.getCodigoDomicilio());
        }
        RegistroValueObject registroVO = new RegistroValueObject(
                new Character(bienForm.getTipoRegistro().charAt(0)),
                m_ConfigTechnical.getString("Planeamiento.BienAndEspacioCatalogado.Subseccion"),
                null,
                numero, bienForm.getAnho(), null, null,
                fechaAprobacion, null, fechaBaja, null, null, null,
                null, null, null,
                null, bienForm.getDenominacionBien(), codigoDomicilio, bienForm.getCodigoCatalogacion(),
                bienForm.getCodigoGradoProteccion(), bienForm.getCodigoRelacionBien(), fechaPublicacion,
                bienForm.getNumeroPublicacion(), bienForm.getObservaciones(), bienForm.getArchivo());
        Collection registrosBien = new ArrayList();
        Collection anotaciones = null;
        Collection rectificaciones = null;
        BienAndEspacioCatalogadoForm bienCatForm = null;
        Vector registros = RegistroManager.getInstance().findByAll(registroVO, params);
        Iterator registrosIt = registros.iterator();
        RegistroValueObject registro = null;
        Iterator anotacionesIt = null;
        AnotacionRegistroValueObject anotacionVO = null;
        AnotacionForm anotacionForm = null;
        Iterator anotacionesRectificacionIt = null;
        AnotacionRectificacionRegistroValueObject anotacionRectificacionVO = null;
        RectificacionForm rectificacionForm = null;

        //***** Para la busqueda por listado
        Iterator catalogacionesIt = null;
        MantCatalogacionValueObject catalogacionVO = null;
        //************

        while (registrosIt.hasNext()) {
            registro = (RegistroValueObject) registrosIt.next();
            anotaciones = new ArrayList();
            anotacionesIt = AnotacionRegistroManager.getInstance().findByRegistro(registro.getTipoRegistro(),
                    registro.getCodigoSubseccion(), registro.getAnho(),
                    registro.getNumero(), params).iterator();
            while (anotacionesIt.hasNext()) {
                anotacionVO = (AnotacionRegistroValueObject) anotacionesIt.next();
                anotacionForm = new AnotacionForm();
                anotacionForm.setNumeroAnotacion(anotacionVO.getNumeroAnotacion());
                anotacionForm.setFechaAnotacion(format.format(anotacionVO.getFechaAnotacion().getTime()));
                anotacionForm.setComentarioAnotacion(anotacionVO.getObservaciones().replaceAll("\r\n", "@intro@"));
                anotaciones.add(anotacionForm);
            }
            rectificaciones = new ArrayList();
            anotacionesRectificacionIt = AnotacionRectificacionRegistroManager.getInstance().findByRegistro(registro.getTipoRegistro(),
                    registro.getCodigoSubseccion(), registro.getAnho(),
                    registro.getNumero(), params).iterator();
            while (anotacionesRectificacionIt.hasNext()) {
                anotacionRectificacionVO = (AnotacionRectificacionRegistroValueObject) anotacionesRectificacionIt.next();
                rectificacionForm = new RectificacionForm();
                rectificacionForm.setNumeroRectificacion(anotacionRectificacionVO.getNumeroAnotacion());
                rectificacionForm.setFechaRectificacion(format.format(anotacionRectificacionVO.getFechaAnotacion().getTime()));
                rectificacionForm.setComentarioRectificacion(anotacionRectificacionVO.getObservaciones().replaceAll("\r\n", "@intro@"));
                rectificaciones.add(rectificacionForm);
            }
            bienCatForm = new BienAndEspacioCatalogadoForm();
            bienCatForm.setTipoRegistro(bienForm.getTipoRegistro());
            bienCatForm.setNumero(registro.getNumero().toString());
            bienCatForm.setAnho(registro.getAnho());
            Calendar fecha = registro.getFechaAprobacion();
            String stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            bienCatForm.setFechaAprobacion(stringFecha);
            fecha = registro.getFechaVigencia();
            stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            fecha = registro.getFechaBaja();
            stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            bienCatForm.setFechaBaja(stringFecha);
            bienCatForm.setDenominacionBien(registro.getDenominacionBien().replaceAll("\r\n", "@intro@"));
            bienCatForm.setCodigoDomicilio(registro.getCodigoDomicilio().toString());
            bienCatForm.setCodigoCatalogacion(registro.getCodigoCatalogacion());
            bienCatForm.setCodigoGradoProteccion(registro.getCodigoGradoProteccion());
            bienCatForm.setCodigoRelacionBien(registro.getCodigoRelacionBien());
            fecha = registro.getFechaPublicacion();
            stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            bienCatForm.setFechaPublicacion(stringFecha);
            bienCatForm.setNumeroPublicacion(registro.getNumeroPublicacion());
            String observaciones = registro.getObservaciones();
            if (observaciones!=null && !observaciones.equals("")) {
                observaciones = observaciones.replaceAll("\r\n", "@intro@");
            }
            bienCatForm.setObservaciones(observaciones);
            String file = registro.getArchivo();
            if (file!=null && !file.equals("")) {
                file = file.replaceAll("\r\n", "@intro@");
            }
            bienCatForm.setArchivo(file);
            bienCatForm.setAnotaciones(anotaciones);
            bienCatForm.setRectificaciones(rectificaciones);
            bienCatForm.setCatalogaciones(bienSessionForm.getCatalogaciones());
            bienCatForm.setGradosProteccion(bienSessionForm.getGradosProteccion());
            bienCatForm.setRelacionesBien(bienSessionForm.getRelacionesBien());

            //Si la salida es un listado necesitamos los nombres
            if (request.getParameter("listado").equals("true")) {
                catalogacionesIt = bienSessionForm.getCatalogaciones().iterator();
                while (catalogacionesIt.hasNext()) {
                    catalogacionVO = (MantCatalogacionValueObject)  catalogacionesIt.next();
                    if (catalogacionVO.getCodigo().equals(bienCatForm.getCodigoCatalogacion())) {
                        bienCatForm.setCatalogacion(catalogacionVO.getDescripcion());
                        break;
                    }
                }
            }
            registrosBien.add(bienCatForm);
        }
        session.setAttribute("registrosBien", registrosBien);
        session.setAttribute("criteriosBien", setCriteriosBusqueda(bienForm));
        Iterator registrosBienIt = registrosBien.iterator();
        if (registrosBienIt.hasNext()) {
            bienForm = (BienAndEspacioCatalogadoForm) registrosBienIt.next();
            session.setAttribute("BienAndEspacioCatalogadoForm", bienForm);
            request.setAttribute("registroActual", "1");

            GeneralValueObject domicilioVO = new GeneralValueObject();
            domicilioVO.setAtributo("codDomicilio", bienForm.getCodigoDomicilio());
            Vector domicilios=TercerosManager.getInstance().getDomiciliosById(params,domicilioVO);
            request.setAttribute("domicilio", domicilios.get(0));
        } else {
            request.setAttribute("registroActual", "-1");
        }

        if (request.getParameter("listado").equals("true")) {
            return (mapping.findForward("listado"));
        }
        return (mapping.findForward("default"));
    }

//Funcion que permite fijar los criterios de busqueda para ser utilizados en los informes de impresion
    private HashMap setCriteriosBusqueda(BienAndEspacioCatalogadoForm bienForm){
        HashMap criterios = new HashMap();

        if (bienForm.getDenominacionBien()!=null && !bienForm.getDenominacionBien().equals("")) {
            criterios.put("denominacionBien", bienForm.getDenominacionBien());
        }
        if (bienForm.getCodigoDomicilio()!=null && !bienForm.getCodigoDomicilio().equals("")) {
            criterios.put("domicilio", bienForm.getCodigoDomicilio());
        }
        if (bienForm.getCodigoCatalogacion()!=null && !bienForm.getCodigoCatalogacion().equals("")) {
            criterios.put("catalogacion", bienForm.getCatalogacion());
        }
        if (bienForm.getCodigoGradoProteccion()!=null && !bienForm.getCodigoGradoProteccion().equals("")) {
            criterios.put("gradoProteccion", bienForm.getGradoProteccion());
        }
        if (bienForm.getCodigoRelacionBien()!=null && !bienForm.getCodigoRelacionBien().equals("")) {
            criterios.put("relacionBien", bienForm.getRelacionBien());
        }
        if (bienForm.getFechaAprobacion()!=null && !bienForm.getFechaAprobacion().equals("")) {
            criterios.put("fechaAprobacion", bienForm.getFechaAprobacion());
        }
        if (bienForm.getFechaBaja()!=null && !bienForm.getFechaBaja().equals("")) {
            criterios.put("fechaBaja", bienForm.getFechaBaja());
        }
        if (bienForm.getFechaPublicacion()!=null && !bienForm.getFechaPublicacion().equals("")) {
            criterios.put("fechaPublicacion", bienForm.getFechaPublicacion());
        }
        if (bienForm.getNumeroPublicacion()!=null && !bienForm.getNumeroPublicacion().equals("")) {
            criterios.put("numeroPublicacion", bienForm.getNumeroPublicacion());
        }
        if (bienForm.getObservaciones()!=null && !bienForm.getObservaciones().equals("")) {
            criterios.put("observaciones", bienForm.getObservaciones());
        }
        if (bienForm.getArchivo()!=null && !bienForm.getArchivo().equals("")) {
            criterios.put("archivo", bienForm.getArchivo());
        }

        return criterios;
    }
}
/* Generated by Together */
package es.altia.agora.interfaces.user.web.sge;

import es.altia.agora.business.administracion.mantenimiento.persistence.IdiomasManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.TramitesManager;
import es.altia.agora.business.administracion.mantenimiento.persistence.UsuariosGruposManager;
import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.sge.ConsultaExpedientesValueObject;
import es.altia.agora.business.sge.RolVO;
import es.altia.agora.business.sge.TramitacionValueObject;
import es.altia.agora.business.sge.exception.TramitacionException;
import es.altia.agora.business.sge.persistence.ConsultaExpedientesManager;
import es.altia.agora.business.registro.persistence.AuditoriaManager;
import es.altia.agora.business.sge.persistence.DefinicionTramitesManager;
import es.altia.agora.business.sge.persistence.OperacionesExpedienteManager;
import es.altia.agora.business.sge.persistence.FichaExpedienteManager;
import es.altia.agora.business.sge.persistence.RolManager;
import es.altia.agora.business.sge.persistence.TramitacionManager;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.business.util.TransformacionAtributoSelect;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.technical.ConstantesDatos;
import es.altia.agora.technical.Fecha;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import es.altia.common.service.auditoria.ConstantesAuditoria;
import es.altia.util.sqlxmlpdf.GeneralPDF;
import es.altia.util.conexion.AdaptadorSQLBD;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

public final class ConsultaExpedientesAction extends ActionSession {

    protected static Config m_Conf = ConfigServiceHelper.getConfig("common");

    public ActionForward performSession(ActionMapping mapping,
                                        ActionForm form,
                                        HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.debug("================== ConsultaExpedientesAction ===============>");
        ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));

        // Validaremos los parametros del request especificados
        HttpSession session = request.getSession();
        String opcion;

        if ((session.getAttribute("usuario") != null)) {
            UsuarioValueObject usuario = (UsuarioValueObject) session.getAttribute("usuario");
            String[] params = usuario.getParamsCon();

            // Si usuario en sesion es nulo --> error.

            ActionErrors errors = new ActionErrors();

            ConsultaExpedientesValueObject consExpVO = new ConsultaExpedientesValueObject();
            ConsultaExpedientesForm consExpForm;

           if (form == null) {
                m_Log.debug("Rellenamos el form de Consulta de Expedientes");
                form = new ConsultaExpedientesForm();
                if ("request".equals(mapping.getScope()))
                    request.setAttribute(mapping.getAttribute(), form);
                else
                    session.setAttribute(mapping.getAttribute(), form);
            }

            consExpForm = (ConsultaExpedientesForm) form;

            opcion = request.getParameter("opcion");
            if (m_Log.isInfoEnabled()) m_Log.info("la opcion en el action es " + opcion);

            if (opcion.equals("inicio")) {
                consExpVO = consExpForm.getConsultaExpedientes();
                Vector listaProcedimientos;
                try {
                    listaProcedimientos = TramitacionManager.getInstance().getListaProcedimientos(usuario, params);
                } catch (TramitacionException te) {
                    listaProcedimientos = new Vector();
                }
                consExpVO.setListaClasifTramite(DefinicionTramitesManager.getInstance().getListaClasifTramites(params));
                String expRelacionado = request.getParameter("expRelacionado");
                if (expRelacionado == null) {
                    expRelacionado = "no";
                }
                consExpVO.setExpRelacionado(expRelacionado);
                consExpVO.setListaProcedimientos(listaProcedimientos);
                consExpVO.setCriterios(null);
                consExpForm.setConsultaExpedientes(consExpVO);

                String modoConsulta = request.getParameter("modoConsultaExpRel");
                request.setAttribute("modoConsultaExpRel",modoConsulta);

                opcion = "inicio";
            } else if (opcion.equals("inicioEnVentana")) {
                Vector listaProcedimientos;
                try {
                    listaProcedimientos = TramitacionManager.getInstance().getListaProcedimientosSoloUsuario(usuario, params);
                } catch (TramitacionException te) {
                    listaProcedimientos = new Vector();
                }
                consExpVO.setListaClasifTramite(DefinicionTramitesManager.getInstance().getListaClasifTramites(params));
                String expRelacionado = "si";
                consExpVO.setExpRelacionado(expRelacionado);
                String deAdjuntar = "si";
                consExpVO.setDeAdjuntar(deAdjuntar);
                consExpVO.setListaProcedimientos(listaProcedimientos);
                consExpVO.setCriterios(null);
                consExpForm.setConsultaExpedientes(consExpVO);
                session.removeAttribute("parametrosBusquedaExpediente");
                opcion = "inicio";
            } else if (opcion.equals("volverConsultar")) {
                //opcion a la que vuelve desde ficha expediente cuando consulta un
                //espediente desde consulta

                 consExpVO = null;
                 consExpVO=(ConsultaExpedientesValueObject) session.getAttribute("parametrosBusquedaExpediente");
                 
                //recibo el id del campo que pertece a la columna por la que hay que ordenar
                String columna =  request.getParameter("columna");
                String  tipoOrden = request.getParameter("tipoOrden");
                m_Log.debug("ORDENAR antes de buscar    " + columna + " , " +tipoOrden);

                if ("false".equals(tipoOrden)){
                    tipoOrden="DESC";
                }else if("true".equals(tipoOrden)) {
                    tipoOrden="ASC";
                }
                
                String pagina = "";
                String lineas = "";
                
                String desdeFichaExpediente = (String) session.getAttribute("desdeFichaExpediente");

                if ("si".equals(desdeFichaExpediente)) {

                    
                    if (pagina == null || "".equals(pagina)) {
                        String pagina_pendientes = (String) session.getAttribute("pagina_pendientes");
                        pagina=pagina_pendientes;
                        consExpVO.setPaginaListado(pagina_pendientes);

                    }
                    if (lineas == null || "".equals(lineas)) {
                        String lineas_pendientes = (String) session.getAttribute("lineas_pendientes");
                        consExpVO.setNumLineasPaginaListado(lineas_pendientes);
                    }
                    if (columna == null || "".equals(columna)) {
                        columna = (String) session.getAttribute("columna_pendientes");

                    }
                    if (tipoOrden == null || "".equals(tipoOrden)) {
                        String tipoOrden_pendientes = (String) session.getAttribute("tipoOrden_pendientes");
                        if ("false".equals(tipoOrden_pendientes)) {
                            tipoOrden = "DESC";
                        } else if ("true".equals(tipoOrden_pendientes)) {
                            tipoOrden = "ASC";
                        }
                    }

                } else {
                    session.removeAttribute("pagina_pendientes");
                    session.removeAttribute("lineas_pendientes");
                    session.removeAttribute("columna_pendientes");
                    session.removeAttribute("tipoOrden_pendientes");

                }
                m_Log.debug("ORDENAR antes de buscar2    " + columna + " , " + tipoOrden+ ", pagina: "+pagina);




                boolean tieneDirectiva = UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.CONSULTA_SOLO_EXPEDIENTES_TRAMITADOR,usuario.getIdUsuario(), params);
                Vector consulta = null;
                if(!tieneDirectiva){
                    consulta = ConsultaExpedientesManager.getInstance().consultar(usuario, consExpVO, params, false, true,columna,tipoOrden,false);
                }else{
                    consulta = ConsultaExpedientesManager.getInstance().consultarUsuarioTramitador(usuario, consExpVO, params, false, false,columna,tipoOrden,false);
                }

                  //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMAÑ0
                Vector listaCamposListados = TramitacionManager.getInstance().getCamposListado(1, params);
                consExpVO.setCamposListados(listaCamposListados);

                    opcion = "consultarListado";

            } else if (opcion.equals("consultar")) {
                
                m_Log.debug("ConsultaExpedientesAction. La accion es: Consultar");
                consExpVO = consExpForm.getConsultaExpedientes();
                m_Log.debug("Veamos el valor de codigoRol: "+ consExpVO.getCodigoRol());
                m_Log.debug("Veamos el valor de descripcionRol: "+ consExpVO.getDescripcionRol());
                String codigoRol=consExpVO.getCodigoRol();
                String descripcionRol=consExpVO.getDescripcionRol();
                
                // Se indica que no se viene desde informes de gestión
                consExpVO.setDesdeInformesGestion(false);

                String expRelacionado = request.getParameter("expRelacionado");
                if (expRelacionado == null) {
                    expRelacionado = "no";
                }
                consExpVO.setExpRelacionado(expRelacionado);
                String deAdjuntar = request.getParameter("deAdjuntar");
                if (deAdjuntar == null) {
                    deAdjuntar = "no";
                }
                String modoConsultaExpRel = request.getParameter("modoConsultaExpRel");
                request.setAttribute("modoConsultaExpRel",modoConsultaExpRel);
                consExpForm.setModoConsultaExpRel(modoConsultaExpRel);

                 String fechaInicio = request.getParameter("fechaInicio");
                 consExpVO.setFechaInicio(fechaInicio);
                 String fechaFin = request.getParameter("fechaFin");
                 consExpVO.setFechaFin(fechaFin);
                 String localizacion = request.getParameter("localizacion2");
                 if (localizacion==null || "".equals(localizacion)){
                     localizacion=null;
                 }else{
                    localizacion="*"+localizacion+"*";
                 }
                 consExpVO.setLocalizacion(localizacion);
                 String numeroExpediente = request.getParameter("numeroExpediente");
                 String ejercicioExpediente = request.getParameter("ejercicioExpediente");
                 String tercero = request.getParameter("tercero");
                 String versionTercero = request.getParameter("versionTercero");
                 String titular = request.getParameter("titular");
                 String codClasifTramite = request.getParameter("codClasifTramite");
                 String numeroAnotacion = request.getParameter("numeroAnotacion");
                 String ejercicioAnotacion = request.getParameter("ejercicioAnotacion");
                 String codTipoAnotacion=request.getParameter("codTipoAnotacion");


                //recuperamos todos los criterios de bbusqueda del request
                //para crear el vo1 y poder ir a la busqueda desde cualquier punto


                consExpVO.setDeAdjuntar(deAdjuntar);
                String codMunExpIni = request.getParameter("codMunExpIni");
                String ejercicioExpIni = request.getParameter("ejercicioExpIni");
                String numeroExpIni = request.getParameter("numeroExpIni");
                consExpVO.setCodMunicipioIni(codMunExpIni);
                consExpVO.setEjercicioIni(ejercicioExpIni);
                consExpVO.setNumeroExpedienteIni(numeroExpIni);
                String codArea = request.getParameter("codArea");
                consExpVO.setCodArea(codArea);
                String codTramite = request.getParameter("codTramite");
                consExpVO.setCodTramite(codTramite);
                String codUnidadTram = request.getParameter("codUnidadTram");
                consExpVO.setCodUnidadTram(codUnidadTram);
                String codTipoProced = request.getParameter("codTipoProced");
                consExpVO.setCodTipoProced(codTipoProced);
                String codProcedimiento = request.getParameter("codigoProcedimiento");
                consExpVO.setCodProcedimiento(codProcedimiento);
                String refCatastral = request.getParameter("refCatastral");
                consExpVO.setRefCatastral(refCatastral);
                String estado = request.getParameter("estado");
                consExpVO.setEstado(estado);
                String asunto = request.getParameter("asuntoConsulta");
                consExpVO.setAsunto(asunto);
                String observaciones = request.getParameter("observaciones");
                consExpVO.setObservaciones(observaciones);
                consExpVO.setVerTramitesAbiertos(true);
                String T_Inicio = request.getParameter("TipoInicio");
                consExpVO.setTipoInicio(T_Inicio);
                //Mai
                String codigoRolRequest=request.getParameter("codigoRol");
                m_Log.debug("Se recupera de la request el codigoROl: "+ codigoRol);
                String descripcionRolRequest= request.getParameter("descripcionRol");
                m_Log.debug("Se recupera de la request la descripcion del Rol: "+ descripcionRol);
                
                //Recuperamos el valor del check que indica si buscamos expedientes iniciados desde registro telemático
                String  deRegTelem = request.getParameter("expTelematico");
                consExpVO.setBusqTelematicos(deRegTelem);
                
                //nuevo VO para almacenar los criterios de búsqueda independientemente
                //del codigo ya desarrollado debido a que no se pudo concretar donde almacenaba
                //las variables; se guarda en una sesion para poder ir a busqueda desde cualquier punto conservando los criterios

                ConsultaExpedientesValueObject consExpVO1 = new ConsultaExpedientesValueObject();
                consExpVO1.setFechaInicio(fechaInicio);
                consExpVO1.setFechaFin(fechaFin);
                consExpVO1.setLocalizacion(localizacion);
                consExpVO1.setDeAdjuntar(deAdjuntar);
                consExpVO1.setCodMunicipioIni(codMunExpIni);
                consExpVO1.setEjercicioIni(ejercicioExpIni);
                consExpVO1.setNumeroExpediente(numeroExpediente);
                consExpVO1.setEjercicioExpediente(ejercicioExpediente);           
                consExpVO1.setCodArea(codArea);
                consExpVO1.setCodTramite(codTramite);
                consExpVO1.setCodUnidadTram(codUnidadTram);
                consExpVO1.setCodTipoProced(codTipoProced);
                consExpVO1.setCodProcedimiento(codProcedimiento);
                consExpVO1.setRefCatastral(refCatastral);
                consExpVO1.setEstado(estado);
                consExpVO1.setAsunto(asunto);
                consExpVO1.setObservaciones(observaciones);
                consExpVO1.setVerTramitesAbiertos(true);
                consExpVO1.setTercero(tercero);
                consExpVO1.setVersionTercero(versionTercero);
                consExpVO1.setTitular(titular);
                consExpVO1.setCodClasifTramite(codClasifTramite);
                consExpVO1.setNumeroAnotacion(numeroAnotacion);
                consExpVO1.setEjercicioAnotacion(ejercicioAnotacion);
                consExpVO1.setCodTipoAnotacion(codTipoAnotacion);
                consExpVO1.setTipoInicio(T_Inicio);
                consExpVO1.setTipoDocumentoTercero(consExpVO.getTipoDocumentoTercero());
                consExpVO1.setDocumentoTercero(consExpVO.getDocumentoTercero());
				consExpVO1.setCodigoRol(codigoRol);
                consExpVO1.setDescripcionRol(descripcionRol);
                consExpVO1.setTipoBusqueda(consExpVO.getTipoBusqueda());
                consExpVO1.setBusqTelematicos(deRegTelem);
                

                 session.setAttribute("parametrosBusquedaExpediente", consExpVO1);
                m_Log.debug("ConsultaExpedientesAction opcion='consultar' busq observaciones: " + observaciones);
                //recibo el id del campo que pertece a la columna por la que hay que ordenar
                String columna =  request.getParameter("columna");
                String  tipoOrden = request.getParameter("tipoOrden");
                m_Log.debug("ORDENAR antes de buscar    " + columna + " , " +tipoOrden);

                if ("false".equals(tipoOrden)){
                    tipoOrden="DESC";
                }else if("true".equals(tipoOrden)) {
                    tipoOrden="ASC";
                }

                // Se comprueba si el usuario tiene activada la directiva de consultar sólo los expedientes que ha tramitado.
                boolean tieneDirectiva = UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.CONSULTA_SOLO_EXPEDIENTES_TRAMITADOR,usuario.getIdUsuario(), params);

                // Llamamos al manager para realizar la consulta.
                int numRelacionExpedientes = 0;

                if(!tieneDirectiva)
                numRelacionExpedientes = ConsultaExpedientesManager.getInstance().contarExpedientes(usuario, consExpVO, params, false, true);
                else
                    // NO SE CUENTAN LOS EXPEDIENTES PARA LOS QUE EL USUARIO TIENE PERMISO SOBRE LA UNIDAD DE INICIO DE LA MISMA
                    numRelacionExpedientes = ConsultaExpedientesManager.getInstance().contarExpedientesUsuarioTramitador(usuario, consExpVO, params, false, false);

                //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMA?0
                Vector listaCamposListados = TramitacionManager.getInstance().getCamposListado(1, params);
                consExpVO.setCamposListados(listaCamposListados);
                consExpForm.setNumRelacionExpedientes(numRelacionExpedientes);
                consExpForm.setConsultaExpedientes(consExpVO);
                setCriteriosConsulta(consExpVO, params);
                session.setAttribute("consulta", "normal");
                opcion = "consultarListado";
            } else if ("consultarDesdeGestion".equals(opcion)) {

                String tipo = request.getParameter("tipo");
                consExpVO.setTipo(tipo);
                String codArea = request.getParameter("codArea");
                consExpVO.setCodArea(codArea);
                String codTramite = request.getParameter("codTramite");
                consExpVO.setCodTramite(codTramite);
                String codUnidadTram = request.getParameter("codUnidadTram");
                consExpVO.setCodUnidadTram(codUnidadTram);
                String codTipoProced = request.getParameter("codTipoProced");
                consExpVO.setCodTipoProced(codTipoProced);
                String codClasifTramite = request.getParameter("codClasifTramite");
                consExpVO.setCodClasifTramite(codClasifTramite);
                String codProcedimiento = request.getParameter("codProcedimiento");
                consExpVO.setCodProcedimiento(codProcedimiento);
                String tiempo = request.getParameter("tiempo");
                consExpVO.setTiempo(tiempo);
                String fechaDesde="";
                String fechaHasta="";
                if("4".equals(tiempo)){ //Es un intervalo de fechas
                    String intervalo = request.getParameter("intervalo");
                    int posicion_intervalo = intervalo.indexOf("||");
                    fechaDesde=intervalo.substring(0,posicion_intervalo);
                    fechaHasta=intervalo.substring(posicion_intervalo +2);
                }
                String estado = request.getParameter("estado");
                 m_Log.debug("Estado" +estado);
                if (estado.equals("abierto")) {
                    consExpVO.setVerTramitesAbiertos(true);
                    /** PRUEBA **/
                    consExpVO.setEstadoTramiteBusquedaDesdeInformesGestion(1);
                    /** PRUEBA **/
                } else if (estado.equals("cerrado")) {
                    consExpVO.setEstado("sinEstado");
                    consExpVO.setVerTramitesAbiertos(false);
                    /** PRUEBA **/ 
                    consExpVO.setEstadoTramiteBusquedaDesdeInformesGestion(2);
                    /** PRUEBA **/
                }else if (estado.equals("anulado")) {
                    consExpVO.setEstado("sinEstado");
                    consExpVO.setVerTramitesAbiertos(false);
                }
                consExpVO.setDesdeInformesGestion(true);
                
                /** PRUEBA **/
                String fechaInicio = request.getParameter("fechaInicio");
                String fechaFin    = request.getParameter("fechaFin");
                /** PRUEBA **/
                
                if(fechaInicio!=null && !"".equals(fechaInicio) && !"null".equalsIgnoreCase(fechaInicio))
                    consExpVO.setFechaInicioTramiteBusquedaDesdeInformesGestion(fechaInicio);
                else consExpVO.setFechaInicioTramiteBusquedaDesdeInformesGestion(fechaDesde);
                
                if(fechaFin!=null && !"".equals(fechaFin) && !"null".equalsIgnoreCase(fechaFin))
                    consExpVO.setFechaFinTramiteBusquedaDesdeInformesGestion(fechaFin);
                else consExpVO.setFechaFinTramiteBusquedaDesdeInformesGestion(fechaHasta);
                
                boolean tieneDirectiva = UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.CONSULTA_SOLO_EXPEDIENTES_TRAMITADOR,usuario.getIdUsuario(), params);
                int numeroDeExpedientes = 0;
                Vector consulta = null;
                session.setAttribute("limitadaDirectivaInformesGestión", "no");
                if (!tieneDirectiva)                    
                    numeroDeExpedientes = ConsultaExpedientesManager.getInstance().contarExpedientes(usuario, consExpVO, params, true, true);                
                else{
                    numeroDeExpedientes = ConsultaExpedientesManager.getInstance().contarExpedientesUsuarioTramitador(usuario, consExpVO, params, true, false);
                    session.setAttribute("limitadaDirectivaInformesGestión", "si");
                }
                m_Log.debug("  &&&&&&&&&& consultarDesdeGestion num expedientes: " + numeroDeExpedientes);
                consExpForm.setNumRelacionExpedientes(numeroDeExpedientes);

                if (!tieneDirectiva)                    
                    consulta = ConsultaExpedientesManager.getInstance().consultar(usuario, consExpVO, params, true, true,"","",false);                
                else{
                    session.setAttribute("limitadaDirectivaInformesGestión", "si");
                    consulta = ConsultaExpedientesManager.getInstance().consultarUsuarioTramitador(usuario, consExpVO, params, true, false,"","",false);
                }
                m_Log.debug("  &&&&&&&&&& consultarDesdeGestion nº consulta: " + consulta.size());
                // SE INDICA QUE LA CONSULTA SE HACE DESDE GESTIÓN DE INFORMES
                // Se indica a ocultoCargaPaginaRelacionExpedientes.jsp que se accede desde informes de gestión
                

                // Serializar los datos en disco.
                try {
                    String aleatorio = "_" + Double.toString(Math.random()).substring(2);
                    String pathFile = m_Conf.getString("PDF.base_dir") + File.separator + "tmp" + File.separator + "datos" + aleatorio + ".bin";
                    m_Log.debug(" PATHFILE " + pathFile);
                    FileOutputStream fos = new FileOutputStream(pathFile);
                    ObjectOutputStream out = new ObjectOutputStream(fos);
                    for (Object aConsulta : consulta) {
                        out.writeObject(aConsulta);
                    }
                    out.close();
                    session.setAttribute("ficheroDatos", pathFile);
                    session.removeAttribute("errorConsulta");
                } catch (IOException ioe) {
                    if (m_Log.isErrorEnabled()) m_Log.error("ERROR AL ESCRIBIR LOS DATOS TEMPORALES EN UN FICHERO");
                    ioe.printStackTrace();
                    session.setAttribute("errorConsulta", "ErrorMessages.Sge.ConsultaExp.SaveTempError");
                }

                //TENEMOS QUE RECUPERAR LAS COLUMNAS A MOSTRAR EN EL LISTADO Y EL TAMA?0 (LISTADO TIPO 1)
                Vector listaCamposListados = TramitacionManager.getInstance().getCamposListado(1, params);
                consExpVO.setCamposListados(listaCamposListados);

                session.setAttribute("RelacionExpedientes", consulta);
                session.setAttribute("desdeInformesGestion", "si");

                consExpForm.setResultadoConsulta(consulta);
                consExpForm.setConsultaExpedientes(consExpVO);
                opcion = "consultarListado";
                session.setAttribute("consulta", "normal");
            } else if ("cargar_pagina".equals(opcion)) {

                if(session.getAttribute("parametrosBusquedaExpediente")!=null && !consExpForm.getConsultaExpedientes().isDesdeInformesGestion()){
                    // SI NO SE VIENE DE INFORMES DE GESTIÓN
                    consExpVO = null;
                    consExpVO=(ConsultaExpedientesValueObject) session.getAttribute("parametrosBusquedaExpediente");
                }else{
                    //RECUPERO LOS CRITERIOS DE CONSULTA
                    consExpVO = consExpForm.getConsultaExpedientes();
                }

                String pagina=request.getParameter("paginaListado");
                consExpVO.setPaginaListado(pagina);
                String lineas=request.getParameter("numLineasPaginaListado");
                consExpVO.setNumLineasPaginaListado(lineas);

                //recibo el id del campo que pertece a la columna por la que hay que ordenar
                String columna =  request.getParameter("columna");
                String  tipoOrden = request.getParameter("tipoOrden");
                m_Log.debug("ORDENAR antes de buscar    " + columna + " , " +tipoOrden);

                if ("false".equals(tipoOrden)){
                    tipoOrden="DESC";
                }else if("true".equals(tipoOrden)) {
                    tipoOrden="ASC";
                }
                
                
                 String desdeFichaExpediente= request.getParameter("desdeFichaExpediente");
                
                if ("si".equals(desdeFichaExpediente)) {

                    if (pagina == null || "".equals(pagina)) {
                        String pagina_pendientes = (String) session.getAttribute("pagina_pendientes");
                        consExpVO.setPaginaListado(pagina_pendientes);

                    }
                    if (lineas == null || "".equals(lineas)) {
                        String lineas_pendientes = (String) session.getAttribute("lineas_pendientes");
                        consExpVO.setNumLineasPaginaListado(lineas_pendientes);
                    }
                    if (columna == null || "".equals(columna)) {
                        columna = (String) session.getAttribute("columna_pendientes");

                    }
                    if (tipoOrden == null || "".equals(tipoOrden)) {
                        String tipoOrden_pendientes = (String) session.getAttribute("tipoOrden_pendientes");
                        if ("false".equals(tipoOrden_pendientes)) {
                            tipoOrden = "DESC";
                        } else if ("true".equals(tipoOrden_pendientes)) {
                            tipoOrden = "ASC";
                        }
                    }

                } else {
                    session.removeAttribute("pagina_pendientes");
                    session.removeAttribute("lineas_pendientes");
                    session.removeAttribute("columna_pendientes");
                    session.removeAttribute("tipoOrden_pendientes");

                }


                String porCampoSup=request.getParameter("porCampoSup");
                //miramos si viene po campo suplementario o de consultaexpedientes
                Vector listadoExpediente = null;
                String pantallaAuditoria = null;
                if("si".equals(porCampoSup)){
                       m_Log.debug("-- campo suplementario" );
                    pantallaAuditoria = ConstantesAuditoria.EXPEDIENTE_CONSULTA_LISTADO_POR_CAMPOS_SUPL;
                    
                    //RECUPERO LOS CRITERIOS DE CONSULTA sin tener el cuenta el VO1 guardado en sesion
                    //debido a que este solo tendra criterios de busqueda si viene desde consulta expedientes
                    consExpVO = null;
                    consExpVO = consExpForm.getConsultaExpedientes();
                    consExpForm=(ConsultaExpedientesForm)session.getAttribute("ConsultaExpedientesForm");
                    consExpVO.setCamposSuplementarios(consExpForm.getCamposSuplementarios());
                    HashMap camposSuplementarios = consExpVO.getCamposSuplementarios();
                    
                    Integer tamaño = Integer.parseInt((String)session.getAttribute("tamanho"));
                    camposSuplementarios.put("TAMAÑO", tamaño);
                    consExpVO.setCamposSuplementarios(null);
                    consExpVO.setCamposSuplementarios(camposSuplementarios);
                    m_Log.debug(" CONSULTA POR CAMPOS SUPLEMENTARIOS TAMAÑO EN LA SESION: " + (String)session.getAttribute("tamanho"));
                    m_Log.debug(" CONSULTA POR CAMPOS SUPLEMENTARIOS TAMAÑO EN LA SESION: " + (Integer)consExpVO.getCamposSuplementarios().get("TAMAÑO"));
                  // Hay que pasar los campos de ordenacion
                    boolean tieneDirectiva = UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.CONSULTA_SOLO_EXPEDIENTES_TRAMITADOR,usuario.getIdUsuario(), params);
                 
                    if(!tieneDirectiva){
                       listadoExpediente = ConsultaExpedientesManager.getInstance().consultaPorCamposSuplementarios(usuario, consExpVO, params,columna,tipoOrden);
                    }else{
                       listadoExpediente = ConsultaExpedientesManager.getInstance().consultaPorCamposSuplementariosUsuarioTramitador(usuario, consExpVO, params,columna,tipoOrden, Integer.parseInt((String)session.getAttribute("tamanho")));
                    }
                    
             consExpForm.setResultadoConsulta(null);
                    consExpVO = consExpForm.getConsultaExpedientes();
                    consExpForm.setResultadoConsulta(listadoExpediente);


                }else{

                     m_Log.debug("-- consulta expediente" );
                     pantallaAuditoria = ConstantesAuditoria.EXPEDIENTE_CONSULTA_LISTADO;
                     boolean tieneDirectiva = UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.CONSULTA_SOLO_EXPEDIENTES_TRAMITADOR,usuario.getIdUsuario(), params);
                     if(!tieneDirectiva){
                     // Llamamos al manager para realizar la consulta.
                        listadoExpediente = ConsultaExpedientesManager.getInstance().consultar(usuario, consExpVO, params, false, true,columna,tipoOrden,false);                     }else{
                         //  SÓLO SE RECUPERAN LOS EXPEDIENTES QUE HA TRAMITADO EL USUARIO Y NO SE RECUPERAN AQUELLOS EN LOS QUE TENGA PERMISO
                         // SOBRE LA UNIDAD DE INICIO DEL PROCEDIMIENTO
                         listadoExpediente = ConsultaExpedientesManager.getInstance().consultarUsuarioTramitador(usuario, consExpVO, params, false, false,columna,tipoOrden,false);                     }
                     
                    consExpForm.setResultadoConsulta(null);
                    consExpForm.setResultadoConsulta(listadoExpediente);                    
                    int numeroDeExpedientes = 0;
                    
                    //#147100 Comentamos a partir de aqui para la optimización 
                    /*if(!tieneDirectiva){
                        numeroDeExpedientes = ConsultaExpedientesManager.getInstance().contarExpedientes(usuario, consExpVO, params, true, true);
                    }else{
                        // Si el usuario tiene activada la directiva consultar sólo los expedientes tramitador por el usuario
                        numeroDeExpedientes = ConsultaExpedientesManager.getInstance().contarExpedientesUsuarioTramitador(usuario, consExpVO, params, false,false);
                    }

                    consExpForm.setNumRelacionExpedientes(numeroDeExpedientes);*/
                    // Serializar los datos en disco.
                  /*  try {
                        String aleatorio = "_" + Double.toString(Math.random()).substring(2);
                        String pathFile = m_Conf.getString("PDF.base_dir") + File.separator + "tmp" + File.separator + "datos" + aleatorio + ".bin";
                        m_Log.debug(" PATHFILE " + pathFile);
                        File f = new File(pathFile);
                        File fd = new File(f.getParent());
                        if (!fd.exists()) {
                            fd.mkdirs();
                        }
                        FileOutputStream fos = new FileOutputStream(f);
                        ObjectOutputStream out = new ObjectOutputStream(fos);
                        for (Object aConsulta : consulta) {
                            out.writeObject(aConsulta);
                        }
                        out.close();
                        session.setAttribute("ficheroDatos", pathFile);
                        session.removeAttribute("errorConsulta");
                    } catch (IOException ioe) {
                        if (m_Log.isErrorEnabled()) m_Log.error("ERROR AL ESCRIBIR LOS DATOS TEMPORALES EN UN FICHERO");
                        ioe.printStackTrace();
                        session.setAttribute("errorConsulta", "ErrorMessages.Sge.ConsultaExp.SaveTempError");
                    }*/

                }
                 // Auditoria de accesos al expediente
                try {
                    AuditoriaManager.getInstance().auditarAccesoExpediente(
                            pantallaAuditoria,
                            usuario,
                            listadoExpediente);
                } catch (TramitacionException te) {
                    m_Log.error("No se pudo registrar el evento de auditoria", te);
                }
                
                consExpVO.setRespOpcion("");
                opcion = "cargar_pagina";
            } else if ("expedientesRelacionados".equals(opcion)) {
                if (UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.NO_RELACIONAR_EXP, usuario.getIdUsuario(), params)) {
                    consExpForm.setDirectivaNoRelacionarExp("si");
                } else consExpForm.setDirectivaNoRelacionarExp("no");
                consExpVO = consExpForm.getConsultaExpedientes();
                String codMunicipio = request.getParameter("nCS");
                String ejercicio = request.getParameter("codMun");
                String numeroExpediente = request.getParameter("codProc");
                String modoConsulta = request.getParameter("codTram");
                consExpVO.setCodMunicipio(codMunicipio);
                consExpVO.setEjercicio(ejercicio);
                consExpVO.setNumeroExpediente(numeroExpediente);
                consExpVO.setModoConsulta(modoConsulta);
                Vector expedientesRelacionados = ConsultaExpedientesManager.getInstance().getExpedientesRelacionados(consExpVO, params);
                consExpVO.setListaExpedientesRel(expedientesRelacionados);
                consExpForm.setConsultaExpedientes(consExpVO);
                 // Auditoria de accesos al expediente
                try {
                    AuditoriaManager.getInstance().auditarAccesoExpedienteRelacionado(
                            ConstantesAuditoria.EXPEDIENTE_VER_CONSULTA_LISTADO_RELACIONADOS,
                            usuario,
                            expedientesRelacionados);
                } catch (TramitacionException te) {
                    m_Log.error("No se pudo registrar el evento de auditoria", te);
                }
                opcion = "expedientesRelacionados";
            }else if ("recuperarRolProcedimiento".equals(opcion)) {
                 m_Log.debug("ConsultaExpedientesAction. La opción es: recuperarRolProcedimiento");
                 // Se recuperan el codigo de Procedimiento seleccionado, para buscar sus roles.
                String codigoProc = request.getParameter("codProcedimiento");
                m_Log.debug("ConsultaExpedientesAction. El codigo del procedimiento seleccionado es: "+codigoProc);
                //Aqui ahora recuperaremos la lista de Roles....
                ArrayList<RolVO> roles= new ArrayList<RolVO>();
                try{
                   roles=RolManager.getInstance().dameRolesDeProcedimiento(params,codigoProc, usuario.getOrgCod());
                }catch(Exception e){
                      m_Log.debug("Saltó excepción en ConsultaExpedientesAction.Opcion: recuperarRolProcedimiento.");
                      e.printStackTrace();
                }
                
                    //Ahora que tenemos los Roles, transformar la lista a xml para pasar a la .jsp
                    //En principio como parece que solo necesitamos los codigos y descripción de los Roles
                    //solo psamos esta info
                    StringBuffer xmlSalida = new StringBuffer();
                    xmlSalida.append("<RESPUESTA>");
                    xmlSalida.append("<ROLES>");
                    for(RolVO rol : roles){
                         xmlSalida.append("<ROL>");
                             xmlSalida.append("<CODIGO>");
                                 xmlSalida.append(rol.getCodigo());
                             xmlSalida.append("</CODIGO>");
                             xmlSalida.append("<DESCRIPCION>");
                                 xmlSalida.append(rol.getDescripcion());
                             xmlSalida.append("</DESCRIPCION>");

                         xmlSalida.append("</ROL>");
                    }//for
                 xmlSalida.append("</ROLES>");
                 xmlSalida.append("</RESPUESTA>");
                 m_Log.debug("ConsultaExpedientesAction.Opcion: RecuperarRolesProcedimiento. XML generado: "+ xmlSalida.toString());
                 try{
                     response.setContentType("text/xml");
                     response.setCharacterEncoding("UTF-8");
                     PrintWriter out = response.getWriter();
                     out.print(xmlSalida.toString());
                     out.flush();
                     out.close();
                 }catch(Exception e){
                     m_Log.debug("Saltó excepcion en ConsultaExpedienteAction.Opcion:RecuperarRolesProcedimiento.");
                     e.printStackTrace();
                 }//try-catch
                
           
            }
            else if ("insertarExpedienteRelacionado".equals(opcion)) {
                consExpVO = consExpForm.getConsultaExpedientes();
                m_Log.debug("##############################################" + consExpVO.getNumeroExpediente());
                String codMunicipioIni = request.getParameter("codMunExpIni");
                String ejercicioIni = request.getParameter("ejercicioExpIni");
                String numeroExpedienteIni = request.getParameter("numeroExpIni");
                consExpVO.setCodMunicipioIni(codMunicipioIni);
                consExpVO.setEjercicioIni(ejercicioIni);
                consExpVO.setNumeroExpedienteIni(numeroExpedienteIni);
                String codMunicipio = request.getParameter("codMunicipio");
                String ejercicio = request.getParameter("ejercicio");
                String numeroExpediente = request.getParameter("numero");
                consExpVO.setCodMunicipio(codMunicipio);
                consExpVO.setEjercicio(ejercicio);
                consExpVO.setNumeroExpediente(numeroExpediente);
                int resultado = ConsultaExpedientesManager.getInstance().insertExpedientesRelacionados(consExpVO, params);
                String respOpcion;
                if (resultado > 0) {
                    consExpVO.setUsuario(Integer.toString(usuario.getIdUsuario()));
                    consExpVO.setNombreUsuario(usuario.getNombreUsu());
                    OperacionesExpedienteManager.getInstance().registrarAnhadirRelacion(consExpVO, params);
                    respOpcion = "grabarExpRel";
                } else {
                    respOpcion = "NoGrabadoExpRel";
                }
                consExpVO.setRespOpcion(respOpcion);
                consExpForm.setConsultaExpedientes(consExpVO);
                opcion = "cargar_pagina";
            } else if ("eliminarExpedienteRelacionado".equals(opcion)) {
                String codMunicipioIni = request.getParameter("codMunicipioIni");
                String ejercicioIni = request.getParameter("ejercicioIni");
                String numeroExpedienteIni = request.getParameter("numeroIni");
                String codMunicipio = request.getParameter("codMunicipio");
                String ejercicio = request.getParameter("ejercicio");
                String numeroExpediente = request.getParameter("numero");
                consExpVO.setCodMunicipioIni(codMunicipioIni);
                consExpVO.setEjercicioIni(ejercicioIni);
                consExpVO.setNumeroExpedienteIni(numeroExpedienteIni);
                consExpVO.setCodMunicipio(codMunicipio);
                consExpVO.setEjercicio(ejercicio);
                consExpVO.setNumeroExpediente(numeroExpediente);
                int resultado = ConsultaExpedientesManager.getInstance().eliminarExpedientesRelacionados(consExpVO, params);
                String respOpcion;
                if (resultado > 0) {
                    consExpVO.setUsuario(Integer.toString(usuario.getIdUsuario()));
                    consExpVO.setNombreUsuario(usuario.getNombreUsu());
                    OperacionesExpedienteManager.getInstance().registrarEliminarRelacion(consExpVO, params);
                    
                    respOpcion = "eliminarExpRel";
                } else {
                    respOpcion = "NoEliminadoExpRel";
                }
                consExpVO.setRespOpcion(respOpcion);

                consExpVO.setCodMunicipio(codMunicipioIni);
                consExpVO.setEjercicio(ejercicioIni);
                consExpVO.setNumeroExpediente(numeroExpedienteIni);
                Vector expedientesRelacionados = ConsultaExpedientesManager.getInstance().getExpedientesRelacionados(consExpVO, params);
                consExpVO.setListaExpedientesRel(expedientesRelacionados);
                consExpForm.setConsultaExpedientes(consExpVO);
                opcion = "ocultoExpedientesRelacionados";
            } else if ("expRel".equals(opcion)) {
                consExpVO = consExpForm.getConsultaExpedientes();
                String codMunicipio = request.getParameter("codMunExpIni");
                String ejercicio = request.getParameter("ejercicioExpIni");
                String numeroExpediente = request.getParameter("numeroExpIni");
                consExpVO.setCodMunicipio(codMunicipio);
                consExpVO.setEjercicio(ejercicio);
                consExpVO.setNumeroExpediente(numeroExpediente);
                Vector expedientesRelacionados = ConsultaExpedientesManager.getInstance().getExpedientesRelacionados(consExpVO, params);
                consExpVO.setListaExpedientesRel(expedientesRelacionados);
                consExpVO.setRespOpcion("");
                consExpForm.setConsultaExpedientes(consExpVO);
                opcion = "expedientesRelacionados";
            } else if ("consultarListado".equals(opcion)) {

                  m_Log.debug(" CONSULTAR LISTADO *******************************************" );
                String desdeInformesGestion = request.getParameter("desdeInformesGestion");
                String todos = request.getParameter("todos");
                if (desdeInformesGestion != null && desdeInformesGestion.equals("si")) {
                    session.setAttribute("desdeInformesGestion", desdeInformesGestion);
                    session.setAttribute("todos", todos);
                }
            } else if (opcion.equals("imprimir") || opcion.equals("exportarCSV"))  {
                m_Log.info("Impresión de la relación de Expedientes - BEGIN");

                   consExpVO=(ConsultaExpedientesValueObject) session.getAttribute("parametrosBusquedaExpediente");
                ConsultaExpedientesValueObject consExpVO1 = new ConsultaExpedientesValueObject();
                  consExpVO1 = consExpVO;
                 session.setAttribute("parametrosBusquedaExpediente", consExpVO1);

                if (consExpForm != null && consExpForm.getConsultaExpedientes() != null
                        && !consExpForm.getConsultaExpedientes().isDesdeInformesGestion()) {
                    // Si no se viene de informes de gestión se recuperan los criterios de la sesión
                  consExpVO = (ConsultaExpedientesValueObject)session.getAttribute("parametrosBusquedaExpediente");
                } else{
                    // Si se viene de informes de gestión, se recuperan los criterios del formulario
                    consExpVO = consExpForm.getConsultaExpedientes();
                }

                Vector<TramitacionValueObject> relacionExpedientes = new Vector<TramitacionValueObject>();
                //recibo el id del campo que pertece a la columna por la que hay que ordenar
                String columna =  request.getParameter("columna");
                String  tipoOrden = request.getParameter("tipoOrden");
                m_Log.debug("ORDENAR antes de buscar    " + columna + " , " +tipoOrden);

                if ("false".equals(tipoOrden)){
                    tipoOrden="DESC";
                }else if("true".equals(tipoOrden)) {
                    tipoOrden="ASC";
                }

                String porCampoSup=request.getParameter("porCampoSup");
                //miramos si viene po campo suplementario o de consultaexpedientes

                if("si".equals(porCampoSup)){
                      m_Log.debug("-- campo suplementario" );
                    //RECUPERO LOS CRITERIOS DE CONSULTA sin tener el cuenta el VO1 guardado en sesion
                    //debido a que este solo tendra criterios de busqueda si viene desde consulta expedientes
                    consExpVO = null;
                    consExpVO = consExpForm.getConsultaExpedientes();
                    consExpVO.setImprimiendo(true);
                    consExpForm=(ConsultaExpedientesForm)session.getAttribute("ConsultaExpedientesForm");
                    consExpVO.setCamposSuplementarios(consExpForm.getCamposSuplementarios());
                    HashMap camposSuplementarios = consExpVO.getCamposSuplementarios();
                    m_Log.debug("ConsultaExpedientesAction. En la session"+session.getAttribute("tamanho"));
                    Integer tamaño = Integer.parseInt((String)session.getAttribute("tamanho"));
                    camposSuplementarios.put("TAMAÑO", tamaño);
                    consExpVO.setCamposSuplementarios(camposSuplementarios);
                    m_Log.debug("------------    El tamaño es " + tamaño);

                    // SE COMPRUEBA SI EL USUARIO TIENE ACTIVA LA DIRECTIVA QUE PERMITE CONSULTAR
                    // SOLO LOS EXPEDIENTES QUE EL USUARIO HA TRAMITADOR Y HA INICIADO
                    boolean tieneDirectiva = UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.CONSULTA_SOLO_EXPEDIENTES_TRAMITADOR,usuario.getIdUsuario(), params);

                    if(!tieneDirectiva){
                     relacionExpedientes = ConsultaExpedientesManager.getInstance().consultaPorCamposSuplementariosImprimir(usuario, consExpVO, params,columna,tipoOrden,opcion.equals("exportarCSV"));
                    }else{
                       relacionExpedientes =  ConsultaExpedientesManager.getInstance().consultaPorCamposSuplementariosUsuarioTramitadorImprimir(usuario, consExpVO, params,columna,tipoOrden, Integer.parseInt((String)session.getAttribute("tamanho")),opcion.equals("exportarCSV"));
                    }

                }else{
                    consExpVO.setImprimiendo(true);
                     m_Log.debug("-- consulta expediente" );
                     // SE COMPRUEBA SI EL USUARIO TIENE ACTIVA LA DIRECTIVA QUE PERMITE CONSULTAR
                    // SOLO LOS EXPEDIENTES QUE EL USUARIO HA TRAMITADO Y HA INICIADO
                     boolean tieneDirectiva = UsuariosGruposManager.getInstance().tienePermisoDirectiva(ConstantesDatos.CONSULTA_SOLO_EXPEDIENTES_TRAMITADOR,usuario.getIdUsuario(), params);
                     if(!tieneDirectiva){
                        // Llamamos al manager para realizar la consulta.
                    relacionExpedientes = ConsultaExpedientesManager.getInstance().consultarImprimirOptimo(usuario, consExpVO, params, false, true,columna,tipoOrden,opcion.equals("exportarCSV"));
                     }else{
                         //  SÓLO SE RECUPERAN LOS EXPEDIENTES QUE HA TRAMITADO EL USUARIO Y NO SE RECUPERAN AQUELLOS EN LOS QUE TENGA PERMISO
                         // SOBRE LA UNIDAD DE INICIO DEL PROCEDIMIENTO
                        relacionExpedientes = ConsultaExpedientesManager.getInstance().consultarUsuarioTramitadorImprimir(usuario, consExpVO, params, false, false,columna,tipoOrden,opcion.equals("exportarCSV"));
                     }
                }
                consExpVO.setImprimiendo(false);
                String idioma = IdiomasManager.getInstance().getClaveIdioma(params, usuario.getIdioma());
                GeneralValueObject gVO = new GeneralValueObject();
                gVO.setAtributo("baseDir", m_Conf.getString("PDF.base_dir"));
                gVO.setAtributo("aplPathReal", this.getServlet().getServletContext().getRealPath(""));
                gVO.setAtributo("usuDir", usuario.getDtr());
                gVO.setAtributo("pdfFile", "SGE");

                String sUrl = request.getSession().getServletContext().getRealPath("/");
                int index = sUrl.indexOf("\\");
                if (index > 0) sUrl = sUrl.substring(index);
                gVO.setAtributo("estilo", "css/listadoExpedientes.css");

                GeneralPDF pdf = null;
                if (opcion.equals("imprimir")) {
                     pdf = new GeneralPDF(params, gVO);
                    Fecha f = new Fecha();
                    Date fSistema = new Date();
                    String fechaActual = f.construirFecha(fSistema);
                    File cabecera = pdf.transformaXML("<CABECERA><FECHA>" + fechaActual + "</FECHA></CABECERA>", 
                            "cabeceraListadoExpedientes" + "_" + idioma);
                    gVO.setAtributo("cabecera", cabecera.getPath());
                    gVO.setAtributo("tamCabecera", "10mm");
                }

                Vector<File> ficheros = new Vector<File>();
                 String pantallaAuditoria = null;
                String plantilla = "";
                if (opcion.equals("imprimir")) {
                    pantallaAuditoria = ConstantesAuditoria.EXPEDIENTE_CONSULTA_LISTADO_INFORME;
                    plantilla = "listadoExpedientes";
                } else if (opcion.equals("exportarCSV")) {
                    pantallaAuditoria = ConstantesAuditoria.EXPEDIENTE_CONSULTA_LISTADO_INFORME_CSV;
                    plantilla = "listadoExpedientesCSV";
                }              
                plantilla += "_" + idioma; // Idioma
                 String textoXML="";
                if (params[0] != null && (params[0].equals("oracle") || params[0].equals("ORACLE"))) {
                   textoXML = crearXMLOptimo(relacionExpedientes, consExpVO);
                }else{
                    textoXML = crearXML(relacionExpedientes, consExpVO);
                }

                m_Log.debug(textoXML);
                m_Log.debug (textoXML);
                pdf = new GeneralPDF(params, gVO);
                ficheros.add(pdf.transformaXML(textoXML, plantilla));

                if (opcion.equals("imprimir")) {
                    request.setAttribute("nombre", pdf.getPdf(ficheros));
                    request.setAttribute("dir", usuario.getDtr());

                } else if (opcion.equals("exportarCSV")) {
                    request.setAttribute("nombre", pdf.getCSV(ficheros));
                    request.setAttribute("dir", usuario.getDtr());

                }
                request.setAttribute("opcion", opcion);
                
                                
                if(relacionExpedientes!=null && relacionExpedientes.size()>0){
                    if(relacionExpedientes.get(0).isExportarConsultaSuperadosLimiteMaximo()){
                        
                        int num = relacionExpedientes.get(0).getNumMaximoExpedientesRecuperados();
                        request.setAttribute("NUM_MAXIMO_EXPEDIENTES_EXPORTACION_EXCEDIDOS",num);
                    }                    
                }
                 // Auditoria de accesos al expediente
                try {
                    AuditoriaManager.getInstance().auditarAccesoExpediente(
                            pantallaAuditoria,
                            usuario,
                            relacionExpedientes);
                } catch (TramitacionException te) {
                    m_Log.error("No se pudo registrar el evento de auditoria", te);
                }

                m_Log.info("Impresión de la relación de Expedientes - END");
            }else  if (opcion.equals("expedientesRelacionadosConLocalizacion")) {
                // Se recuperan los expedientes relacionados con localización
                String localizacion       = request.getParameter("loc");
                String numExpediente = request.getParameter("num");

                m_Log.debug("localizacion: " + localizacion);
                ArrayList<TramitacionValueObject> expedientes = new ArrayList<TramitacionValueObject>();
                int numExpedientes = 0;
                if(localizacion!=null && localizacion.length()>0){
                    try{                        
                        numExpedientes = ConsultaExpedientesManager.getInstance().getNumExpedientesConLocalizacion(localizacion, numExpediente,params);
                        m_Log.debug("Hay " + numExpedientes + "expedientes para la localización: " + localizacion);
                    }catch(Exception e){
                        m_Log.error("ConsultaExpedientesAction error: " + e.getMessage());
                    }
                }else m_Log.debug("No se pueden recuperar expedientes ya que se desconoce la localización: " + localizacion);

                request.setAttribute("numExpedienteTratado",numExpediente);
                request.setAttribute("localizacionExpediente",localizacion);
                request.getSession().setAttribute("numExpedientesRelacionadosConLocalizacion",numExpedientes);
                
            }else
            if(opcion.equals("cargarPaginaExpedientesRelacionadosConLocalizacion")) {

                 //RECUPERO LOS CRITERIOS DE CONSULTA          
                consExpVO = new ConsultaExpedientesValueObject();
                String localizacion = request.getParameter("loc");
                if(localizacion!=null && localizacion.length()>0){
                   consExpVO.setLocalizacion(localizacion);
                }

                // En los criterios de la consulta se va a añadir la localización para que filtre por este campo
                String pagina=request.getParameter("paginaListado");
                consExpVO.setPaginaListado(pagina);
                String lineas=request.getParameter("numLineasPaginaListado");
                consExpVO.setNumLineasPaginaListado(lineas);

                String numeroExpediente = request.getParameter("num");

                //recibo el id del campo que pertece a la columna por la que hay que ordenar
                String columna =  request.getParameter("columna");
                String  tipoOrden = request.getParameter("tipoOrden");
                m_Log.debug("ORDENAR antes de buscar    " + columna + " , " +tipoOrden);

                if ("false".equals(tipoOrden)){
                    tipoOrden="DESC";
                }else if("true".equals(tipoOrden)) {
                    tipoOrden="ASC";
                }

                int codMunicipio = usuario.getOrgCod();
                

                // Se recuperan los expedientes relacionados con el expediente actual
                ArrayList<ConsultaExpedientesValueObject> expRelacionados = ConsultaExpedientesManager.getInstance().getExpRelacionados(numeroExpediente,codMunicipio,localizacion,params);
                m_Log.debug("Hay " + expRelacionados.size() + " relacionados con el expediente " + numeroExpediente);

                 m_Log.debug("-- consulta expediente" );
                // Se recuperan los expedientes que cumplen el criterio de búsqueda (en este caso por localización) y sin incluir el expediente actual
                Vector consulta = ConsultaExpedientesManager.getInstance().getExpedientesConCriterioExcepto(usuario, consExpVO, params, false, true,columna,tipoOrden,false,numeroExpediente);
                consExpForm.setResultadoConsulta(null);                 
                consExpForm.setResultadoConsulta(consulta);
                
                int numeroDeExpedientes = 0;
                try{
                    numeroDeExpedientes = ConsultaExpedientesManager.getInstance().getNumExpedientesConLocalizacion(localizacion, numeroExpediente,params);
                }catch(Exception e){
                    e.printStackTrace();
                    m_Log.error("ConsultaExpedienteAction " + e.getMessage());
                }
                                
                consExpForm.setNumRelacionExpedientes(numeroDeExpedientes);
                consExpVO.setRespOpcion("");
                opcion = "cargarPaginaExpedientesRelacionadosConLocalizacion";

                // Se comprueba de los expedientes relacionados con el actual, cual está entre los expedientes que tienen la misma localización
                ArrayList<String> expedientesChequeados = new ArrayList<String>();
                for(int i=0;i<expRelacionados.size();i++){
                    String num = isExpedienteEn(expRelacionados.get(i).getNumeroExpediente(), consulta);
                    if(num!=null)
                        expedientesChequeados.add(num);

                }// for

                request.setAttribute("expedientesChequeados",expedientesChequeados);
                 
                // Auditoria de accesos al expediente
                try {
                    AuditoriaManager.getInstance().auditarAccesoExpediente(
                            ConstantesAuditoria.EXPEDIENTE_CONSULTA_LISTADO_POR_LOCALIZACION,
                            usuario,
                            consulta);
                } catch (TramitacionException te) {
                    m_Log.error("No se pudo registrar el evento de auditoria", te);
                }
            }

        } else { // No hay usuario.
            m_Log.debug("MantAnotacionRegistroAction --> no hay usuario");
            opcion = "no_usuario";
        }
        /* Redirigimos al JSP de salida*/
        m_Log.debug("<================== ConsultaExpedientesAction ===============");
        return (mapping.findForward(opcion));
        }


   

    /*
     *  Comprueba si un expediente se encuentra en una determinada colección de expedientes que tienen
     * la misma localización
     * @param numExpediente: Número de expediente
     * @param expedientesConLocalizacion: Vector de objetos TramitacionValueObject
     * @return null si no está o el número de expediente se encuentra en la colección
     */
    private String isExpedienteEn(String numExpediente,Vector expedientesConLocalizacion){
        String numero = null;

        for(int i=0;i<expedientesConLocalizacion.size();i++){
            TramitacionValueObject obj =(TramitacionValueObject)expedientesConLocalizacion.get(i);
            if(obj.getNumero().equals(numExpediente)){
                numero = obj.getNumero();
                break;
            }// if
        }// for

        return numero;
    }// isExpedienteEn


    private String crearXML(Vector relacionExp, ConsultaExpedientesValueObject consExpVO) {

        Hashtable criterios = consExpVO.getCriterios();
        StringBuffer textoXml = new StringBuffer("");
        textoXml.append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>");
        textoXml.append("<LISTADO_EXPEDIENTES>");

        // CRITERIOS
        if (criterios != null) {
            textoXml.append("<CRITERIOS>");

            if (criterios.get("procedimientos") != null)
                textoXml.append("<PROCEDIMIENTO>").append((String)
                        criterios.get("procedimientos")).append("</PROCEDIMIENTO>");
            else textoXml.append("<PROCEDIMIENTO/>");

            if (criterios.get("estado") != null)
                textoXml.append("<ESTADO>").append((String) criterios.get("estado")).append("</ESTADO>");
            else textoXml.append("<ESTADO/>");

            if (criterios.get("titular") != null)
                textoXml.append("<TITULAR>").append((String) criterios.get("titular")).append("</TITULAR>");
            else textoXml.append("<TITULAR/>");

            if (criterios.get("localizacion") != null)
                textoXml.append("<LOCALIZACION>").append((String)
                        criterios.get("localizacion")).append("</LOCALIZACION>");
            else textoXml.append("<LOCALIZACION/>");

            Vector descClasifTramites = (Vector) criterios.get("clasificacionTramite");

            if (descClasifTramites.size() > 0) {
                textoXml.append("<CLASIFICACION_TRAMITE>");
                for (int i = 0; i < descClasifTramites.size(); i++) {
                    GeneralValueObject ct = (GeneralValueObject) descClasifTramites.elementAt(i);
                    textoXml.append("<CLASE>").append((String) ct.getAtributo("descripcion")).append("</CLASE>");
                }
                textoXml.append("</CLASIFICACION_TRAMITE>");
            } else textoXml.append("<CLASIFICACION_TRAMITE/>");
            textoXml.append("<TIPO_LISTADO>0</TIPO_LISTADO>");
            textoXml.append("</CRITERIOS>");
        } else {
            textoXml.append("<CRITERIOS>");
            textoXml.append("<PROCEDIMIENTO/>");
            textoXml.append("<ESTADO/>");
            textoXml.append("<TITULAR/>");
            textoXml.append("<LOCALIZACION/>");
            textoXml.append("<CLASIFICACION_TRAMITE/>");
            if (consExpVO.isVerTramitesAbiertos()) textoXml.append("<TIPO_LISTADO>0</TIPO_LISTADO>");
            else textoXml.append("<TIPO_LISTADO>1</TIPO_LISTADO>");
            textoXml.append("</CRITERIOS>");
        }

        m_Log.debug("NUMERO DE RELACIONES RECUPERADAS:" + consExpVO);

        for (Object aRelacionExp : relacionExp) {
            TramitacionValueObject filaInforme = (TramitacionValueObject) aRelacionExp;
            textoXml.append("<EXPEDIENTE>");
            textoXml.append("<NUMERO>").append(filaInforme.getNumero()).append("</NUMERO>");
            String desProc = TransformacionAtributoSelect.escapeValorParaXML(filaInforme.getDescProcedimiento());
            textoXml.append("<DESCRIPCION_PROCEDIMIENTO>").append(desProc).append("</DESCRIPCION_PROCEDIMIENTO>");
            String titular = TransformacionAtributoSelect.escapeValorParaXML(filaInforme.getTitular());            
             if(titular!=null && !"null".equals(titular)){
                textoXml.append("<TITULAR>");
                
                String [] listaInteresados = titular.split(">>");
                for (int i=0;i<listaInteresados.length;i++){
                    textoXml.append("<LINEA><CONT>").append(listaInteresados[i]).append("</CONT></LINEA>");
                }
                textoXml.append("</TITULAR>");
            }
            else{
                textoXml.append("<TITULAR>").append("</TITULAR>");   
            }
            if (filaInforme.getAsuntoExp() != null) {
                String asuntoExpediente = AdaptadorSQLBD.js_unescape(filaInforme.getAsuntoExp());
                String resultado = TransformacionAtributoSelect.escapeValorParaXML(asuntoExpediente).replaceAll("[\n\r]", "");;
                textoXml.append("<ASUNTO>").append(resultado).append("</ASUNTO>");
            }
            String fechaInicio = filaInforme.getFechaInicioExpediente();
            String fechaFin = filaInforme.getFechaFinExpediente();
            if (fechaFin == null) {
                fechaFin = "";
            }
             textoXml.append("<FECHA_INICIO>").append(fechaInicio).append("</FECHA_INICIO>");
            textoXml.append("<FECHA_FIN>").append(fechaFin).append("</FECHA_FIN>");
            Vector tramitesIniciados = filaInforme.getListaTramitesAbiertos();
            Vector fechasInicioTramites = filaInforme.getListaFechasInicioTramitesAbiertos();
            Vector fechasFinTramites = filaInforme.getListaFechasFinTramitesAbiertos();

            if (fechasInicioTramites != null) {
                for (int i = 0; i < tramitesIniciados.size(); i++) {
                    textoXml.append("<TRAMITE>");
                    textoXml.append("<FECHA_INICIO>").append((String) fechasInicioTramites.get(i)).append("</FECHA_INICIO>");
                    /**/

                    if(fechasFinTramites.get(i)!=null)
                        textoXml.append("<FECHA_FIN>").append((String) fechasFinTramites.get(i)).append("</FECHA_FIN>");
                    else textoXml.append("<FECHA_FIN>").append("</FECHA_FIN>");

                    String nombreTramite = TransformacionAtributoSelect.escapeValorParaXML((String) tramitesIniciados.get(i));
                    textoXml.append("<NOMBRE>").append(nombreTramite).append("</NOMBRE>");
                    textoXml.append("</TRAMITE>");
                }
            }
            textoXml.append("</EXPEDIENTE>");
        }
        textoXml.append("</LISTADO_EXPEDIENTES>");
        m_Log.debug(textoXml.toString());
        return textoXml.toString();
    }

    
    
    private String crearXMLOptimo(Vector relacionExp, ConsultaExpedientesValueObject consExpVO) {

        Hashtable criterios = consExpVO.getCriterios();
        StringBuffer textoXml = new StringBuffer("");
        textoXml.append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>");
        textoXml.append("<LISTADO_EXPEDIENTES>");

        // CRITERIOS
        if (criterios != null) {
            textoXml.append("<CRITERIOS>");

            if (criterios.get("procedimientos") != null)
                textoXml.append("<PROCEDIMIENTO>").append((String)
                        criterios.get("procedimientos")).append("</PROCEDIMIENTO>");
            else textoXml.append("<PROCEDIMIENTO/>");

            if (criterios.get("estado") != null)
                textoXml.append("<ESTADO>").append((String) criterios.get("estado")).append("</ESTADO>");
            else textoXml.append("<ESTADO/>");

            if (criterios.get("titular") != null)
                textoXml.append("<TITULAR>").append((String) criterios.get("titular")).append("</TITULAR>");
            else textoXml.append("<TITULAR/>");

            if (criterios.get("localizacion") != null)
                textoXml.append("<LOCALIZACION>").append((String)
                        criterios.get("localizacion")).append("</LOCALIZACION>");
            else textoXml.append("<LOCALIZACION/>");

            Vector descClasifTramites = (Vector) criterios.get("clasificacionTramite");

            if (descClasifTramites.size() > 0) {
                textoXml.append("<CLASIFICACION_TRAMITE>");
                for (int i = 0; i < descClasifTramites.size(); i++) {
                    GeneralValueObject ct = (GeneralValueObject) descClasifTramites.elementAt(i);
                    textoXml.append("<CLASE>").append((String) ct.getAtributo("descripcion")).append("</CLASE>");
                }
                textoXml.append("</CLASIFICACION_TRAMITE>");
            } else textoXml.append("<CLASIFICACION_TRAMITE/>");
            textoXml.append("<TIPO_LISTADO>0</TIPO_LISTADO>");
            textoXml.append("</CRITERIOS>");
        } else {
            textoXml.append("<CRITERIOS>");
            textoXml.append("<PROCEDIMIENTO/>");
            textoXml.append("<ESTADO/>");
            textoXml.append("<TITULAR/>");
            textoXml.append("<LOCALIZACION/>");
            textoXml.append("<CLASIFICACION_TRAMITE/>");
            if (consExpVO.isVerTramitesAbiertos()) textoXml.append("<TIPO_LISTADO>0</TIPO_LISTADO>");
            else textoXml.append("<TIPO_LISTADO>1</TIPO_LISTADO>");
            textoXml.append("</CRITERIOS>");
        }

        m_Log.debug("NUMERO DE RELACIONES RECUPERADAS:" + consExpVO);

        for (Object aRelacionExp : relacionExp) {
            TramitacionValueObject filaInforme = (TramitacionValueObject) aRelacionExp;
            textoXml.append("<EXPEDIENTE>");
            textoXml.append("<NUMERO>").append(filaInforme.getNumero()).append("</NUMERO>");
            String desProc = TransformacionAtributoSelect.escapeValorParaXML(filaInforme.getDescProcedimiento());
            textoXml.append("<DESCRIPCION_PROCEDIMIENTO>").append(desProc).append("</DESCRIPCION_PROCEDIMIENTO>");
            String titular = TransformacionAtributoSelect.escapeValorParaXML(filaInforme.getTitular());            
             if(titular!=null && !"null".equals(titular)){
                textoXml.append("<TITULAR>");
                
                String [] listaInteresados = titular.split(">>");
                for (int i=0;i<listaInteresados.length;i++){
                    textoXml.append("<LINEA><CONT>").append(listaInteresados[i]).append("</CONT></LINEA>");
                }
                textoXml.append("</TITULAR>");
            }
            else{
                textoXml.append("<TITULAR>").append("</TITULAR>");   
            }
            if (filaInforme.getAsuntoExp() != null) {
                String asuntoExpediente = AdaptadorSQLBD.js_unescape(filaInforme.getAsuntoExp());
                String resultado = TransformacionAtributoSelect.escapeValorParaXML(asuntoExpediente).replaceAll("[\n\r]", "");;
                textoXml.append("<ASUNTO>").append(resultado).append("</ASUNTO>");
            }
            String fechaInicio = filaInforme.getFechaInicioExpediente();
            String fechaFin = filaInforme.getFechaFinExpediente();
            if (fechaFin == null) {
                fechaFin = "";
            }
             textoXml.append("<FECHA_INICIO>").append(fechaInicio).append("</FECHA_INICIO>");
            textoXml.append("<FECHA_FIN>").append(fechaFin).append("</FECHA_FIN>");
            /*Vector tramitesIniciados = filaInforme.getListaTramitesAbiertos();
            Vector fechasInicioTramites = filaInforme.getListaFechasInicioTramitesAbiertos();
            Vector fechasFinTramites = filaInforme.getListaFechasFinTramitesAbiertos();*/
            String tramitesPendientes=filaInforme.getListaTramitesPendientes();

            if (tramitesPendientes != null) {
                
                    textoXml.append("<TRAMITE>");
                   
                    String tramite = TransformacionAtributoSelect.escapeValorParaXML(tramitesPendientes);
                    tramite=tramite.replace("$", "</TRAMITE><TRAMITE>");
                    tramite=tramite.replace("&amp;lt;", "<");
                    tramite=tramite.replace("&amp;gt;", ">");
                   
                    textoXml.append(tramite);
                    textoXml.append("</TRAMITE>");
                   
             }
            
            textoXml.append("</EXPEDIENTE>");
        }
        textoXml.append("</LISTADO_EXPEDIENTES>");
        //m_Log.debug(textoXml.toString());
        return textoXml.toString();
    }
    private void setCriteriosConsulta(ConsultaExpedientesValueObject ceVO, String[] params) {

        Hashtable criterios = new Hashtable();

        String c = ceVO.getCodProcedimiento();
        if (c != null) {
            if (!"".equals(c)) {
                if (c.indexOf("|") > 0 || c.indexOf("&") > 0 || c.indexOf(":") > 0 || c.indexOf("!") > 0 || c.indexOf(">") > 0
                        || c.indexOf("<") > 0 || c.indexOf("=") > 0) {
                    criterios.put("procedimientos", "VARIOS");
                } else criterios.put("procedimientos", ceVO.getDescProcedimiento());
            }
        }

        c = ceVO.getEstado();
        if ("abierto".equals(c))
            criterios.put("estado", "PENDIENTE");
        else if ("cerrado".equals(c))
            criterios.put("estado", "CERRADO");

        c = ceVO.getTitular();
        if (c != null) {
            if (!"".equals(c))
                criterios.put("titular", c);

        }

        c = ceVO.getLocalizacion();
        if (c != null) {
            if (!"".equals(c))
                criterios.put("localizacion", c);
        }

        c = ceVO.getCodClasifTramite();
        Vector descClasifTramites = new Vector();
        if (c == null)
            criterios.put("clasificacionTramite", descClasifTramites);
        else if ("".equals(c))
            criterios.put("clasificacionTramite", descClasifTramites);
        else {
            if (c.indexOf("|") > 0 || c.indexOf("&") > 0 || c.indexOf(":") > 0 || c.indexOf("!") > 0 || c.indexOf(">") > 0
                    || c.indexOf("<") > 0 || c.indexOf("=") > 0) {
                descClasifTramites = TramitesManager.getInstance().getListaTramitesByCodigos(params, ceVO.getCodClasifTramite());
                criterios.put("clasificacionTramite", descClasifTramites);
            } else {
                GeneralValueObject ct = new GeneralValueObject();
                ct.setAtributo("codigo", c);
                ct.setAtributo("descripcion", ceVO.getDescClasifTramite());
                descClasifTramites.add(ct);
            }
            criterios.put("clasificacionTramite", descClasifTramites);
        }
        ceVO.setCriterios(criterios);
    }
}

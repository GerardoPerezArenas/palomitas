/* Generated by Together */
package es.altia.agora.interfaces.user.web.terceros;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.terceros.persistence.TercerosManager;
import es.altia.agora.business.terceros.TercerosValueObject;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class EliminarDepuracionTercerosAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(EliminarDepuracionTercerosAction.class.getName());
    protected static Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) {

        m_Log.info("EliminarDepuracionTercerosAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();
        int codUsuario = 0;
        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
            codUsuario = usuarioVO.getIdUsuario();
        }
        String[] codTerAEliminar = (request.getParameter("codTerAEliminar")).split(",");
        String codTerDepurado = request.getParameter("codTerDepurado");
        String codDomPrincipal = request.getParameter("codDomPrincipal");

        try {
            TercerosManager.getInstance().eliminarTercerosSimilares(codTerDepurado, codDomPrincipal, codTerAEliminar, codUsuario, params);
        } catch (Exception e) {
            return (mapping.findForward("error"));
        }

        Vector tercerosRepetidos = (Vector) session.getAttribute("DepuracionTerceros.tercerosRepetidos");
        for (int k=0;k<tercerosRepetidos.size();k++) {
            for (int j=0;j<codTerAEliminar.length;j++) {
                if (codTerAEliminar[j].equals(((TerceroForm)tercerosRepetidos.elementAt(k)).getCodTercero())) {
                    tercerosRepetidos.remove(k);
                    k--;
                    break;
                }
            }
        }
        session.setAttribute("DepuracionTerceros.tercerosRepetidos", tercerosRepetidos);

        Vector terceros = (Vector) session.getAttribute("DepuracionTerceros.terceros");
        for (int k=0;k<terceros.size();k++) {
            for (int j=0;j<codTerAEliminar.length;j++) {
                if (codTerAEliminar[j].equals(((TerceroForm)terceros.elementAt(k)).getCodTercero())) {
                    terceros.remove(k);
                    k--;
                    break;
                }
            }
        }
        session.setAttribute("DepuracionTerceros.terceros", terceros);

        return (mapping.findForward("default"));
    }
}
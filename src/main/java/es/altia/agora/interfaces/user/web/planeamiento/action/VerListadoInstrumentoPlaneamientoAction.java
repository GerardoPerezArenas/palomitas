/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantSubseccionValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantTipoValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantAmbitoValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantProcedimientoValueObject;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.InstrumentoPlaneamientoForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class VerListadoInstrumentoPlaneamientoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(VerListadoInstrumentoPlaneamientoAction.class.getName());

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("VerListadoInstrumentoPlaneamientoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
        }

        Collection registrosPlaneamiento = new ArrayList();
        Iterator registrosPlaneamientoIt = ((Collection) session.getAttribute("registrosPlaneamiento")).iterator();

        Iterator subseccionesIt = null;
        Iterator tiposIt = null;
        Iterator ambitosIt = null;
        Iterator procedimientosIt = null;
        MantSubseccionValueObject subseccionVO = null;
        MantTipoValueObject tipoVO = null;
        MantAmbitoValueObject ambitoVO = null;
        MantProcedimientoValueObject procedimientoVO = null;
        InstrumentoPlaneamientoForm instrumentoForm = null;
        while (registrosPlaneamientoIt.hasNext()) {
            instrumentoForm = (InstrumentoPlaneamientoForm) registrosPlaneamientoIt.next();
            subseccionesIt = instrumentoForm.getSubsecciones().iterator();
            while (subseccionesIt.hasNext()) {
                subseccionVO = (MantSubseccionValueObject) subseccionesIt.next();
                if (subseccionVO.getCodigo().equals(instrumentoForm.getCodigoSubseccion())) {
                    instrumentoForm.setSubseccion(subseccionVO.getDescripcion());
                    break;
                }
            }
            tiposIt = instrumentoForm.getTipos().iterator();
            while (tiposIt.hasNext()) {
                tipoVO = (MantTipoValueObject) tiposIt.next();
                if (tipoVO.getCodigo().equals(instrumentoForm.getCodigoTipo())) {
                    instrumentoForm.setTipo(tipoVO.getDescripcion());
                    break;
                }
            }

            ambitosIt = instrumentoForm.getAmbitos().iterator();
            while (ambitosIt.hasNext()) {
                ambitoVO = (MantAmbitoValueObject) ambitosIt.next();
                if (ambitoVO.getCodigo().equals(instrumentoForm.getCodigoAmbito())) {
                    instrumentoForm.setAmbito(ambitoVO.getDescripcion());
                    break;
                }
            }

            procedimientosIt = instrumentoForm.getProcedimientos().iterator();
            while (procedimientosIt.hasNext()) {
                procedimientoVO = (MantProcedimientoValueObject) procedimientosIt.next();
                if (procedimientoVO.getCodigo().equals(instrumentoForm.getCodigoProcedimiento())) {
                    instrumentoForm.setProcedimiento(procedimientoVO.getDescripcion());
                    break;
                }
            }

            registrosPlaneamiento.add(instrumentoForm);
        }
        registrosPlaneamientoIt = registrosPlaneamiento.iterator();
        if (registrosPlaneamientoIt.hasNext()) {
            session.setAttribute("criteriosPlaneamiento", setCriteriosBusqueda(
                    (HashMap) session.getAttribute("criteriosPlaneamiento"),
                    (InstrumentoPlaneamientoForm) registrosPlaneamientoIt.next()));            
        }
        session.setAttribute("registrosPlaneamiento", registrosPlaneamiento);

        return (mapping.findForward("default"));
    }

    //Funcion que permite fijar los criterios de busqueda para ser utilizados en los informes de impresion
    private HashMap setCriteriosBusqueda(HashMap criterios, InstrumentoPlaneamientoForm instrumentoForm){

        if (criterios.get("subseccion")!=null) {
            criterios.put("subseccion", instrumentoForm.getSubseccion());
        }
        if (criterios.get("tipo")!=null) {
            criterios.put("tipo", instrumentoForm.getTipo());
        }
        if (criterios.get("procedimiento")!=null) {
            criterios.put("procedimiento", instrumentoForm.getProcedimiento());
        }
        if (criterios.get("ambito")!=null) {
            criterios.put("ambito", instrumentoForm.getAmbito());
        }
        if (criterios.get("organoAprobacion")!=null) {
            criterios.put("organoAprobacion", instrumentoForm.getOrganoAprobacion());
        }

        return criterios;
    }
}
/* Generated by Together */

package es.altia.agora.interfaces.user.web.util; 

import es.altia.agora.business.administracion.mantenimiento.persistence.IdiomasManager;
import es.altia.agora.business.escritorio.RegistroUsuarioValueObject;
import es.altia.agora.business.escritorio.UsuarioEscritorioValueObject;
import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.escritorio.persistence.UsuarioManager;
import es.altia.agora.business.util.LabelValueTO;
import es.altia.agora.interfaces.user.web.helper.ActionHelper;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.technical.ConstantesDatos;
import es.altia.common.service.config.*;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;


import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;


public final class CambioIdiomaAction extends ActionSession{
    protected static Log m_Log = LogFactory.getLog(CambioIdiomaAction.class.getName());

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
        throws IOException, ServletException {
            ActionHelper myActionHelper = new ActionHelper(getLocale(request), getResources(request));
            HttpSession session = request.getSession();
			
            // Validaremos los parametros del request especificados
            ActionErrors errors = new ActionErrors();

            String idioma = request.getParameter("idioma");
            /*En los módulos en los que usamos dojo metemos el cambio de idioma en la sesión.*/
            if(idioma==null || idioma.equals(""))
                idioma = (String) session.getAttribute("idioma");
            if(idioma==null || idioma.equals("")) idioma = String.valueOf(((UsuarioValueObject)session.getAttribute("usuario")).getIdioma());
            String opcion = "";

            UsuarioValueObject elUsuario = new UsuarioValueObject();
            
            UsuarioEscritorioValueObject ue = new UsuarioEscritorioValueObject();
            
            if (session.getAttribute("usuarioEscritorio") != null)
            	ue =(UsuarioEscritorioValueObject) session.getAttribute("usuarioEscritorio");
            
            if (session.getAttribute("usuario") != null)
               elUsuario = (UsuarioValueObject)session.getAttribute("usuario");

            try{
                IdiomasManager idiomasManager = IdiomasManager.getInstance();
               
						   if (m_Log.isDebugEnabled()) m_Log.debug("el codigo de la aplicacion es ****************** : " + elUsuario.getAppCod());
						   if (m_Log.isDebugEnabled()) m_Log.debug("el NUEVO idioma de la aplicacion es ****************** : " + idioma);
						   elUsuario.setIdioma(Integer.parseInt(idioma));
                                                    
                                                   
						   UsuarioManager um = UsuarioManager.getInstance();
						   ue.setIdiomaEsc(Integer.parseInt(idioma));
					       ue = um.buscaApp(ue);
						   session.setAttribute("usuarioEscritorio", ue);

                            // Fijamos el locale en función del idioma seleccionado
                            Locale oLocale = getCadenaLocale(elUsuario.getIdioma());
                            session.setAttribute("org.apache.struts.action.LOCALE", oLocale);           // para que tenga efecto en new ActionError ...
                            session.setAttribute("javax.servlet.jsp.jstl.fmt.locale.session", oLocale); // para que tenga efecto en <fmt:message ...

                           elUsuario = UsuarioManager.getInstance().buscaAppEnCurso(elUsuario);
                           m_Log.debug(">>>>>>> CambioIdiomaAction - getAppCod: " +  elUsuario.getAppCod());
                           
						   //Si se esta en la aplicacion Registro y existe el registroUsuario en la sesion tb se le cambia el idioma.
						   if ((elUsuario.getAppCod() == 1)&&(session.getAttribute("registroUsuario") != null)){
			
								 RegistroUsuarioValueObject registroUsuarioVO = (RegistroUsuarioValueObject)session.getAttribute("registroUsuario");
			
								 //Queremos usar el fichero de configuracion techserver
								 Config m_ConfigTechnical = ConfigServiceHelper.getConfig("techserver");
								 String unidadOrg = "";
								 if(elUsuario.getIdioma() == 1)
									 unidadOrg = m_ConfigTechnical.getString("PAR.RegistroGeneral.unidadOrg_1");
								 else
									 unidadOrg = m_ConfigTechnical.getString("PAR.RegistroGeneral.unidadOrg_2");
			
								 registroUsuarioVO.setUnidadOrg(unidadOrg);
								 session.setAttribute("registroUsuario",registroUsuarioVO);	
								 opcion = "cambio";				
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_ADMINISTRADOR_LOCAL)){
						   	 opcion= "administradorLocal";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_PADRON)){
						   	 opcion= "padron";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_TERCEROS_TERRITORIO)){
						   	 opcion= "terceros";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_GESTION_EXPEDIENTES)){
						   	 opcion= "expedientes";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_ADMINISTRADOR_GENERAL)){
						   	 opcion= "administradorGeneral";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_DOCUMENTOS)){
						   	 opcion= "documentos";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_WEB_CIUDADANO)){
						   	 opcion= "webCiudadano";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_INFORMES_DIRECCION)){
						   	 opcion= "informes";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_GESTION_FORMULARIOS)){
							   	 opcion= "gestionFormularios";
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_USUARIOS_FORMULARIOS)){
						   	 opcion= "usuariosFormularios";						   	 
						   } else if((elUsuario.getAppCod() == ConstantesDatos.APP_PARAMETROS_USUARIOS)){
						   	 opcion= "parametrosUsuarios";	 // Sección de parámetros usuarios					   	 
						   }else if((elUsuario.getAppCod() == ConstantesDatos.APP_GESTION_INFORMES)){
						   	 opcion= "gestionInformes";	 // Sección de gestión de informes
						   }else if((elUsuario.getAppCod() == ConstantesDatos.APP_INTEGRACION_SW)){
						   	 opcion= "integracionSW";	 // Sección de gestión de informes
						   }
				   
				   CargaMenu cm = new CargaMenu();
                                                 elUsuario.setCambioIdioma(true);
              
				   request.getSession().setAttribute("menuAppUsu",cm.getMenu(elUsuario));
			           session.setAttribute("usuario",elUsuario);
					if (m_Log.isDebugEnabled()) m_Log.debug("CambioIdiomaAction: " + session.getId());
                                   
                                   
                                   // Se recuperan los idiomas distinto al actual del usuario y se guardan en sesión junto con la 
                                   // descripción del idioma actual
                                   getIdiomasDistintosActual(elUsuario,session);
            }
            catch (Exception se) {

               errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("index.error.technicalProblem"));
               se.printStackTrace();

		}
						
            if (m_Log.isInfoEnabled()) m_Log.info("la opcion en el action CambioIdioma es " + opcion);

            return (mapping.findForward(opcion));
    }

    public static Locale getCadenaLocale (int iIdioma){

        String sLocale = ConstantesDatos.LOCALE_CASTELLANO;
        Locale oLocale = null;
        try{
            switch(iIdioma){
                case ConstantesDatos.IDIOMA_CASTELLANO:
                    sLocale = ConstantesDatos.LOCALE_CASTELLANO;
                    break;
                case ConstantesDatos.IDIOMA_GALLEGO:
                    sLocale = ConstantesDatos.LOCALE_GALLEGO;
                    break;
                case ConstantesDatos.IDIOMA_CATALÁN:
                    sLocale = ConstantesDatos.LOCALE_CATALÁN;
                    break;
                case ConstantesDatos.IDIOMA_EUSKERA:
                    sLocale = ConstantesDatos.LOCALE_EUSKERA;
                    break;
                case ConstantesDatos.IDIOMA_VALENCIANO:
                    sLocale = ConstantesDatos.LOCALE_VALENCIANO;
                    break;
                default:
                    break;
            }
            String[] asLocale = sLocale.split("_");
            oLocale = new Locale(asLocale[0], asLocale[1]);

        } catch (Exception e){
            m_Log.debug("Excepcion capturada en CambioIdiomaAction.getCadenaLocale()");
        }
        return oLocale;

    }
    
    
    /**
     * Recupera todos los idiomas distintos del actual y los guarda en sesión
     * @param usuarioVO
     * @param session
     */
    private void getIdiomasDistintosActual(UsuarioValueObject usuarioVO,HttpSession session)
    {
        IdiomasManager idiomasManager = IdiomasManager.getInstance();
        
        String[] paramsConexion = usuarioVO.getParamsCon();                                                                      
        ArrayList<LabelValueTO> listaIdiomas = idiomasManager.getListIdiomasLabel(paramsConexion,usuarioVO.getIdioma());                                                            
        session.setAttribute(ConstantesDatos.LISTA_IDIOMAS,listaIdiomas);                         
            
    }
}

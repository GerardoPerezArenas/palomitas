/* Generated by Together */
package es.altia.agora.interfaces.user.web.planeamiento.action;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.planeamiento.RegistroValueObject;
import es.altia.agora.business.planeamiento.AnotacionRegistroValueObject;
import es.altia.agora.business.planeamiento.PromotorValueObject;
import es.altia.agora.business.planeamiento.AnotacionRectificacionRegistroValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantSubseccionValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantTipoValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantAmbitoValueObject;
import es.altia.agora.business.planeamiento.mantenimiento.MantProcedimientoValueObject;
import es.altia.agora.business.planeamiento.persistence.*;
import es.altia.agora.business.terceros.persistence.TercerosManager;
import es.altia.agora.interfaces.user.web.util.ActionSession;
import es.altia.agora.interfaces.user.web.planeamiento.form.InstrumentoPlaneamientoForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.AnotacionForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.PromotorForm;
import es.altia.agora.interfaces.user.web.planeamiento.form.RectificacionForm;
import es.altia.common.service.config.Config;
import es.altia.common.service.config.ConfigServiceHelper;
import es.altia.util.exceptions.InternalErrorException;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;

import java.io.IOException;
import java.util.*;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public final class BuscarInstrumentoPlaneamientoAction extends ActionSession {

    protected static Log m_Log =
            LogFactory.getLog(BuscarInstrumentoPlaneamientoAction.class.getName());
    protected static Config m_ConfigApplication = ConfigServiceHelper.getConfig("techserver");

    public ActionForward performSession(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                        HttpServletResponse response) throws IOException, ServletException {

        m_Log.info("BuscarInstrumentoPlaneamientoAction.perform");
        String[] params = null;
        HttpSession session = request.getSession();

        if (session.getAttribute("usuario") != null){
            UsuarioValueObject usuarioVO = (UsuarioValueObject)session.getAttribute("usuario");
            params = usuarioVO.getParamsCon();
        }

        InstrumentoPlaneamientoForm instrumentoForm = (InstrumentoPlaneamientoForm) form;
        InstrumentoPlaneamientoForm instrumentoSessionForm = (InstrumentoPlaneamientoForm)
                session.getAttribute("InstrumentoPlaneamientoForm");
        Calendar fechaAprobacion = Calendar.getInstance();
        Calendar fechaVigencia = Calendar.getInstance();
        Calendar fechaBaja = Calendar.getInstance();
        Calendar fechaPublicacion = Calendar.getInstance();

        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        try{
            String fecha = instrumentoForm.getFechaAprobacion();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaAprobacion = null;
            } else {
                fechaAprobacion.setTime(format.parse(fecha));
            }
            fecha = instrumentoForm.getFechaVigencia();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaVigencia = null;
            } else {
                fechaVigencia.setTime(format.parse(fecha));
            }
            fecha = instrumentoForm.getFechaBaja();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaBaja = null;
            } else {
                fechaBaja.setTime(format.parse(fecha));
            }
            fecha = instrumentoForm.getFechaPublicacion();
            if ((fecha==null) || (fecha.equals(""))) {
                fechaPublicacion = null;
            } else {
                fechaPublicacion.setTime(format.parse(fecha));
            }
        } catch (Exception e) {//En principio nunca va a entrar
            e.printStackTrace();
            if (m_Log.isErrorEnabled()) m_Log.error(e.getMessage());
        }
        Integer numero = null;
        if (instrumentoForm.getNumero()!=null && !instrumentoForm.getNumero().equals("")) {
            numero = new Integer(instrumentoForm.getNumero());
        }
        Integer numeroProcedimiento = null;
        if (instrumentoForm.getNumeroProcedimiento()!=null && !instrumentoForm.getNumeroProcedimiento().equals("")) {
            numeroProcedimiento = new Integer(instrumentoForm.getNumeroProcedimiento());
        }
        Character promotorChar = null;
        if (instrumentoForm.getPromotor()!=null) {
            promotorChar = new Character(instrumentoForm.getPromotor().charAt(0));
        }
        RegistroValueObject registroVO = new RegistroValueObject(
                new Character(instrumentoForm.getTipoRegistro().charAt(0)),
                instrumentoForm.getCodigoSubseccion(), instrumentoForm.getCodigoTipo(),
                numero, instrumentoForm.getAnho(), null, null,
                fechaAprobacion, fechaVigencia, fechaBaja, instrumentoForm.getCodigoProcedimiento(), numeroProcedimiento,
                instrumentoForm.getCodigoAmbito(), instrumentoForm.getParcela(),
                promotorChar, instrumentoForm.getCodigoOrganoAprobacion(),
                null, null, null, null, null, null, fechaPublicacion, instrumentoForm.getNumeroPublicacion(),
                instrumentoForm.getObservaciones(), instrumentoForm.getArchivo());
        Collection registrosPlaneamiento = new ArrayList();
        Collection anotaciones = null;
        Collection rectificaciones = null;
        Collection promotores = null;
        InstrumentoPlaneamientoForm insPlanForm = null;

        Vector registros = RegistroManager.getInstance().findByAll(registroVO, params);

        /************Buscamos por promotor si es necesario, en cuyo caso filtramos los registros***************/
        String promotor = instrumentoForm.getPromotor();
        boolean noPromotores = false;
        Iterator noPromotoresColIt =
                m_ConfigTechnical.getCollection("Planeamiento.Promotores.NoPromotores").iterator();
        String codigoPromotor;
        Vector registrosPromotor = new Vector();
        Iterator promotoresIt = null;
        while (noPromotoresColIt.hasNext()) {
            codigoPromotor = (String) noPromotoresColIt.next();
            if (promotor!=null && promotor.equals(codigoPromotor)) {
                noPromotores = true;
                break;
            }
        }
        Iterator registrosIt = null;
        RegistroValueObject registro = null;
        PromotorValueObject promotorVO = null;
        if (promotor!=null && !noPromotores) {
            promotores = instrumentoSessionForm.getCodigosPromotor();
            if (promotores!=null && !promotores.isEmpty()) {
                promotoresIt = promotores.iterator();
                Collection codigosPromotor = new ArrayList();
                while (promotoresIt.hasNext()) {
                    PromotorForm promotorForm = (PromotorForm) promotoresIt.next();
                    codigosPromotor.add(new Integer(promotorForm.getCodigo()));
                }
                registrosPromotor = PromotorManager.getInstance().findByPromotores(codigosPromotor, params);

                registrosIt = registros.iterator();
                registros = new Vector();
                while (registrosIt.hasNext()) {
                    registro = (RegistroValueObject) registrosIt.next();
                    promotorVO = new PromotorValueObject(registro.getTipoRegistro(), registro.getCodigoSubseccion(),
                            registro.getNumero(), registro.getAnho(), new Integer(-1));
                    if (registrosPromotor.contains(promotorVO)) {
                        registros.add(registro);
                    }
                }
            }
        }

        /***************************************************************************************************/

        registrosIt = registros.iterator();
        Iterator anotacionesIt = null;
        AnotacionRegistroValueObject anotacionVO = null;
        AnotacionForm anotacionForm = null;
        Iterator anotacionesRectificacionIt = null;
        AnotacionRectificacionRegistroValueObject anotacionRectificacionVO = null;
        RectificacionForm rectificacionForm = null;
        PromotorForm promotorForm = null;

        //***** Para la busqueda por listado
        Iterator subseccionesIt = null;
        Iterator tiposIt = null;
        Iterator ambitosIt = null;
        Iterator procedimientosIt = null;
        MantSubseccionValueObject subseccionVO = null;
        MantTipoValueObject tipoVO = null;
        MantAmbitoValueObject ambitoVO = null;
        MantProcedimientoValueObject procedimientoVO = null;
        //************

        while (registrosIt.hasNext()) {
            registro = (RegistroValueObject) registrosIt.next();
            anotaciones = new ArrayList();
            anotacionesIt = AnotacionRegistroManager.getInstance().findByRegistro(registro.getTipoRegistro(),
                    registro.getCodigoSubseccion(), registro.getAnho(),
                    registro.getNumero(), params).iterator();
            while (anotacionesIt.hasNext()) {
                anotacionVO = (AnotacionRegistroValueObject) anotacionesIt.next();
                anotacionForm = new AnotacionForm();
                anotacionForm.setNumeroAnotacion(anotacionVO.getNumeroAnotacion());
                anotacionForm.setFechaAnotacion(format.format(anotacionVO.getFechaAnotacion().getTime()));
                anotacionForm.setComentarioAnotacion(anotacionVO.getObservaciones().replaceAll("\r\n", "@intro@"));
                anotaciones.add(anotacionForm);
            }
            rectificaciones = new ArrayList();
            anotacionesRectificacionIt = AnotacionRectificacionRegistroManager.getInstance().findByRegistro(registro.getTipoRegistro(),
                    registro.getCodigoSubseccion(), registro.getAnho(),
                    registro.getNumero(), params).iterator();
            while (anotacionesRectificacionIt.hasNext()) {
                anotacionRectificacionVO = (AnotacionRectificacionRegistroValueObject) anotacionesRectificacionIt.next();
                rectificacionForm = new RectificacionForm();
                rectificacionForm.setNumeroRectificacion(anotacionRectificacionVO.getNumeroAnotacion());
                rectificacionForm.setFechaRectificacion(format.format(anotacionRectificacionVO.getFechaAnotacion().getTime()));
                rectificacionForm.setComentarioRectificacion(anotacionRectificacionVO.getObservaciones().replaceAll("\r\n", "@intro@"));
                rectificaciones.add(rectificacionForm);
            }
            promotores = new ArrayList();
            promotoresIt = PromotorManager.getInstance().findByRegistro(registro.getTipoRegistro(),
                    registro.getCodigoSubseccion(), registro.getAnho(),
                    registro.getNumero(), params).iterator();
            while (promotoresIt.hasNext()) {
                promotorVO = (PromotorValueObject) promotoresIt.next();
                promotorForm = new PromotorForm();
                promotorForm.setCodigo(promotorVO.getCodigo().toString());
                promotorForm.setDescripcion(TercerosManager.getInstance().getNombreTercero(
                        promotorVO.getCodigo().intValue(), params));
                promotores.add(promotorForm);
            }
            insPlanForm = new InstrumentoPlaneamientoForm();
            insPlanForm.setTipoRegistro(instrumentoForm.getTipoRegistro());
            insPlanForm.setCodigoSubseccion(registro.getCodigoSubseccion());
            insPlanForm.setCodigoTipo(registro.getCodigoTipo());
            insPlanForm.setNumero(registro.getNumero().toString());
            insPlanForm.setAnho(registro.getAnho());
            Calendar fecha = registro.getFechaAprobacion();
            String stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            insPlanForm.setFechaAprobacion(stringFecha);
            fecha = registro.getFechaVigencia();
            stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            insPlanForm.setFechaVigencia(stringFecha);
            fecha = registro.getFechaBaja();
            stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            insPlanForm.setFechaBaja(stringFecha);
            insPlanForm.setCodigoProcedimiento(registro.getCodigoProcedimiento());
            String numProcedimiento = "";
            if (registro.getNumeroProcedimiento()!=null && registro.getNumeroProcedimiento().intValue()!=-1
                     && registro.getNumeroProcedimiento().intValue()!=0) {
                numProcedimiento = registro.getNumeroProcedimiento().toString();
            }
            insPlanForm.setNumeroProcedimiento(numProcedimiento);
            insPlanForm.setCodigoAmbito(registro.getCodigoAmbito());
            String parcela = registro.getParcela();
            if (parcela==null) {
                parcela = "";
            }
            insPlanForm.setParcela(parcela);
            insPlanForm.setPromotor(registro.getPromotor().toString());
            insPlanForm.setCodigoOrganoAprobacion(registro.getCodigoOrganoAprobacion());
            fecha = registro.getFechaPublicacion();
            stringFecha = "";
            if (fecha!=null) {
                stringFecha = format.format(fecha.getTime());
            }
            insPlanForm.setFechaPublicacion(stringFecha);
            insPlanForm.setNumeroPublicacion(registro.getNumeroPublicacion());
            String observaciones = registro.getObservaciones();
            if (observaciones!=null && !observaciones.equals("")) {
                observaciones = observaciones.replaceAll("\r\n", "@intro@");
            }
            insPlanForm.setObservaciones(observaciones);
            String file = registro.getArchivo();
            if (file!=null && !file.equals("")) {
                file = file.replaceAll("\r\n", "@intro@");
            }
            insPlanForm.setArchivo(file);
            insPlanForm.setAnotaciones(anotaciones);
            insPlanForm.setRectificaciones(rectificaciones);
            insPlanForm.setSubsecciones(instrumentoSessionForm.getSubsecciones());
            insPlanForm.setTipos(instrumentoSessionForm.getTipos());
            insPlanForm.setProcedimientos(instrumentoSessionForm.getProcedimientos());
            insPlanForm.setAmbitos(instrumentoSessionForm.getAmbitos());
            insPlanForm.setOrganosAprobacion(instrumentoSessionForm.getOrganosAprobacion());
            insPlanForm.setPromotores(instrumentoSessionForm.getPromotores());
            insPlanForm.setCodigosPromotor(promotores);

            //Si la salida es un listado necesitamos los nombres
            if (request.getParameter("listado").equals("true")) {
                subseccionesIt = instrumentoSessionForm.getSubsecciones().iterator();
                while (subseccionesIt.hasNext()) {
                    subseccionVO = (MantSubseccionValueObject) subseccionesIt.next();
                    if (subseccionVO.getCodigo().equals(insPlanForm.getCodigoSubseccion())) {
                        insPlanForm.setSubseccion(subseccionVO.getDescripcion());
                        break;
                    }
                }
                tiposIt = instrumentoSessionForm.getTipos().iterator();
                while (tiposIt.hasNext()) {
                    tipoVO = (MantTipoValueObject) tiposIt.next();
                    if (tipoVO.getCodigo().equals(insPlanForm.getCodigoTipo())) {
                        insPlanForm.setTipo(tipoVO.getDescripcion());
                        break;
                    }
                }

                ambitosIt = instrumentoSessionForm.getAmbitos().iterator();
                while (ambitosIt.hasNext()) {
                    ambitoVO = (MantAmbitoValueObject) ambitosIt.next();
                    if (ambitoVO.getCodigo().equals(insPlanForm.getCodigoAmbito())) {
                        insPlanForm.setAmbito(ambitoVO.getDescripcion());
                        break;
                    }
                }
                procedimientosIt = instrumentoSessionForm.getProcedimientos().iterator();
                while (procedimientosIt.hasNext()) {
                    procedimientoVO = (MantProcedimientoValueObject) procedimientosIt.next();
                    if (procedimientoVO.getCodigo().equals(insPlanForm.getCodigoProcedimiento())) {
                        insPlanForm.setProcedimiento(procedimientoVO.getDescripcion());
                        break;
                    }
                }
            }

            registrosPlaneamiento.add(insPlanForm);
        }
        session.setAttribute("registrosPlaneamiento", registrosPlaneamiento);
        session.setAttribute("criteriosPlaneamiento", setCriteriosBusqueda(instrumentoForm));
        Iterator registrosPlaneamientoIt = registrosPlaneamiento.iterator();
        if (registrosPlaneamientoIt.hasNext()) {
            session.setAttribute("InstrumentoPlaneamientoForm", registrosPlaneamientoIt.next());
            request.setAttribute("registroActual", "1");
        } else {
            request.setAttribute("registroActual", "-1");
        }

        if (request.getParameter("listado").equals("true")) {
            return (mapping.findForward("listado"));
        }
        return (mapping.findForward("default"));
    }

    //Funcion que permite fijar los criterios de busqueda para ser utilizados en los informes de impresion
    private HashMap setCriteriosBusqueda(InstrumentoPlaneamientoForm instrumentoForm){
        HashMap criterios = new HashMap();

        if (instrumentoForm.getCodigoSubseccion()!=null && !instrumentoForm.getCodigoSubseccion().equals("")) {
            criterios.put("subseccion", instrumentoForm.getSubseccion());
        }
        if (instrumentoForm.getCodigoTipo()!=null && !instrumentoForm.getCodigoTipo().equals("")) {
            criterios.put("tipo", instrumentoForm.getTipo());
        }
        if (instrumentoForm.getCodigoProcedimiento()!=null && !instrumentoForm.getCodigoProcedimiento().equals("")) {
            criterios.put("procedimiento", instrumentoForm.getProcedimiento());
        }
        if (instrumentoForm.getNumeroProcedimiento()!=null && !instrumentoForm.getNumeroProcedimiento().equals("")) {
            criterios.put("numeroProcedimiento", instrumentoForm.getNumeroProcedimiento());
        }
        if (instrumentoForm.getCodigoAmbito()!=null && !instrumentoForm.getCodigoAmbito().equals("")) {
            criterios.put("ambito", instrumentoForm.getAmbito());
        }
        if (instrumentoForm.getParcela()!=null && !instrumentoForm.getParcela().equals("")) {
            criterios.put("parcela", instrumentoForm.getParcela());
        }
        if (instrumentoForm.getPromotor()!=null && !instrumentoForm.getPromotor().equals("")) {
            Iterator codigosPromotorIt = m_ConfigTechnical.getCollection("Planeamiento.Promotores.Codigos").iterator();
            Object[] promotores = m_ConfigTechnical.getCollection("Planeamiento.Promotores.Descripciones").toArray();
            int pos = 0;
            while (codigosPromotorIt.hasNext()) {
                if (instrumentoForm.getPromotor().equals((String) codigosPromotorIt.next())) {
                    break;
                }
                pos++;
            }
            criterios.put("promotor", promotores[pos]);
        }
        if (instrumentoForm.getCodigoOrganoAprobacion()!=null && !instrumentoForm.getCodigoOrganoAprobacion().equals("")) {
            criterios.put("organoAprobacion", instrumentoForm.getOrganoAprobacion());
        }
        if (instrumentoForm.getFechaAprobacion()!=null && !instrumentoForm.getFechaAprobacion().equals("")) {
            criterios.put("fechaAprobacion", instrumentoForm.getFechaAprobacion());
        }
        if (instrumentoForm.getFechaVigencia()!=null && !instrumentoForm.getFechaVigencia().equals("")) {
            criterios.put("fechaVigencia", instrumentoForm.getFechaVigencia());
        }
        if (instrumentoForm.getFechaBaja()!=null && !instrumentoForm.getFechaBaja().equals("")) {
            criterios.put("fechaBaja", instrumentoForm.getFechaBaja());
        }
        if (instrumentoForm.getFechaPublicacion()!=null && !instrumentoForm.getFechaPublicacion().equals("")) {
            criterios.put("fechaPublicacion", instrumentoForm.getFechaPublicacion());
        }
        if (instrumentoForm.getNumeroPublicacion()!=null && !instrumentoForm.getNumeroPublicacion().equals("")) {
            criterios.put("numeroPublicacion", instrumentoForm.getNumeroPublicacion());
        }
        if (instrumentoForm.getObservaciones()!=null && !instrumentoForm.getObservaciones().equals("")) {
            criterios.put("observaciones", instrumentoForm.getObservaciones());
        }
        if (instrumentoForm.getArchivo()!=null && !instrumentoForm.getArchivo().equals("")) {
            criterios.put("archivo", instrumentoForm.getArchivo());
        }

        return criterios;
    }
}
/* Generated by Together */
package es.altia.flexia.integracion.lanbide.impresion;

import es.altia.agora.business.escritorio.UsuarioValueObject;
import es.altia.agora.business.util.GeneralValueObject;
import es.altia.common.service.config.*;
import es.altia.common.service.jdbc.XAJDBCWrapper;
import es.altia.common.service.log.*;
import es.altia.common.exception.*;
import es.altia.util.sqlxmlpdf.GeneralPDF;

import java.lang.Runnable;
import java.lang.Thread;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.Vector;

import javax.naming.Context;
import javax.transaction.UserTransaction;



public class EjecutaImpresion implements Runnable{
    /**
     * Esto es un código que sigue el patrón de diseño <code>Singleton</code>
     * Los métodos de negocio gestionan que la persistencia sea manual o automática
     * Es protected, por lo que la única manera de instanciar esta clase es usando el factory method <code>getInstance</code>
     */
    public EjecutaImpresion() {
        //Queremos usar el servicio de log
        m_Log = LogServiceHelper.getLog(this.getClass().getName());
    }
    

    private Thread comprobAdecAutThread = null;
     String[] listaExp = null; 
     int codO = 0;
     String codProc = null; 
     String codTra = null;
     String[] parametros = null;
     UsuarioValueObject usu = null;
     String codExp = null;
     String sUrl = null;
     Config m_Conf = null;
     String idioma = null;
     String tSexo = null; 
     String codtSexo = null; 
     String tFechNacimiento = null; 
     String codtFechNacimiento = null; 
     String path = null;
     String impresionCEPAP = null;
    


    public void start( String[] lListaExpedientesSeleccionados, int codOrg, String codProcedimiento, String codTramite, String[] params, 
                UsuarioValueObject usuario, String newCodExpediente, String url, Config m_Config, String idio, 
                String tSex, String codtSex, String tFechNa, String codtFechN, String impreCEPAP, String ruta) {
        //m_Log.error("start comprobacion adecuacion automática: " + id_oferta);
        comprobAdecAutThread = new Thread(this, "EjecutaImpresion");
        listaExp = lListaExpedientesSeleccionados; 
        codO = codOrg;
        codProc = codProcedimiento; 
        codTra = codTramite;
        parametros = params;
        usu = usuario;
        codExp = newCodExpediente;
        sUrl = url;
        m_Conf = m_Config;
        idioma = idio;
        tSexo = tSex; 
        codtSexo = codtSex; 
        tFechNacimiento = tFechNa; 
        codtFechNacimiento = codtFechN; 
        path = ruta;
        impresionCEPAP = impreCEPAP;
        comprobAdecAutThread.run();
    }

    public void run() {
        try {  
            
           m_Log.debug(" ****************** Inicio de proceso THREAD **********>");
           m_Log.debug("codProc: " + codProc);
           m_Log.debug("codTra: " + codTra);
           m_Log.debug("codO: " + codO);
           //int finTramite = 1;
           int finTramite = ImpresionExpedientesLanbideAction.getInstance().finalizarAvanzarTramite(codO, codProc, codTra, parametros, usu, listaExp);
           m_Log.debug(" ****************** Despues de llamar a finalizarAvanzarTramite finTramite: " + finTramite);
 
           Vector relacionExpedientes = ExpedienteImpresionManager.getInstance().consultar(codExp, codtSexo, codtFechNacimiento, usu, parametros);
 
           GeneralValueObject gVO = new GeneralValueObject();
           gVO.setAtributo("baseDir", m_Conf.getString("PDF.base_dir"));
           gVO.setAtributo("aplPathReal", path);
           gVO.setAtributo("usuDir", usu.getDtr());
           gVO.setAtributo("pdfFile", "SGE");
 
           //String sUrl = request.getSession().getServletContext().getRealPath("/");
           int index = sUrl.indexOf("\\");
           if (index > 0) {
             sUrl = sUrl.substring(index);
          }
           gVO.setAtributo("estilo", "css/listadoExpedientes.css");
 
           GeneralPDF pdf = null;
           Vector ficheros = new Vector();
           String plantilla = "";
           plantilla = "listadoExpedientesCEPAP";
           plantilla = plantilla + "_" + idioma;
           String textoXML = ImpresionExpedientesLanbideAction.getInstance().crearXML(relacionExpedientes, null);
           pdf = new GeneralPDF(parametros, gVO);
           ficheros.add(pdf.transformaXML(textoXML, plantilla));
           m_Log.error(" ****************** Fichero generado ****************** " );
           Calendar c = new GregorianCalendar();
           String dia = Integer.toString(c.get(5));
           String mes = Integer.toString(c.get(2));
           String annio = Integer.toString(c.get(1));
           String hora = Integer.toString(c.get(10));
           if (hora.length() < 2) hora = "0" + hora;
           String minuto = Integer.toString(c.get(12));
           if (minuto.length() < 2) minuto = "0" + minuto;
           String segundo = Integer.toString(c.get(13));
           if (segundo.length() < 2) segundo = "0" + segundo;
 
           Calendar FECHA_ACTUAL = Calendar.getInstance();
           SimpleDateFormat sf = new SimpleDateFormat("ddMMyyyy_HHmmss");
 
           String nombreFichero = impresionCEPAP + sf.format(FECHA_ACTUAL.getTime());
           //request.setAttribute("nombre", pdf.getCSVCEPAP(ficheros, nombreFichero));

           pdf.getCSVCEPAP(ficheros, nombreFichero);
           m_Log.error(" ****************** Fichero guardado en directorio ****************** " );
           //request.setAttribute("dir", usu.getDtr());
 
           int resInsertTable = ImpresionExpedientesLanbideAction.getInstance().guardarDatosExcelTabla(nombreFichero, listaExp, c, parametros, gVO);
             if (finTramite > 0) {
               //request.setAttribute("resInsertTable", Integer.valueOf(resInsertTable));
             } else {
               resInsertTable = 0;
               m_Log.debug(" ****************** ANTES DE DESHACER LOS CAMBIOS REALIZADOS");
               int desCamR = ImpresionExpedientesLanbideAction.getInstance().deshacerCambiosRealizados(nombreFichero, parametros, gVO);
              m_Log.debug(" ****************** DESPUeS DE DESHACER LOS CAMBIOS REALIZADOS");
               if (desCamR > 0) {
                 resInsertTable = 0;
                //request.setAttribute("resInsertTable", Integer.valueOf(resInsertTable));
               } else {
                 resInsertTable = 2;
                 //request.setAttribute("resInsertTable", Integer.valueOf(resInsertTable));
               }
             }
 
           //request.setAttribute("opcion", opcion);
        	
            //m_Log.error("Despues de lanzar");     
            m_Log.error(" ****************** FIN DEL THREAD ****************** " );
     
            
        } catch (Exception e){
            m_Log.error("----Error en ProcesadorComprobAdecAut----"+e.getMessage());     	   
        }
        comprobAdecAutThread.stop();
    }

    /*
     * Declaracion de servicios
     */
    Log m_Log;
    
}
